[
  {
    "path": "bacon/AppDelegate+BackgroundLocation.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  AppDelegate+BackgroundLocation.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 19/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import CoreLocation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import UserNotifications"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "extension AppDelegate: CLLocationManagerDelegate {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func locationManager(_ manager: CLLocationManager,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         didUpdateLocations locations: [CLLocation]) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.info(\"Received location update.\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        guard let latestLocation \u003d locations.last else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            // iOS guarantees that `locations` contains at least 1 CLLocation object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Delegate logic of deciding whether to send user a notification reminder"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // to LocationPrompt module"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        LocationPrompt.shouldPromptUser(currentLocation: latestLocation) { decision in"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.info(\"LocationPrompt decision\u003d\\(decision)\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            if !decision {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                return"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.info(\"Creating local notification\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            let notification \u003d UNMutableNotificationContent()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            notification.title \u003d Constants.notificationTitle"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            notification.subtitle \u003d Constants.notificationSubtitle"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            notification.body \u003d Constants.notificationBody"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            let trigger \u003d UNTimeIntervalNotificationTrigger(timeInterval: 1, repeats: false)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            let request \u003d UNNotificationRequest(identifier: Constants.notificationIdentifier,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                                content: notification,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                                trigger: trigger)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            self.notificationCenter.add(request) { error in"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                if let error \u003d error {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    log.warning(\"\"\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                        Error adding notification request to notification center:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                        \\(String(describing: error))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                    log.info(\"Added notification request to notification center\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 4,
      "Fabian": 50
    }
  },
  {
    "path": "bacon/AppDelegate.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  AppDelegate.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 19/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "// swiftlint:disable all"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import CoreData"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import CoreLocation"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import UIKit"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import UserNotifications"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import GoogleMaps"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import SwiftyBeaver"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "let log \u003d SwiftyBeaver.self"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "@UIApplicationMain"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": "class AppDelegate: UIResponder, UIApplicationDelegate {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    var window: UIWindow?"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let locationManager \u003d CLLocationManager()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let notificationCenter \u003d UNUserNotificationCenter.current()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -\u003e Bool {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Log to both Xcode console and default swiftybeaver.log file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let console \u003d ConsoleDestination()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let file \u003d FileDestination()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.addDestination(console)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.addDestination(file)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.info(\"Bacon is fired up\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Google Maps API key"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        GMSServices.provideAPIKey(Constants.LocationPromptGooglePlacesApiKey)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Location"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.info(\"Requesting location always authorization\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        locationManager.requestAlwaysAuthorization()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        locationManager.delegate \u003d self"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        locationManager.allowsBackgroundLocationUpdates \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Use startUpdatingLocation() for development and testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // because it provides more frequent updates."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Switch to startMonitoringSignificantLocationChanges() for production,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // which avoids spamming notifications (as with startUpdatingLocation())."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // This is because startUpdatingLocation() sends updates every few seconds."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.info(\"Starting location monitoring.\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        locationManager.startMonitoringSignificantLocationChanges()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Notifications"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.info(\"Requesting notifications authorization\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        notificationCenter.requestAuthorization(options: [.alert]) { (granted, error) in"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            if granted {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                log.info(\"User has granted notifictions authorization\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                log.warning(\"User has denied notifications authorization\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                if let error \u003d error {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                    log.warning(error)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Override point for customization after application launch."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func applicationWillResignActive(_ application: UIApplication) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.info(\"Bacon state change: resigning active\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func applicationDidEnterBackground(_ application: UIApplication) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.info(\"Bacon state change: entered background\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func applicationWillEnterForeground(_ application: UIApplication) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.info(\"Bacon state change: entering foreground\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func applicationDidBecomeActive(_ application: UIApplication) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.info(\"Bacon state change: became active\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func applicationWillTerminate(_ application: UIApplication) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Saves changes in the application\u0027s managed object context before the application terminates."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.info(\"Bacon state change: will terminate\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        self.saveContext()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // MARK: - Core Data stack"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    lazy var persistentContainer: NSPersistentContainer \u003d {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fabian"
        },
        "content": "         The persistent container for the application. This implementation"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fabian"
        },
        "content": "         creates and returns a container, having loaded the store for the"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fabian"
        },
        "content": "         application to it. This property is optional since there are legitimate"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fabian"
        },
        "content": "         error conditions that could cause the creation of the store to fail."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let container \u003d NSPersistentContainer(name: \"bacon\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        container.loadPersistentStores(completionHandler: { (storeDescription, error) in"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            if let error \u003d error as NSError? {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                // Replace this implementation with code to handle the error appropriately."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                // fatalError() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                 "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                /*"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                 Typical reasons for an error here include:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                 * The parent directory does not exist, cannot be created, or disallows writing."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                 * The persistent store is not accessible, due to permissions or data protection when the device is locked."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                 * The device is out of space."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                 * The store could not be migrated to the current model version."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                 Check the error message to determine what the actual problem was."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                 */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                fatalError(\"Unresolved error \\(error), \\(error.userInfo)\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        })"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return container"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // MARK: - Core Data Saving support"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func saveContext () {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let context \u003d persistentContainer.viewContext"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        if context.hasChanges {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                try context.save()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            } catch {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                // Replace this implementation with code to handle the error appropriately."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                // fatalError() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                let nserror \u003d error as NSError"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                fatalError(\"Unresolved error \\(nserror), \\(nserror.userInfo)\")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Fabian"
        },
        "content": "// swiftlint:enable all"
      }
    ],
    "authorContributionMap": {
      "Fabian": 146
    }
  },
  {
    "path": "bacon/commons/CodableCLLocation.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  CodableCLLocation.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 29/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import CoreLocation"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "// CLLocation doesn\u0027t conform to Codable by default."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": "// We write a CodableCLLocation wrapper for Codable conformance."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": "// Acknowledgement: https://gist.github.com/hishma/7be2361888859e94cd0a898bb33c1383"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": "// MARK: CLLocation: Encodable"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// Extends CLLocation to be Encodable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "extension CLLocation: Encodable {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    enum CodingKeys: String, CodingKey {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case latitude"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case longitude"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case altitude"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case horizontalAccuracy"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case verticalAccuracy"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case speed"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case course"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case timestamp"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    public func encode(to encoder: Encoder) throws {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        var container \u003d encoder.container(keyedBy: CodingKeys.self)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try container.encode(coordinate.latitude, forKey: .latitude)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try container.encode(coordinate.longitude, forKey: .longitude)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try container.encode(altitude, forKey: .altitude)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try container.encode(horizontalAccuracy, forKey: .horizontalAccuracy)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try container.encode(verticalAccuracy, forKey: .verticalAccuracy)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try container.encode(speed, forKey: .speed)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try container.encode(course, forKey: .course)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try container.encode(timestamp, forKey: .timestamp)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fabian"
        },
        "content": "// MARK: CLLocation: Equatable"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "extension CLLocation {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // Although CLLocation conforms to Equatable already, it is using NSObject\u0027s \u003d\u003d function."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // As a result, 2 CLLocation instances which have the exact properties are considered to be unequal."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // This method overrides that default implementation to compare instance properties when determining equality."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // See: https://stackoverflow.com/questions/46207883/how-does-cllocation-implement-the-equatable-protocol"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    static func \u003d\u003d (lhs: CLLocation, rhs: CLLocation) -\u003e Bool {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return lhs.coordinate.latitude \u003d\u003d rhs.coordinate.latitude"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            \u0026\u0026 lhs.coordinate.longitude \u003d\u003d rhs.coordinate.longitude"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            \u0026\u0026 lhs.altitude \u003d\u003d rhs.altitude"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            \u0026\u0026 lhs.horizontalAccuracy \u003d\u003d rhs.horizontalAccuracy"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            \u0026\u0026 lhs.verticalAccuracy \u003d\u003d rhs.verticalAccuracy"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            \u0026\u0026 lhs.speed \u003d\u003d rhs.speed"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            \u0026\u0026 lhs.course \u003d\u003d rhs.course"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            \u0026\u0026 lhs.timestamp \u003d\u003d rhs.timestamp"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // Override the !\u003d comparison too to use the negation of \u003d\u003d."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    static func !\u003d (lhs: CLLocation, rhs: CLLocation) -\u003e Bool {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return !(lhs \u003d\u003d rhs)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // We need to override isEqual(), because XCTAssertEqual() calls isEqual on NSObjects."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // See: https://stackoverflow.com/questions/32500821/xctassertequal-not-working-for-equatable-types-in-swift"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // If we don\u0027t, we could get a situation where loc1 \u003d\u003d loc2, but XCTAssertEqual(loc1, loc2) fails."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    override open func isEqual(_ object: Any?) -\u003e Bool {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        guard let other \u003d object as? CLLocation else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            return false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return self \u003d\u003d other"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fabian"
        },
        "content": "// MARK: CodableCLLocation"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// A Codable and Equatable wrapper around CLLocation."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fabian"
        },
        "content": "struct CodableCLLocation: Codable, Equatable, Hashable {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let location: CLLocation"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    init(_ location: CLLocation) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        self.location \u003d location"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    public func encode(to encoder: Encoder) throws {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        var container \u003d encoder.container(keyedBy: CLLocation.CodingKeys.self)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try container.encode(location.coordinate.latitude, forKey: .latitude)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try container.encode(location.coordinate.longitude, forKey: .longitude)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try container.encode(location.altitude, forKey: .altitude)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try container.encode(location.horizontalAccuracy, forKey: .horizontalAccuracy)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try container.encode(location.verticalAccuracy, forKey: .verticalAccuracy)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try container.encode(location.speed, forKey: .speed)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try container.encode(location.course, forKey: .course)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try container.encode(location.timestamp, forKey: .timestamp)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    init(from decoder: Decoder) throws {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let container \u003d try decoder.container(keyedBy: CLLocation.CodingKeys.self)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let latitude \u003d try container.decode(CLLocationDegrees.self, forKey: .latitude)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let longitude \u003d try container.decode(CLLocationDegrees.self, forKey: .longitude)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let altitude \u003d try container.decode(CLLocationDistance.self, forKey: .altitude)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let horizontalAccuracy \u003d try container.decode(CLLocationAccuracy.self, forKey: .horizontalAccuracy)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let verticalAccuracy \u003d try container.decode(CLLocationAccuracy.self, forKey: .verticalAccuracy)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let speed \u003d try container.decode(CLLocationSpeed.self, forKey: .speed)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let course \u003d try container.decode(CLLocationDirection.self, forKey: .course)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let timestamp \u003d try container.decode(Date.self, forKey: .timestamp)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let location \u003d CLLocation(coordinate: CLLocationCoordinate2DMake(latitude, longitude),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                  altitude: altitude,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                  horizontalAccuracy: horizontalAccuracy,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                  verticalAccuracy: verticalAccuracy,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                  course: course,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                  speed: speed,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                  timestamp: timestamp)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        self.init(location)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 1,
      "Fabian": 125
    }
  },
  {
    "path": "bacon/commons/CodableUIImage.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  CodableUIImage.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 2/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import UIKit"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "// MARK: CodableUIImage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// A Codable and Equatable wrapper around UIImage."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "struct CodableUIImage: Codable, Equatable, Hashable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let image: UIImage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private enum CodingKeys: String, CodingKey {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case encodedImageData"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    init(_ image: UIImage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        self.image \u003d image"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    public func encode(to encoder: Encoder) throws {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        var container \u003d encoder.container(keyedBy: CodingKeys.self)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let imageData \u003d image.pngData() // Using pngData() instead of jpegData() allows lossless conversion,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            // which allows CodableUIImage to be testable"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let encodedImageData \u003d imageData?.base64EncodedString()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try container.encode(encodedImageData, forKey: .encodedImageData)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    init(from decoder: Decoder) throws {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let container \u003d try decoder.container(keyedBy: CodingKeys.self)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let encodedImageData \u003d try container.decode(String.self, forKey: .encodedImageData)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        guard let imageData \u003d Data(base64Encoded: encodedImageData) else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            // Maybe we could throw and/or log if this happens"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        guard let reconstructedImage \u003d UIImage(data: imageData) else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            // Maybe we could throw and/or log if this happens"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        image \u003d reconstructedImage"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fabian": 52
    }
  },
  {
    "path": "bacon/commons/Constants.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Config.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 22/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import Contacts"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import UIKit"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "class Constants {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // Global"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let currency \u003d Locale.current.currencySymbol ?? \"$\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let defaultPostalAddress \u003d CNPostalAddress()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let warningTitle \u003d \"🐷WARNING🐷\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let coreFailureMessage \u003d \"Unable to run Bacon!\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let transactionAddFailureMessage \u003d \"Unable to add transaction!\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let transactionLoadFailureMessage \u003d \"Unable to load transactions!\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let transactionEditFailureMessage \u003d \"Unable to edit transaction!\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let transactionDeleteFailureMessage \u003d \"Unable to delete transaction\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let tagAddFailureMessage \u003d \"Unable to add tag!\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let tagEditFailureMessage \u003d \"Uable to edit tag!\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let tagDeleteFailureMessage \u003d \"Unable to delete tag!\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let budgetSetFailureMessage \u003d \"Unable to set budget!\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let budgetStatusFailureMessage \u003d \"Unable to update budget status!\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let analysisFailureMessage \u003d \"Unable to generate analysis!\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // Main Page"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let neutralPig \u003d UIImage(named: \"demo\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let happyPig \u003d UIImage(named: \"happy\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let veryHappyPig \u003d UIImage(named: \"happy2\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let sadPig \u003d UIImage(named: \"unhappy\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let verySadPig \u003d UIImage(named: \"unhappy2\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let mainToAddTransactionEx \u003d \"mainToAddTransactionEx\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let mainToAddTransactionIn \u003d \"mainToAddTransactionIn\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let mainToSetBudget \u003d \"mainToSetBudget\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let mainToTransactions \u003d \"mainToTransactions\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let mainToTags \u003d \"mainToTags\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let mainToAnalysis \u003d \"mainToAnalysis\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // Add Transaction Page"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let defaultTransactionType \u003d TransactionType.expenditure"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let defaultAmount: Decimal \u003d 0"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let defaultAmountString \u003d \"0\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let defaultDescription \u003d \"\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let oneTime \u003d \"One-time\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let addTagMessage \u003d \"Add tags!\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let repeatTimeMessage \u003d \"Please specify number of repeat times for this recurring transaction!\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let addToMainSuccess \u003d \"addToMainSuccess\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let addToTagSelection \u003d \"addToTagSelection\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let addToCalendar \u003d \"addToCalendar\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let editToTransactions \u003d \"editToTransactions\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // Trsansactions Page"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let defaultImage \u003d UIImage(named: \"dummy\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let defaultDescriptionToDisplay \u003d \"No description was provided\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let defaultTagsToDisplay \u003d \"No tags were provided\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let animatoinDuration \u003d [0.26, 0.20, 0.20]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let imageViewTag \u003d 6"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let deleteAlertTitle \u003d \"Deleting recurring transaction\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let deleteAlertMessage \u003d \"This is a recurring transaction, do you want to\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let deleteSingleMessage \u003d \"Delete only this transaction\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let deleteAllMessage \u003d \"Delete all of this recurring transaction\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let transactionsToEdit \u003d \"transactionsToEdit\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // Analysis Page"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let trendNoDataMessage \u003d \"Choose time period to generate monthly trend analysis!\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let trendLegend \u003d \"Monthly Net Income\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let analysisToCalendarFrom \u003d \"analysisToCalendarFrom\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let analysisToCalendarTo \u003d \"analysisToCalendarTo\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let analysisToTagBreakDown \u003d \"analysisToTagBreakDown\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let analysisToLocationSelection \u003d \"analysisToLocationSelection\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // Location Analysis Selection Page"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let locationSelectionToCalendarFrom \u003d \"locationSelectionToCalendarFrom\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let locationSelectionToCalendarTo \u003d \"locationSelectionToCalendarTo\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let locationSelectionToLocationAnalysis \u003d \"locationSelectionToLocationAnalysis\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // Location Analysis Page"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let heatMapZoom \u003d 13"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let heatMapRadius \u003d 50"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // Tag Analysis Page"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let tagNoDataMessage \u003d \"Choose tags and time period to generate breakdown analysis!\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let tagAnalysisToChooseTag \u003d \"tagAnalysisToChooseTag\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let tagAnalysisToCalendarFrom \u003d \"tagAnalysisToCalendarFrom\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let tagAnalysisToCalendarTo \u003d \"tagAnalysisToCalendarTo\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // Tag Selection Page"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let tagNameInputTitle \u003d \"Add new tag\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let tagRenameInputTitle \u003d \"Edit tag\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let tagNameInputMessage \u003d \"Enter tag name\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let InvalidTagNameWarning \u003d \"Please enter a valid name!\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let tagSelectionToAdd \u003d \"tagSelectionToAdd\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let tagSelectionToTagAnalysis \u003d \"tagSelectionToTagAnalysis\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // Set Budget Page"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let defaultBudgetString \u003d \"-1.0\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let defaultBudget: Decimal \u003d -1.0"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let unwindFromBudgetToMain \u003d \"unwindFromBudgetToMain\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // Calendar Page"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let unwindToAdd \u003d \"unwindToAdd\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let calendarToAnalysis \u003d \"calendarToAnalysis\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let calendarToTagAnalysis \u003d \"calendarToTagAnalysis\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let calendarToLocationAnalysisSelection \u003d \"calendarToLocationAnalysisSelection\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // Date"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static func getDateFormatter() -\u003e DateFormatter {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return generateFormatter(format: \"yyyy-MM-dd HH:mm:ss\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static func getDateLessPreciseFormatter() -\u003e DateFormatter {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return generateFormatter(format: \"yyyy-MM-dd HH:mm\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static func getDateOnlyFormatter() -\u003e DateFormatter {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return generateFormatter(format: \"yyyy-MM-dd\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static func getTimeOnlyFormatter() -\u003e DateFormatter {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return generateFormatter(format: \"HH:mm\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static func getYearOnlyFormatter() -\u003e DateFormatter {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return generateFormatter(format: \"yyyy\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static func getMonthStringOnlyFormatter() -\u003e DateFormatter {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return generateFormatter(format: \"MMMM\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static func getYearMonthFormatter() -\u003e DateFormatter {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return generateFormatter(format: \"MMMM yyyy\")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static private func generateFormatter(format: String) -\u003e DateFormatter {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let formatter \u003d DateFormatter()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        formatter.dateFormat \u003d format"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        formatter.timeZone \u003d Calendar.current.timeZone"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        formatter.locale \u003d Calendar.current.locale"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return formatter"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // Only 20 years are allowed because it affects loading speed"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // but can always change this part"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // swiftlint:disable force_unwrapping"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let minDate \u003d getDateFormatter().date(from: \"2009-01-01 00:00:00\")!"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let maxDate \u003d getDateFormatter().date(from: \"2029-01-01 23:59:59\")!"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // swiftlint:enable force_unwrapping"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // Coding Keys for Transaction fields"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let typeKey \u003d \"type\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let tagKey \u003d \"tags\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    static let recurringIdKey \u003d \"recurringId\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let rawDateKey \u003d \"rawDate\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // Database Key for Tag-Transaction Association mapping database"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let transactionKey \u003d \"transactionUID\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let tagValueKey \u003d \"tagInternalValue\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // UID of budget in database"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // There should only be one budget saved in the database"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // Hence saveBudget always uses this UID."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let budgetUID \u003d \"1\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // Prediction related"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let timeSimilarityThreshold \u003d 120"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let locationSimilarityThreshold: Double \u003d 500"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let defaultPredictedAmount: Decimal \u003d 0.0"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let numberOfPredictedTags \u003d 3"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // LocationPrompt"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    static let LocationPromptGooglePlacesApiKey \u003d \"PLACEHOLDER\" // Avoid exposing API key in source code"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    static let LocationPromptRadius \u003d 500 // In meters"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    static let LocationPromptContext \u003d \"food\" // Sets the context for deciding whether to prompt a user"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // Background location notifications"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    static let notificationIdentifier \u003d \"backgroundLocationNotification\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    static let notificationTitle \u003d \"Bacon checking in!\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    static let notificationSubtitle \u003d \"\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    static let notificationBody \u003d \"\"\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        Based on your location, we think you\u0027re about to make a transaction."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        \"\"\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 2,
      "kumuwu": 149,
      "Fabian": 13,
      "Travis Ching Jia Yea": 16
    }
  },
  {
    "path": "bacon/commons/HashableClass.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  HashableClass.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 7/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// A Hashable superclass for classes to conform to the Hashable protocol."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// This allows classes to serve as keys in dictionaries."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// Hash values are derived from `ObjectIdentifier(self)`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// - Note: The `\u003d\u003d` method is overridden to return `\u003d\u003d\u003d` instead."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": "///     If instance properties comparison is required,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": "///     consider implementing an `equals()` method instead."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": "class HashableClass: Equatable, Hashable {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    static func \u003d\u003d (lhs: HashableClass, rhs: HashableClass) -\u003e Bool {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return lhs \u003d\u003d\u003d rhs"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func hash(into hasher: inout Hasher) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        hasher.combine(ObjectIdentifier(self))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fabian": 27
    }
  },
  {
    "path": "bacon/commons/New Group/FileStorageManager.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  FileStorageManager.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 11/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// Handles data storage and retrieval to and from the file system."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "class FileStorageManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Generates and returns the path of a file in a directory as a URL."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: `InvalidArgumentError` if the path cannot be generated."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private func generatePath(directory: FileManager.SearchPathDirectory,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                              domainMask: FileManager.SearchPathDomainMask,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                              fileName: String) throws -\u003e URL {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Get the URL of the directory"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let urls \u003d FileManager.default.urls(for: directory, in: domainMask)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Get the URL for a file in the directory"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        guard let documentDirectory \u003d urls.first else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            throw InvalidArgumentError(message: \"Invalid document directory\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let fileUrl \u003d documentDirectory.appendingPathComponent(fileName)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return fileUrl"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Writes data to the file system encoded as JSON."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: Any errors encountered will be rethrown."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func writeAsJson\u003cT: Encodable\u003e(data: T,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                   as fileName: String,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                   to directory: FileManager.SearchPathDirectory \u003d .documentDirectory,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                   in domainMask: FileManager.SearchPathDomainMask \u003d .userDomainMask) throws {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let fileUrl \u003d try generatePath(directory: directory,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                       domainMask: domainMask,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                       fileName: fileName)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let jsonEncoder \u003d JSONEncoder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let encodedData \u003d try jsonEncoder.encode(data)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try encodedData.write(to: fileUrl)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Reads JSON data from the file system."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: Any errors encountered will be rethrown."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func readFromJson\u003cT: Decodable\u003e(_ type: T.Type,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                    file fileName: String,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                    from directory: FileManager.SearchPathDirectory \u003d .documentDirectory\t,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                    in domainMask: FileManager.SearchPathDomainMask \u003d .userDomainMask) throws -\u003e T {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let fileUrl \u003d try generatePath(directory: directory,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                       domainMask: domainMask,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                       fileName: fileName)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let encodedData \u003d try Data(contentsOf: fileUrl)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Decode from JSON"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let jsonDecoder \u003d JSONDecoder()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let decodedData \u003d try jsonDecoder.decode(type, from: encodedData)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return decodedData"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fabian": 65
    }
  },
  {
    "path": "bacon/commons/New Group/UIViewController+Alert.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  UIViewController+Alert.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 3/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import UIKit"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "extension UIViewController {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    /// Alerts user. Comes with a single action button: \"OK\"."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    /// - Parameters:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    ///     - title: Title of the alert."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    ///     - message: Message (body) of the alert."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    ///     - style: Alert style, defaults to `UIAlertController.Style.alert`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func alertUser(title: String,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                   message: String,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                   style: UIAlertController.Style \u003d .alert) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let alert \u003d UIAlertController(title: title,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                      message: message,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                      preferredStyle: style)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        alert.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.present(alert, animated: true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    /// Prompts user for input. Comes with 2 action buttons: \"OK\" and \"Cancel\"."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    /// - Parameters:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    ///     - title: Title of the alert."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    ///     - message: Message (body) of the alert."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    ///     - style: Alert style, defaults to `UIAlertController.Style.alert`."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    ///     - inputPlaceholder: Input placeholder text, defaults to an empty string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    ///     - inputValidator: Used to validate user input, defaults to a check for an empty string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    ///     - successHandler: Will be called with user\u0027s input if `inputValidator(userInput) \u003d\u003d true`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    ///     - failureHandler: Will be called with user\u0027s input if `inputValidator(userInput) \u003d\u003d false`."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    ///       Defaults to do nothing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func promptUserForInput(title: String,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                            message: String,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                            style: UIAlertController.Style \u003d .alert,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                            inputPlaceholder: String \u003d \"\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                            inputValidator: @escaping (String) -\u003e Bool \u003d { $0 !\u003d \"\" },"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                            successHandler: @escaping (String) -\u003e Void,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                            failureHandler: @escaping (String) -\u003e Void \u003d { _ in return }) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let alert \u003d UIAlertController(title: title,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                      message: message,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                      preferredStyle: style)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        alert.addTextField { $0.placeholder \u003d inputPlaceholder }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        alert.addAction(UIAlertAction(title: \"OK\", style: .default) {_ in"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            guard let userInput \u003d alert.textFields?.first?.text else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            if !inputValidator(userInput) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                failureHandler(userInput)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                return"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            successHandler(userInput)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        })"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        alert.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.present(alert, animated: true)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    /// Handles error and presents message to the user."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    /// - Parameters:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    ///     - error: The error to be handled."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    ///     - customMessage: Message to be presented to the user, if the error is not among the defined ones."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func handleError(error: Error, customMessage: String) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if let initError \u003d error as? InitializationError {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: initError.message)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if let storageError \u003d error as? StorageError {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: storageError.message)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if let argError \u003d error as? InvalidArgumentError {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: argError.message)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if let duplicateTagError \u003d error as? DuplicateTagError {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: duplicateTagError.message)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if let invalidTagError \u003d error as? InvalidTagError {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: invalidTagError.message)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: customMessage)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 89
    }
  },
  {
    "path": "bacon/commons/Observable.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Observable"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 27/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// Observable (Subject) protocol in the Observer-Subject pattern."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// - Note: This protocol only allows conformance by classes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": "///     See: https://benoitpasquier.com/observer-design-pattern-swift/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "protocol Observable: class {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    var observers: [Observer] { get set }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "// Implements default functionality for Observable protocol."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "extension Observable {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Registers an observer to the current observable subject."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func registerObserver(_ observer: Observer) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        observers.append(observer)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Unregisters an observer to the current observable subject."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func unregisterObserver(_ observer: Observer) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        observers \u003d observers.filter { $0 !\u003d\u003d observer }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Notifies all observers of a value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func notifyObservers(_ value: Any) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        for observer in observers {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            observer.notify(value)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fabian": 36
    }
  },
  {
    "path": "bacon/commons/Observer.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Observer.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 27/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// Observer protocol in the Observer-Subject pattern."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// - Note: This protocol only allows conformance by classes,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// as `unregisterObserver()` in Observable makes use of identity comparison."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "protocol Observer: class {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Receives notification of a value published by the observed subject."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Since `value` is typed as `Any`, the observer is responsible for casting `value` to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// the correct type of whatever it is observing."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func notify(_ value: Any)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fabian": 19
    }
  },
  {
    "path": "bacon/commons/errors/InitializationError.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  InitializationError.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 19/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "struct InitializationError: Error {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let message: String"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fabian": 13
    }
  },
  {
    "path": "bacon/commons/errors/InvalidArgumentError.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  InvalidArgumentError.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Created by Travis Ching Jia Yea on 27/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "struct InvalidArgumentError: Error {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    let message: String"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Travis Ching Jia Yea": 13
    }
  },
  {
    "path": "bacon/commons/errors/StorageError.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  StorageError.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Created by Travis Ching Jia Yea on 22/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "struct StorageError: Error {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    let message: String"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Travis Ching Jia Yea": 13
    }
  },
  {
    "path": "bacon/commons/extensions/Date+getStartOrEndOfMonth.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Date+getStartOrEndOfMonth.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 20/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "extension Date {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func getStartOfCurrentMonth() throws -\u003e Date {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let date \u003d Calendar.current.date(from:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            Calendar.current.dateComponents([.year, .month],"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                            from: Calendar.current.startOfDay(for: self))) else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                                throw InitializationError(message:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                                    \"Should be able to retrieve the start of month.\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func getEndOfCurrentMonth() throws -\u003e Date {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let date \u003d Calendar.current.date(byAdding: DateComponents(month: 1,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                                                        second: -1),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                               to: try self.getStartOfCurrentMonth()) else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                                throw InitializationError(message:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                                    \"Should be able to retrieve the end of month.\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 31
    }
  },
  {
    "path": "bacon/commons/extensions/Decimal+toFormattedString.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Decimal+toFormattedString.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 3/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "extension Decimal {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var toFormattedString: String? {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let formatter \u003d NumberFormatter()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        formatter.generatesDecimalNumbers \u003d true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        formatter.minimumFractionDigits \u003d 2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        formatter.maximumFractionDigits \u003d 2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        formatter.minimumIntegerDigits \u003d 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return formatter.string(from: self as NSDecimalNumber)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 20
    }
  },
  {
    "path": "bacon/commons/extensions/String+initFromCLPlacemark.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  String+initFromCLPlacemark.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 2/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import Contacts"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import CoreLocation"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "extension String {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Formats a placemark into a postal address."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    init?(_ placeMark: CLPlacemark) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.init(CNPostalAddressFormatter().string(from: placeMark.postalAddress ?? Constants.defaultPostalAddress))"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 15,
      "Fabian": 3
    }
  },
  {
    "path": "bacon/controller/AddTransactionViewController.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  AddTransactionViewController.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 21/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import UIKit"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import CoreLocation"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "// swiftlint:disable file_length"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "// swiftlint:disable type_body_length"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "class AddTransactionViewController: UIViewController {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    let locationManager \u003d CLLocationManager()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    let geoCoder \u003d CLGeocoder()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var core: CoreLogicInterface?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var isInEditMode \u003d false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // Relevant if in Add Mode"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var currentMonthTransactions \u003d [Transaction]()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var prediction: Prediction?"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // Relevant if in Edit Mode"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var transactionToEdit: Transaction?"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var transactionType \u003d Constants.defaultTransactionType"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var dateTime \u003d Date()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var tags \u003d Set\u003cTag\u003e()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private var photo: UIImage?"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private var location: CLLocation?"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private var frequencyNature: TransactionFrequencyNature \u003d .oneTime"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private var frequencyInterval: TransactionFrequencyInterval?"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var amountField: UITextField!"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var typeLabel: UILabel!"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var tagLabel: UILabel!"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var descriptionField: UITextField!"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var locationLabel: UILabel!"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var timeLabel: UILabel!"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var imagePreview: PreviewImageView!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var repeatStack: UIStackView!"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var frequencyLabel: UILabel!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var repeatTimeField: UITextField!"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override func viewDidLoad() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        super.viewDidLoad()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Request permission for location services"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.locationManager.requestAlwaysAuthorization()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.locationManager.requestWhenInUseAuthorization()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if isInEditMode {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            setUpEditMode()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            setUpAddMode()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        refreshAllViews()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override func viewDidAppear(_ animated: Bool) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        refreshAllViews()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func setUpEditMode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let transactionToEdit \u003d transactionToEdit else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            alertUser(title: Constants.warningTitle, message: Constants.transactionEditFailureMessage)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            performSegue(withIdentifier: Constants.editToTransactions, sender: nil)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Fill all fields according to the transaction sent for editing"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        transactionType \u003d transactionToEdit.type"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        amountField.text \u003d transactionToEdit.amount.toFormattedString"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        tags \u003d transactionToEdit.tags"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        dateTime \u003d transactionToEdit.date"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        location \u003d transactionToEdit.location?.location"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        photo \u003d transactionToEdit.image?.image"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        descriptionField.text \u003d transactionToEdit.description"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        frequencyNature \u003d transactionToEdit.frequency.nature"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        frequencyInterval \u003d transactionToEdit.frequency.interval"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if let repeatTime \u003d transactionToEdit.frequency.repeats {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            repeatTimeField.text \u003d String(repeatTime)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Not all fields are editable, depending on whether it is one-time or recurring"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        checkEditableFields()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                AddTransactionViewController finished set-up in Edit Mode."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func checkEditableFields() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if frequencyNature \u003d\u003d .oneTime {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            // Changing from one-time transaction to recurring is disallowed"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            frequencyLabel.alpha \u003d 0"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            // Changing the time of a recurring transaction is also disallowed"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            timeLabel.alpha \u003d 0"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func setUpAddMode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if CLLocationManager.locationServicesEnabled() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            locationManager.delegate \u003d self"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            locationManager.desiredAccuracy \u003d kCLLocationAccuracyNearestTenMeters"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            locationManager.startUpdatingLocation()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            getCurrentLocation()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Get prediction and auto-fill in the relevant fields"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        getPrediction()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                AddTransactionViewController finished set-up in Add Mode."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func getPrediction() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let core \u003d core else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: Constants.coreFailureMessage)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let location \u003d location else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            // Location functionality is disabled"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        prediction \u003d core.getPrediction(dateTime, CodableCLLocation(location), currentMonthTransactions)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let prediction \u003d prediction else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Populate the fields with the prediction result"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if prediction.amountPredicted !\u003d 0 {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            amountField.text \u003d prediction.amountPredicted.toFormattedString"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        tags \u003d prediction.tagsPredicted"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBAction func toggleFrequency(_ sender: UITapGestureRecognizer) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if frequencyNature \u003d\u003d .oneTime {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            frequencyNature \u003d .recurring"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            frequencyInterval \u003d .daily"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            guard let interval \u003d frequencyInterval else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                return"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            switch interval {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            case .daily:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                frequencyInterval \u003d .weekly"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            case .monthly:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                frequencyInterval \u003d .yearly"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            case .weekly:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                frequencyInterval \u003d .monthly"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            case .yearly:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                if isInEditMode {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                    frequencyInterval \u003d .daily"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                    frequencyInterval \u003d nil"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                    frequencyNature \u003d .oneTime"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        displayFrequency()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBAction func typeFieldPressed(_ sender: UITapGestureRecognizer) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if transactionType \u003d\u003d .expenditure {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            setIncomeType()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            setExpenditureType()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBAction func photoButtonPressed(_ sender: UIButton) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let camera \u003d UIImagePickerController()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        camera.sourceType \u003d .camera"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        camera.allowsEditing \u003d true"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        camera.delegate \u003d self"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        present(camera, animated: true)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBAction func addButtonPressed(_ sender: UIButton) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let date \u003d captureDate()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let type \u003d captureType()"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let frequency \u003d try captureFrequency()"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let tags \u003d captureTags()"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let amount \u003d captureAmount()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let description \u003d captureDescription()"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let image \u003d capturePhoto()"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let location \u003d captureLocation()"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            log.info(\"\"\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                AddTransactionViewController.captureInputs() with inputs captured:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                date\u003d\\(date), type\u003d\\(type), frequency\u003d\\(frequency), tags\u003d\\(tags),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                amount\u003d\\(amount), description\u003d\\(description), image\u003d\\(String(describing: image)),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                location\u003d\\(String(describing: location)))"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            if isInEditMode {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                performEdit(date: date, type: type, frequency: frequency, tags: tags, amount: amount,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                            description: description, image: image, location: location)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                performAdd(date: date, type: type, frequency: frequency, tags: tags, amount: amount,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                           description: description, image: image, location: location)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.handleError(error: error, customMessage: Constants.transactionAddFailureMessage)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func performEdit(date: Date, type: TransactionType, frequency: TransactionFrequency,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                             tags: Set\u003cTag\u003e, amount: Decimal, description: String,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                             image: CodableUIImage?, location: CodableCLLocation?) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            try transactionToEdit?.edit(date: date, type: type, frequency: frequency,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                        tags: tags, amount: amount, description: description,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                        image: image, location: location, successCallback: {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                self.performSegue(withIdentifier: Constants.editToTransactions, sender: nil)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }, failureCallback: { errorMessage in"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                self.alertUser(title: Constants.warningTitle, message: errorMessage)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            })"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.handleError(error: error, customMessage: Constants.transactionEditFailureMessage)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func performAdd(date: Date, type: TransactionType, frequency: TransactionFrequency,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                            tags: Set\u003cTag\u003e, amount: Decimal, description: String,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                            image: CodableUIImage?, location: CodableCLLocation?) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let coreLogic \u003d core else {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: Constants.coreFailureMessage)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            try coreLogic.recordTransaction(date: date, type: type, frequency: frequency,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                            tags: tags, amount: amount, description: description,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                            image: image, location: location, prediction: prediction)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            performSegue(withIdentifier: Constants.addToMainSuccess, sender: nil)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.handleError(error: error, customMessage: Constants.transactionAddFailureMessage)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func captureDate() -\u003e Date {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return dateTime"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func captureType() -\u003e TransactionType {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return transactionType"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func captureFrequency() throws -\u003e TransactionFrequency {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if frequencyNature \u003d\u003d .oneTime {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return try TransactionFrequency(nature: .oneTime)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let repeatTime \u003d repeatTimeField.text else {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            throw InvalidArgumentError(message: Constants.repeatTimeMessage)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return try TransactionFrequency(nature: .recurring, interval: frequencyInterval, repeats: Int(repeatTime))"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func captureTags() -\u003e Set\u003cTag\u003e {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return tags"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func captureAmount() -\u003e Decimal {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let amountString \u003d amountField.text"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let amountDecimal \u003d Decimal(string: amountString ?? Constants.defaultAmountString)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return amountDecimal ?? Constants.defaultAmount"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func captureDescription() -\u003e String {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let userInput \u003d descriptionField.text"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return userInput ?? Constants.defaultDescription"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func capturePhoto() -\u003e CodableUIImage? {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let image \u003d photo else {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return nil"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return CodableUIImage(image)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func captureLocation() -\u003e CodableCLLocation? {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let location \u003d location else {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return nil"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return CodableCLLocation(location)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func getCurrentLocation() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let currentLocation \u003d locationManager.location else {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        location \u003d currentLocation"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        displayLocation()"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func refreshAllViews() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        displayTags()"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        displayDateTime()"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        displayLocation()"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        displayType()"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        displayPic()"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        displayFrequency()"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func displayPic() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        imagePreview.image \u003d photo"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func displayLocation() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let location \u003d location else {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            // Location functionality is disabled"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        geoCoder.reverseGeocodeLocation(location) { placemarks, _ in"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            if let place \u003d placemarks?.first {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                self.locationLabel.text \u003d String(place)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func displayDateTime() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        timeLabel.text \u003d Constants.getDateLessPreciseFormatter().string(from: dateTime)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func displayTags() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var tagString \u003d \"\""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        for tag in tags {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            tagString +\u003d tag.toString() + \"  \""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if tagString \u003d\u003d \"\" {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            tagString \u003d Constants.addTagMessage"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        tagLabel.text \u003d tagString"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func displayType() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if transactionType \u003d\u003d .expenditure {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            setExpenditureType()"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            setIncomeType()"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func displayFrequency() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if frequencyNature \u003d\u003d .oneTime {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            frequencyLabel.text \u003d Constants.oneTime"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            repeatStack.alpha \u003d 0"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        repeatStack.alpha \u003d 1"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let interval \u003d frequencyInterval else {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        frequencyLabel.text \u003d interval.rawValue"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func setExpenditureType() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        transactionType \u003d .expenditure"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        typeLabel.text \u003d \"- \\(Constants.currency)\""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        typeLabel.textColor \u003d UIColor.red"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        tagLabel.textColor \u003d UIColor.red"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func setIncomeType() {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        transactionType \u003d .income"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        typeLabel.text \u003d \"+ \\(Constants.currency)\""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        typeLabel.textColor \u003d UIColor.green"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        tagLabel.textColor \u003d UIColor.green"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// MARK: AddTransactionViewController: UINavigationControllerDelegate, UIImagePickerControllerDelegate"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "extension AddTransactionViewController: UINavigationControllerDelegate, UIImagePickerControllerDelegate {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func imagePickerController(_ picker: UIImagePickerController,"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                               didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey: Any]) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        picker.dismiss(animated: true)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let image \u003d info[.editedImage] as? UIImage else {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            log.info(\"\"\""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                AddTransactionViewController.didFinishPickingMediaWithInfo():"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                No image found!"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        photo \u003d image"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        displayPic()"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// MARK: AddTransactionViewController: CLLocationManagerDelegate"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "extension AddTransactionViewController: CLLocationManagerDelegate {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// MARK: AddTransactionViewController: segues"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "extension AddTransactionViewController {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if segue.identifier \u003d\u003d Constants.addToTagSelection {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            guard let tagController \u003d segue.destination as? TagSelectionViewController else {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                return"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            tagController.core \u003d core"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            tagController.canEdit \u003d false"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            tagController.shouldUnwindToAdd \u003d true"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if segue.identifier \u003d\u003d Constants.addToCalendar {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            guard let calendarController \u003d segue.destination as? DateTimeSelectionViewController else {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                return"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.referenceDate \u003d dateTime"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.shouldUnwindToAdd \u003d true"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBAction func unwindToThisViewController(segue: UIStoryboardSegue) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if let calendarViewController \u003d segue.source as? DateTimeSelectionViewController {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            dateTime \u003d calendarViewController.selectedDate"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if let tagSelectionViewController \u003d segue.source as? TagSelectionViewController {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            tags \u003d tagSelectionViewController.selectedTags"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "// swiftlint:enable type_body_length"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "// swiftlint:enable file_length"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 4,
      "kumuwu": 427
    }
  },
  {
    "path": "bacon/controller/AnalysisViewController.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  AnalysisViewController.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 19/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import UIKit"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import Charts"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "class AnalysisViewController: UIViewController {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var core: CoreLogicInterface?"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var months \u003d [(Int, Int)]()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var amounts \u003d [Double]()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var fromDate \u003d Date()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var toDate \u003d Date()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var lineChart: LineChartView!"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var toLabel: UILabel!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var fromLabel: UILabel!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override func viewDidLoad() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        super.viewDidLoad()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Set up display for no data case"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        lineChart.noDataText \u003d Constants.trendNoDataMessage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        lineChart.noDataTextColor \u003d UIColor.black.withAlphaComponent(0.7)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if let font \u003d UIFont(name: \"Futura\", size: 20) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            lineChart.noDataFont \u003d font"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Set up labels to display time"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        displayTime()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func update() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        displayTime()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        getBreakdown()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        setChart()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func displayTime() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let formatter \u003d Constants.getDateOnlyFormatter()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        fromLabel.text \u003d \"From: \" + formatter.string(from: fromDate)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        toLabel.text \u003d \"To: \" + formatter.string(from: toDate)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func getBreakdown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let core \u003d core else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: Constants.coreFailureMessage)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let results \u003d try core.getBreakdownByTime(from: fromDate, to: toDate)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            months \u003d results.0"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            amounts \u003d results.1"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.handleError(error: error, customMessage: Constants.analysisFailureMessage)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func setChart() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var chartDataEntries \u003d [ChartDataEntry]()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        for index in 0..\u003cmonths.count {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            chartDataEntries.append(ChartDataEntry(x: Double(index), y: amounts[index]))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let line \u003d LineChartDataSet(values: chartDataEntries, label: Constants.trendLegend)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let data \u003d LineChartData(dataSet: line)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        lineChart.data \u003d data"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        lineChart.animate(xAxisDuration: 1.0, yAxisDuration: 1.0)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if let font \u003d UIFont(name: \"Futura\", size: 17) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            lineChart.legend.font \u003d font"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        lineChart.notifyDataSetChanged()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// MARK: AnalysisViewController: segues"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "extension AnalysisViewController {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if segue.identifier \u003d\u003d Constants.analysisToTagBreakDown {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            guard let tagAnalysisController \u003d segue.destination as? TagAnalysisViewController else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                return"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            tagAnalysisController.core \u003d core"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if segue.identifier \u003d\u003d Constants.analysisToLocationSelection {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            guard let locationSelectionController \u003d segue.destination as?"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                LocationAnalysisSelectionViewController else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                return"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            locationSelectionController.core \u003d core"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if segue.identifier \u003d\u003d Constants.analysisToCalendarFrom {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            guard let calendarController \u003d segue.destination as? DateTimeSelectionViewController else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                return"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.shouldUnwindToAdd \u003d false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.unwindDestination \u003d self"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.referenceDate \u003d fromDate"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.isSelectingFromDate \u003d true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if segue.identifier \u003d\u003d Constants.analysisToCalendarTo {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            guard let calendarController \u003d segue.destination as? DateTimeSelectionViewController else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                return"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.shouldUnwindToAdd \u003d false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.unwindDestination \u003d self"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.referenceDate \u003d toDate"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.isSelectingFromDate \u003d false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBAction func unwindToAnalysis(segue: UIStoryboardSegue) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if let calendarController \u003d segue.source as? DateTimeSelectionViewController {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            if calendarController.isSelectingFromDate {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                fromDate \u003d calendarController.selectedDate"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                toDate \u003d calendarController.selectedDate"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            update()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 126
    }
  },
  {
    "path": "bacon/controller/DateTimeSelectionViewController.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  DateTimeSelectionViewController.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 9/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import UIKit"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import JTAppleCalendar"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "class DateTimeSelectionViewController: UIViewController {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private let formatter \u003d Constants.getDateOnlyFormatter()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var referenceDate \u003d Date() // The default date to display when entering this page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var selectedDate \u003d Date()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var shouldUnwindToAdd \u003d true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var unwindDestination: UIViewController?"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var isSelectingFromDate \u003d true // Remembers whether the current selection is for a \"from\" date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                   // Important when unwinding"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var timePickerBackground: UIView!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var timePicker: UIDatePicker!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var calendarView: JTAppleCalendarView!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var monthLabel: UILabel!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var yaerLabel: UILabel!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override func viewDidLoad() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        super.viewDidLoad()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Decide whether time picker is needed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if !shouldUnwindToAdd {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            timePickerBackground.alpha \u003d 0"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            timePicker.alpha \u003d 0"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Set up the calendar to show the reference date (default to current date)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        calendarView.scrollToDate(referenceDate, animateScroll: false)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        calendarView.selectDates([referenceDate])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Set up year and month labels for the first loaded calendar page"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        calendarView.visibleDates { visibleDates in"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.setUpYearAndMonthLabels(from: visibleDates)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBAction func confirmButtonPressed(_ sender: UIButton) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let date \u003d captureDateFromCalender()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard shouldUnwindToAdd else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            selectedDate \u003d date"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            if unwindDestination is TagAnalysisViewController {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                performSegue(withIdentifier: Constants.calendarToTagAnalysis, sender: nil)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            } else if unwindDestination is AnalysisViewController {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                performSegue(withIdentifier: Constants.calendarToAnalysis, sender: nil)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                performSegue(withIdentifier: Constants.calendarToLocationAnalysisSelection, sender: nil)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Time picker is only relevant if it is unwinding to the AddTransactionViewController"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let time \u003d captureTimeFromPicker()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        selectedDate \u003d combineDateTime(date: date, time: time)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        performSegue(withIdentifier: Constants.unwindToAdd, sender: nil)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func captureDateFromCalender() -\u003e Date {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return calendarView.selectedDates.first ?? referenceDate"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func captureTimeFromPicker() -\u003e Date {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return timePicker.date"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func combineDateTime(date: Date, time: Date) -\u003e Date {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let calendar \u003d Calendar.current"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let year \u003d calendar.component(.year, from: date)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let month \u003d calendar.component(.month, from: date)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let day \u003d calendar.component(.day, from: date)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let hour \u003d calendar.component(.hour, from: time)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let minute \u003d calendar.component(.minute, from: time)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let components \u003d DateComponents(year: year, month: month, day: day,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                        hour: hour, minute: minute, second: 0)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return calendar.date(from: components) ?? date"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func setUpYearAndMonthLabels(from visibleDates: DateSegmentInfo) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let firstDate \u003d visibleDates.monthDates.first?.date ?? referenceDate"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        yaerLabel.text \u003d Constants.getYearOnlyFormatter().string(from: firstDate)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        monthLabel.text \u003d Constants.getMonthStringOnlyFormatter().string(from: firstDate)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func handleCellTextColor(view: JTAppleCell?, cellState: CellState) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let cell \u003d view as? CalendarCell else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if cellState.dateBelongsTo \u003d\u003d .thisMonth {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            cell.dateLabel.textColor \u003d UIColor.white"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            cell.dateLabel.textColor \u003d UIColor.white.withAlphaComponent(0.4)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func handleCellSelection(view: JTAppleCell?, cellState: CellState) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let cell \u003d view as? CalendarCell else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if cellState.isSelected {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            cell.selectedView.isHidden \u003d false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            cell.selectedView.isHidden \u003d true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// MARK: DateTimeSelectionViewController: JTAppleCalendarViewDelegate, JTAppleCalendarViewDataSource"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "extension DateTimeSelectionViewController: JTAppleCalendarViewDelegate, JTAppleCalendarViewDataSource {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func configureCalendar(_ calendar: JTAppleCalendarView) -\u003e ConfigurationParameters {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let start \u003d Constants.minDate"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let end \u003d Constants.maxDate"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let parameters \u003d ConfigurationParameters(startDate: start, endDate: end)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return parameters"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func calendar(_ calendar: JTAppleCalendarView, willDisplay cell: JTAppleCell,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                  forItemAt date: Date, cellState: CellState, indexPath: IndexPath) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let calendarCell \u003d cell as? CalendarCell else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        sharedFunctionToConfigureCell(calendarCell: calendarCell, cellState: cellState, date: date)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func calendar(_ calendar: JTAppleCalendarView, cellForItemAt date: Date,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                  cellState: CellState, indexPath: IndexPath) -\u003e JTAppleCell {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let rawCell \u003d calendar.dequeueReusableJTAppleCell(withReuseIdentifier: \"CalendarCell\", for: indexPath)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let cell \u003d rawCell as? CalendarCell else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return rawCell"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        sharedFunctionToConfigureCell(calendarCell: cell, cellState: cellState, date: date)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return cell"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func sharedFunctionToConfigureCell(calendarCell: CalendarCell, cellState: CellState, date: Date) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        calendarCell.dateLabel.text \u003d cellState.text"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Reset cell to avoid reusing problem"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        handleCellSelection(view: calendarCell, cellState: cellState)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        handleCellTextColor(view: calendarCell, cellState: cellState)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func calendar(_ calendar: JTAppleCalendarView, didSelectDate date: Date, cell: JTAppleCell?, cellState: CellState) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        handleCellSelection(view: cell, cellState: cellState)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func calendar(_ calendar: JTAppleCalendarView, didDeselectDate date: Date,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                  cell: JTAppleCell?, cellState: CellState) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        handleCellSelection(view: cell, cellState: cellState)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func calendar(_ calendar: JTAppleCalendarView, didScrollToDateSegmentWith visibleDates: DateSegmentInfo) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        setUpYearAndMonthLabels(from: visibleDates)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 161
    }
  },
  {
    "path": "bacon/controller/LocationAnalysisSelectionViewController.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  LocationAnalysisSelectionViewController.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 21/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import UIKit"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "class LocationAnalysisSelectionViewController: UIViewController {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var core: CoreLogicInterface?"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var fromDate \u003d Date()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var toDate \u003d Date()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var locations \u003d [CLLocation]()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var toLabel: UILabel!"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var fromLabel: UILabel!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override func viewDidLoad() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        super.viewDidLoad()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        displayTime()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func displayTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let formatter \u003d Constants.getDateOnlyFormatter()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        fromLabel.text \u003d \"From: \" + formatter.string(from: fromDate)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        toLabel.text \u003d \"To: \" + formatter.string(from: toDate)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBAction func confirmButtonPressed(_ sender: Any) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let core \u003d core else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: Constants.coreFailureMessage)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            locations \u003d try core.getBreakdownByLocation(from: fromDate, to: toDate)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            performSegue(withIdentifier: Constants.locationSelectionToLocationAnalysis, sender: nil)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.handleError(error: error, customMessage: Constants.analysisFailureMessage)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// MARK: LocationAnalysisSelectionViewController: segues"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "extension LocationAnalysisSelectionViewController {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if segue.identifier \u003d\u003d Constants.locationSelectionToCalendarFrom {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            guard let calendarController \u003d segue.destination as? DateTimeSelectionViewController else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                return"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.shouldUnwindToAdd \u003d false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.unwindDestination \u003d self"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.referenceDate \u003d fromDate"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.isSelectingFromDate \u003d true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if segue.identifier \u003d\u003d Constants.locationSelectionToCalendarTo {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            guard let calendarController \u003d segue.destination as? DateTimeSelectionViewController else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                return"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.shouldUnwindToAdd \u003d false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.unwindDestination \u003d self"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.referenceDate \u003d toDate"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.isSelectingFromDate \u003d false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if segue.identifier \u003d\u003d Constants.locationSelectionToLocationAnalysis {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            guard let locationAnalysisController \u003d segue.destination as? LocationAnalysisViewController else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                return"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            locationAnalysisController.locations \u003d locations"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBAction func unwindToLocationAnalysisSelection(segue: UIStoryboardSegue) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if let calendarController \u003d segue.source as? DateTimeSelectionViewController {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            if calendarController.isSelectingFromDate {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                fromDate \u003d calendarController.selectedDate"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                toDate \u003d calendarController.selectedDate"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            displayTime()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 85
    }
  },
  {
    "path": "bacon/controller/LocationAnalysisViewController.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  LocationAnalysisViewController.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 19/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import CoreLocation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import UIKit"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "class LocationAnalysisViewController: UIViewController {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private var heatmapLayer: GMUHeatmapTileLayer \u003d GMUHeatmapTileLayer()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private var mapView \u003d GMSMapView()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    let locationManager \u003d CLLocationManager()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var locations \u003d [CLLocation]()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override func viewDidLoad() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        super.viewDidLoad()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Request permission for location services"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.locationManager.requestAlwaysAuthorization()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.locationManager.requestWhenInUseAuthorization()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        heatmapLayer.map \u003d mapView"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    override func loadView() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Create a GMSCameraPosition that tells the map to display the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // user\u0027s current location at zoom level 10."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let currentLocation \u003d locationManager.location else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let camera \u003d GMSCameraPosition.camera(withLatitude: currentLocation.coordinate.latitude,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                              longitude: currentLocation.coordinate.longitude,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                              zoom: Float(Constants.heatMapZoom))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        mapView \u003d GMSMapView.map(withFrame: CGRect.zero, camera: camera)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Configure heatmap"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        heatmapLayer.radius \u003d UInt(Constants.heatMapRadius)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        heatmapLayer.map \u003d mapView"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        addHeatmap()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        view \u003d mapView"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func addHeatmap() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        var coords \u003d [GMUWeightedLatLng]()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        for location in locations {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            coords.append(GMUWeightedLatLng(coordinate: location.coordinate,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                            intensity: 1.0))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        heatmapLayer.weightedData \u003d coords"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// MARK: LocationAnalysisViewController: CLLocationManagerDelegate"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "extension LocationAnalysisViewController: CLLocationManagerDelegate {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 35,
      "Fabian": 25
    }
  },
  {
    "path": "bacon/controller/MainPageViewController.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  MainPageViewController.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 19/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import CoreLocation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import UIKit"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "class MainPageViewController: UIViewController {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var core: CoreLogicInterface?"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var currentMonthTransactions \u003d [Transaction]()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var currentMonthYear \u003d (0, 0)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var budgetLabel: UILabel!"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var coinView: UIImageView!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var pigView: UIImageView!"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    override func viewDidLoad() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        super.viewDidLoad()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            try core \u003d CoreLogic()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.handleError(error: error, customMessage: Constants.coreFailureMessage)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override func viewDidAppear(_ animated: Bool) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        loadCurrentMonthTransactions()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        updateBudgetStatus()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        animateFloatingCoin()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func loadCurrentMonthTransactions() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let core \u003d core else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: Constants.coreFailureMessage)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let calendar \u003d Calendar.current"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let currentDate \u003d Date()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let currentMonth \u003d calendar.component(.month, from: currentDate)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let currentYear \u003d calendar.component(.year, from: currentDate)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        currentMonthYear \u003d (currentMonth, currentYear)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            try currentMonthTransactions \u003d core.loadTransactions(month: currentMonthYear.0, year: currentMonthYear.1)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.handleError(error: error, customMessage: Constants.transactionLoadFailureMessage)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBAction func budgetButtonPressed(_ sender: Any) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        performSegue(withIdentifier: Constants.mainToSetBudget, sender: nil)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBAction func plusButtonPressed(_ sender: UIButton) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        performSegue(withIdentifier: Constants.mainToAddTransactionEx, sender: nil)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBAction func coinSwipedUp(_ sender: UISwipeGestureRecognizer) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        performSegue(withIdentifier: Constants.mainToAddTransactionEx, sender: nil)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBAction func coinSwipedDown(_ sender: UISwipeGestureRecognizer) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        performSegue(withIdentifier: Constants.mainToAddTransactionIn, sender: nil)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func updateBudgetStatus() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let core \u003d core else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: Constants.coreFailureMessage)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let spendingStatus \u003d try core.getSpendingStatus(currentMonthTransactions)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            displayBudgetStatus(status: spendingStatus)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            // Budget has not been set"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            performSegue(withIdentifier: Constants.mainToSetBudget, sender: nil)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func displayBudgetStatus(status: SpendingStatus) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let currentSpending \u003d status.currentSpending.toFormattedString"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let totalBudget \u003d status.totalBudget.toFormattedString"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let percentage \u003d status.percentage"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let spending \u003d currentSpending, let budget \u003d totalBudget else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: Constants.budgetStatusFailureMessage)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            budgetLabel.alpha \u003d 0"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        budgetLabel.text \u003d Constants.currency + spending + \" / \" + Constants.currency + budget"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Change image of pig and text color to reflect different states of current spending against budget"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // to give an intuitive overview for the user"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if percentage \u003c 1 {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            budgetLabel.textColor \u003d UIColor.green.withAlphaComponent(0.5)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            pigView.image \u003d Constants.happyPig"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            if percentage \u003c 0.5 {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                pigView.image \u003d Constants.veryHappyPig"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } else if percentage \u003d\u003d 1 {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            budgetLabel.textColor \u003d UIColor.brown.withAlphaComponent(0.5)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            pigView.image \u003d Constants.neutralPig"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            budgetLabel.textColor \u003d UIColor.red.withAlphaComponent(0.5)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            pigView.image \u003d Constants.sadPig"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            if percentage \u003e 1.5 {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                pigView.image \u003d Constants.verySadPig"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// MARK: MainPageViewController: animations"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "extension MainPageViewController {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func animateFloatingCoin() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let currentFrame \u003d coinView.frame"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        coinView.frame \u003d CGRect(x: currentFrame.minX, y: 130.0,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                width: currentFrame.width, height: currentFrame.height)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        UIView.animate(withDuration: 0.7, delay: 0,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                       options: [.repeat, .autoreverse, .allowUserInteraction], animations: {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.coinView.frame \u003d CGRect(x: currentFrame.minX, y: 200.0,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                         width: currentFrame.width, height: currentFrame.height)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }, completion: nil)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// MARK: MainPageViewController: segues"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "extension MainPageViewController {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // swiftlint:disable cyclomatic_complexity"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if segue.identifier \u003d\u003d Constants.mainToAddTransactionEx {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            guard let addController \u003d segue.destination as? AddTransactionViewController else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                return"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            addController.transactionType \u003d .expenditure"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            addController.core \u003d core"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            addController.currentMonthTransactions \u003d currentMonthTransactions"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            addController.isInEditMode \u003d false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if segue.identifier \u003d\u003d Constants.mainToAddTransactionIn {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            guard let addController \u003d segue.destination as? AddTransactionViewController else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                return"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            addController.transactionType \u003d .income"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            addController.core \u003d core"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            addController.currentMonthTransactions \u003d currentMonthTransactions"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            addController.isInEditMode \u003d false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if segue.identifier \u003d\u003d Constants.mainToTransactions {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            guard let transactionsController \u003d segue.destination as? TransactionsViewController else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                return"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            transactionsController.core \u003d core"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            transactionsController.currentMonthTransactions \u003d currentMonthTransactions"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            transactionsController.monthCounter \u003d currentMonthYear"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if segue.identifier \u003d\u003d Constants.mainToTags {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            guard let tagSelectionController \u003d segue.destination as? TagSelectionViewController else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                return"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            tagSelectionController.core \u003d core"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            tagSelectionController.canEdit \u003d true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if segue.identifier \u003d\u003d Constants.mainToSetBudget {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            guard let setBudgetController \u003d segue.destination as? SetBuddgetViewController else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                return"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            setBudgetController.core \u003d core"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if segue.identifier \u003d\u003d Constants.mainToAnalysis {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            guard let analysisController \u003d segue.destination as? AnalysisViewController else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                return"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            analysisController.core \u003d core"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // swiftlint:enable cyclomatic_complexity"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBAction func unwindToMain(segue: UIStoryboardSegue) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 2,
      "kumuwu": 168,
      "Fabian": 17
    }
  },
  {
    "path": "bacon/controller/SetBuddgetViewController.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  SetBuddgetViewController.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 13/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import UIKit"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "class SetBuddgetViewController: UIViewController {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var budgetField: UITextField!"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var core: CoreLogicInterface?"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override func viewDidLoad() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        super.viewDidLoad()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Do any additional setup after loading the view."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBAction func confirmButtonPressed(_ sender: UIButton) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let core \u003d core else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: Constants.coreFailureMessage)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let amountString \u003d budgetField.text"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let amountDecimal \u003d Decimal(string: amountString ?? Constants.defaultBudgetString)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let budgetAmount \u003d amountDecimal ?? Constants.defaultBudget"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Budget period follows the natural month"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Hence startDate and endDate represent the start and end of the current month respectively"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let startDate \u003d try Date().getStartOfCurrentMonth()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let endDate \u003d try Date().getEndOfCurrentMonth()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            let budget \u003d try Budget(from: startDate, to: endDate, amount: budgetAmount)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            try core.saveBudget(budget)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            performSegue(withIdentifier: Constants.unwindFromBudgetToMain, sender: nil)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.handleError(error: error, customMessage: Constants.budgetSetFailureMessage)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 1,
      "kumuwu": 44
    }
  },
  {
    "path": "bacon/controller/TagAnalysisViewController.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  TagAnalysisViewController.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 19/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import UIKit"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import Charts"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "class TagAnalysisViewController: UIViewController {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var toLabel: UILabel!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var fromLabel: UILabel!"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var barChart: BarChartView!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var core: CoreLogicInterface?"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var tags \u003d [Tag]()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var amount \u003d [Double]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var selectedTags \u003d Set\u003cTag\u003e() // The user selected tags for analysis"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var fromDate \u003d Date()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var toDate \u003d Date()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override func viewDidLoad() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        super.viewDidLoad()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Set up display for no data case"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        barChart.noDataText \u003d Constants.tagNoDataMessage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        barChart.noDataTextColor \u003d UIColor.black.withAlphaComponent(0.7)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if let font \u003d UIFont(name: \"Futura\", size: 20) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            barChart.noDataFont \u003d font"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Set up labels to display time"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        displayTime()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func displayTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let formatter \u003d Constants.getDateOnlyFormatter()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        fromLabel.text \u003d \"From: \" + formatter.string(from: fromDate)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        toLabel.text \u003d \"To: \" + formatter.string(from: toDate)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func update() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        displayTime()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        getBreakdown()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        setChart()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // If a parent tag is selected for analysis, its children must also be selected"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // Even when the user did not explicitly select it"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    fileprivate func selectAllChildTags() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let core \u003d core else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: Constants.coreFailureMessage)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var newSet \u003d Set\u003cTag\u003e(selectedTags)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            for tag in selectedTags where tag.isParent {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                let children \u003d try core.getChildrenTags(of: tag.value)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                for child in children {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                    newSet.insert(child)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.handleError(error: error, customMessage: Constants.analysisFailureMessage)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        selectedTags \u003d newSet"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func getBreakdown() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let core \u003d core else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: Constants.coreFailureMessage)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let results \u003d try core.getBreakdownByTag(from: fromDate, to: toDate, for: selectedTags)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            tags \u003d results.0"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            amount \u003d results.1"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.handleError(error: error, customMessage: Constants.analysisFailureMessage)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func setChart() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var chartDataSets \u003d [ChartDataSet]()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        for index in 0..\u003ctags.count {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let dataEntry \u003d BarChartDataEntry(x: Double(index), y: amount[index])"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let chartDataSet \u003d BarChartDataSet(values: [dataEntry], label: tags[index].toString())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            chartDataSet.colors \u003d generatereRandomColorForBar(for: index)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            chartDataSets.append(chartDataSet)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let chartData \u003d BarChartData(dataSets: chartDataSets)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        barChart.data \u003d chartData"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        barChart.animate(xAxisDuration: 1.0, yAxisDuration: 1.0)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if let font \u003d UIFont(name: \"Futura\", size: 17) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            barChart.legend.font \u003d font"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        barChart.notifyDataSetChanged()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // A utility method to hack around generating different colors for each bar"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // as the library itself does not seem to provide a method for this"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func generatereRandomColorForBar(for index: Int) -\u003e [UIColor] {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return [UIColor(red: .random(in: 0...1),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                       green: .random(in: 0...1),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                       blue: .random(in: 0...1),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                       alpha: 1.0)]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// MARK: TagAnalysisViewController: segues"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "extension TagAnalysisViewController {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if segue.identifier \u003d\u003d Constants.tagAnalysisToChooseTag {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            guard let tagSelectionController \u003d segue.destination as? TagSelectionViewController else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                return"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            tagSelectionController.core \u003d core"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            tagSelectionController.canEdit \u003d false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            tagSelectionController.shouldUnwindToAdd \u003d false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if segue.identifier \u003d\u003d Constants.tagAnalysisToCalendarFrom {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            guard let calendarController \u003d segue.destination as? DateTimeSelectionViewController else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                return"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.shouldUnwindToAdd \u003d false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.unwindDestination \u003d self"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.referenceDate \u003d fromDate"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.isSelectingFromDate \u003d true"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if segue.identifier \u003d\u003d Constants.tagAnalysisToCalendarTo {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            guard let calendarController \u003d segue.destination as? DateTimeSelectionViewController else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                return"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.shouldUnwindToAdd \u003d false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.unwindDestination \u003d self"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.referenceDate \u003d toDate"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            calendarController.isSelectingFromDate \u003d false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBAction func unwindToTagAnlysis(segue: UIStoryboardSegue) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if let tagSelectionController \u003d segue.source as? TagSelectionViewController {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            selectedTags \u003d tagSelectionController.selectedTags"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            selectAllChildTags()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            update()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if let calendarController \u003d segue.source as? DateTimeSelectionViewController {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            if calendarController.isSelectingFromDate {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                fromDate \u003d calendarController.selectedDate"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                toDate \u003d calendarController.selectedDate"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            update()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 159
    }
  },
  {
    "path": "bacon/controller/TagSelectionViewController.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  TagSelectionViewController.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 11/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import UIKit"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "class TagSelectionViewController: UIViewController {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var tableView: UITableView!"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var confirmButton: UIButton!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var core: CoreLogicInterface?"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var tags \u003d [Tag: [Tag]]()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var parentTags \u003d [Tag]()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var selectedTags \u003d Set\u003cTag\u003e()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var canEdit \u003d false // Whether user can edit tag name, depending on from where the user entered this page"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var shouldUnwindToAdd \u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override func viewDidLoad() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        super.viewDidLoad()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Populate tags with the previously stored ones"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        loadTags()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Display according to editing/non-editing mode"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if canEdit {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            confirmButton.alpha \u003d 0.0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            confirmButton.alpha \u003d 1.0"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func loadTags() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let core \u003d core else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: Constants.coreFailureMessage)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        tags \u003d core.getAllTags()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        parentTags \u003d core.getAllParentTags()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBAction func confirmButtonPressed(_ sender: UIButton) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if shouldUnwindToAdd {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            performSegue(withIdentifier: Constants.tagSelectionToAdd, sender: nil)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            performSegue(withIdentifier: Constants.tagSelectionToTagAnalysis, sender: nil)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBAction func addParentTagButtonPressed(_ sender: UIButton) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let core \u003d core else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: Constants.coreFailureMessage)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        promptUserForTagName(title: Constants.tagNameInputTitle) { userInput in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                try core.addParentTag(userInput)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                self.loadTags()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                self.tableView.reloadData()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            } catch {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                self.handleError(error: error, customMessage: Constants.tagAddFailureMessage)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func promptUserForTagName(title: String, successHandler: @escaping (String) -\u003e Void) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.promptUserForInput(title: title, message: Constants.tagNameInputMessage,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                inputValidator: { userInput in"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                    return userInput.trimmingCharacters(in: CharacterSet.whitespaces) !\u003d \"\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }, successHandler: successHandler, failureHandler: { _ in"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: Constants.InvalidTagNameWarning)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        })"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// MARK: TagSelectionViewController: UITableViewDelegate, UITableViewDataSource"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "extension TagSelectionViewController: UITableViewDelegate, UITableViewDataSource {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return parentTags.count"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let rawCell \u003d tableView.dequeueReusableCell(withIdentifier: \"ParentTagCell\", for: indexPath)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let parentCell \u003d rawCell as? ParentTagCell else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return rawCell"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let core \u003d core else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: Constants.coreFailureMessage)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return rawCell"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Send necessary data to parent tag cell"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let currentParentTag \u003d parentTags[indexPath.row]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        parentCell.parentTagLabel.text \u003d currentParentTag.value"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        parentCell.childTags \u003d tags[currentParentTag] ?? [Tag]()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        parentCell.canEdit \u003d canEdit"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Reload the sub table of parent tag cell to prevent from reusing issue"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        parentCell.subTable.reloadData()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Define sub table behaviours"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        parentCell.addChildAction \u003d { cell in"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.promptUserForTagName(title: Constants.tagNameInputTitle) { userInput in"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                do {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                    try core.addChildTag(userInput, to: currentParentTag.value)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                    self.loadTags()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                    cell.childTags \u003d self.tags[currentParentTag] ?? [Tag]()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                    cell.subTable.reloadData()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                    self.tableView.reloadData()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                } catch {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                    self.handleError(error: error, customMessage: Constants.tagAddFailureMessage)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        parentCell.deleteChildAction \u003d { indexPath, cell in"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                try core.removeChildTag(cell.childTags[indexPath.row].value, from: currentParentTag.value)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                cell.childTags \u003d try core.getChildrenTags(of: currentParentTag.value)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                cell.subTable.deleteRows(at: [indexPath], with: .automatic)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            } catch {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                self.handleError(error: error, customMessage: Constants.tagDeleteFailureMessage)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        parentCell.selectChildAction \u003d { tag in"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.selectTag(tag: tag)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        parentCell.unselectChildAction \u003d { tag in"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.unselectTag(tag: tag)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return parentCell"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -\u003e CGFloat {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return 150.0"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func tableView(_ tableView: UITableView,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                   commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let core \u003d core else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: Constants.coreFailureMessage)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if editingStyle \u003d\u003d .delete {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                try core.removeParentTag(parentTags[indexPath.row].value)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                self.loadTags()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                self.tableView.deleteRows(at: [indexPath], with: .automatic)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            } catch {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                self.handleError(error: error, customMessage: Constants.tagDeleteFailureMessage)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            TagSelectionViewController.didSelectRowAt():"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            row\u003d\\(indexPath.row))"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        selectTag(tag: parentTags[indexPath.row])"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func tableView(_ tableView: UITableView, didDeselectRowAt indexPath: IndexPath) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            TagSelectionViewController.didDeselectRowAt():"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            row\u003d\\(indexPath.row))"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        unselectTag(tag: parentTags[indexPath.row])"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func selectTag(tag: Tag) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if canEdit {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            renameTag(tag: tag)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            selectedTags.insert(tag)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func unselectTag(tag: Tag) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if canEdit {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            renameTag(tag: tag)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            selectedTags.remove(tag)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func renameTag(tag: Tag) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let core \u003d core else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: Constants.coreFailureMessage)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        promptUserForTagName(title: Constants.tagRenameInputTitle) { userInput in"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                try core.renameTag(for: tag, to: userInput)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                self.tableView.reloadData()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            } catch {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                self.handleError(error: error, customMessage: Constants.tagEditFailureMessage)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 204
    }
  },
  {
    "path": "bacon/controller/TransactionsViewController.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  TransactionsViewController.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 19/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import UIKit"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import CoreLocation"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "class TransactionsViewController: UIViewController {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    enum Const {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        static let closeCellHeight: CGFloat \u003d 179"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        static let openCellHeight: CGFloat \u003d 488"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var core: CoreLogicInterface?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var cellHeights: [CGFloat] \u003d []"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var currentMonthTransactions \u003d [Transaction]()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var transactionToEdit: Transaction?"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var monthCounter \u003d (0, 0) // Keeps track of the month displayed in the current page"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var rowsCount: Int {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return currentMonthTransactions.count"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var monthYearLabel: UILabel!"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet private weak var tableView: UITableView!"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override func viewDidLoad() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        super.viewDidLoad()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Set up top bar and table view without reloading transactions"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        monthYearLabel.text \u003d String(monthCounter.0) + \"/\" + String(monthCounter.1)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        setUpTableView()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func reload() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        loadMonthTransactions()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        setUpTableView()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        tableView.reloadData()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        monthYearLabel.text \u003d String(monthCounter.0) + \"/\" + String(monthCounter.1)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func loadMonthTransactions() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let core \u003d core else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: Constants.coreFailureMessage)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            try currentMonthTransactions \u003d core.loadTransactions(month: monthCounter.0, year: monthCounter.1)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.handleError(error: error, customMessage: Constants.transactionLoadFailureMessage)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBAction func prevButtonPressed(_ sender: UIButton) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var month \u003d monthCounter.0 - 1"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var year \u003d monthCounter.1"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if month \u003d\u003d 0 {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            year -\u003d 1"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            month \u003d 12"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        monthCounter \u003d (month, year)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        reload()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBAction func nextButtonPressed(_ sender: UIButton) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var month \u003d monthCounter.0 + 1"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var year \u003d monthCounter.1"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if month \u003d\u003d 13 {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            year +\u003d 1"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            month \u003d 1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        monthCounter \u003d (month, year)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        reload()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func setUpTableView() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        cellHeights \u003d Array(repeating: Const.closeCellHeight, count: rowsCount)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        tableView.estimatedRowHeight \u003d Const.closeCellHeight"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        tableView.rowHeight \u003d UITableView.automaticDimension"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if #available(iOS 10.0, *) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            tableView.refreshControl \u003d UIRefreshControl()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            tableView.refreshControl?.addTarget(self, action: #selector(refreshHandler), for: .valueChanged)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // swiftlint:disable attributes"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @objc func refreshHandler() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let deadlineTime \u003d DispatchTime.now() + .seconds(1)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        DispatchQueue.main.asyncAfter(deadline: deadlineTime) { [weak self] in"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            if #available(iOS 10.0, *) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                self?.tableView.refreshControl?.endRefreshing()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self?.tableView.reloadData()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // swiftlint:enable attributes"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// MARK: TransactionsViewController: UITableViewDataSource, UITableViewDelegate"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "extension TransactionsViewController: UITableViewDataSource, UITableViewDelegate {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func tableView(_: UITableView, numberOfRowsInSection _: Int) -\u003e Int {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return rowsCount"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func tableView(_: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard case let cell as TransactionCell \u003d cell else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        cell.backgroundColor \u003d .clear"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if cellHeights[indexPath.row] \u003d\u003d Const.closeCellHeight {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            cell.unfold(false, animated: false, completion: nil)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            cell.unfold(true, animated: false, completion: nil)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let rawCell \u003d tableView.dequeueReusableCell(withIdentifier: \"transactionCell\", for: indexPath)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let cell \u003d rawCell as? TransactionCell else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return rawCell"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let arrayIndex \u003d indexPath.row"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let displayedIndex \u003d arrayIndex + 1"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // FoldingCell-specific congigurations"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let durations: [TimeInterval] \u003d Constants.animatoinDuration"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        cell.durationsForExpandedState \u003d durations"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        cell.durationsForCollapsedState \u003d durations"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Define cell behaviours"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        cell.transaction \u003d currentMonthTransactions[arrayIndex]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        cell.editTransactionAction \u003d { transaction in"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.transactionToEdit \u003d transaction"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.performSegue(withIdentifier: Constants.transactionsToEdit, sender: nil)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Configure the cell to display data"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return displayDataForCell(cell, arrayIndex: arrayIndex, displayedIndex: displayedIndex)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    private func displayDataForCell(_ cell: TransactionCell,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                    arrayIndex: Int, displayedIndex: Int) -\u003e TransactionCell {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        cell.closedNumberView.text \u003d String(displayedIndex)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let date \u003d currentMonthTransactions[arrayIndex].date"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        cell.closedDateView?.text \u003d Constants.getDateOnlyFormatter().string(from: date)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        cell.openDateView?.text \u003d Constants.getDateOnlyFormatter().string(from: date)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        cell.openTimeView?.text \u003d Constants.getTimeOnlyFormatter().string(from: date)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let type \u003d currentMonthTransactions[arrayIndex].type"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let typeString \u003d type \u003d\u003d .expenditure ? \"-\" : \"+\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let amount \u003d currentMonthTransactions[arrayIndex].amount"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let amountString \u003d amount.toFormattedString"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let finalString \u003d typeString + Constants.currency + (amountString ?? Constants.defaultAmountString)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        cell.closedAmountView.text \u003d finalString"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        cell.openAmountView.text \u003d finalString"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let tags \u003d currentMonthTransactions[arrayIndex].tags"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var tagsString \u003d \"\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        for tag in tags {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            tagsString +\u003d tag.toString() + \"  \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if tagsString \u003d\u003d \"\" {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            tagsString \u003d Constants.defaultTagsToDisplay"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        cell.openTagView.text \u003d tagsString"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        cell.closedTagView.text \u003d tagsString"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let codableLocation \u003d currentMonthTransactions[arrayIndex].location"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if let location \u003d codableLocation?.location {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let geoCoder \u003d CLGeocoder()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            geoCoder.reverseGeocodeLocation(location) { placemarks, _ in"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                if let place \u003d placemarks?.first {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                    cell.locationView?.text \u003d String(place)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let description \u003d currentMonthTransactions[arrayIndex].description"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if description \u003d\u003d Constants.defaultDescription {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            cell.descriptionView?.text \u003d Constants.defaultDescriptionToDisplay"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            cell.descriptionView?.text \u003d description"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let imageView \u003d cell.viewWithTag(Constants.imageViewTag) as? UIImageView"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let codableImgae \u003d currentMonthTransactions[arrayIndex].image"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if let image \u003d codableImgae?.image {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            imageView?.image \u003d image"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            imageView?.image \u003d Constants.defaultImage"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return cell"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func tableView(_: UITableView, heightForRowAt indexPath: IndexPath) -\u003e CGFloat {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return cellHeights[indexPath.row]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let rawCell \u003d tableView.cellForRow(at: indexPath)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let cell \u003d rawCell as? FoldingCell else {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if cell.isAnimating() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var duration \u003d 0.0"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let cellIsCollapsed \u003d cellHeights[indexPath.row] \u003d\u003d Const.closeCellHeight"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if cellIsCollapsed {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            cellHeights[indexPath.row] \u003d Const.openCellHeight"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            cell.unfold(true, animated: true, completion: nil)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            duration \u003d 0.5"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            cellHeights[indexPath.row] \u003d Const.closeCellHeight"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            cell.unfold(false, animated: true, completion: nil)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            duration \u003d 0.8"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        UIView.animate(withDuration: duration, delay: 0, options: .curveEaseOut, animations: { () -\u003e Void in"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            tableView.beginUpdates()"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            tableView.endUpdates()"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }, completion: nil)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func tableView(_ tableView: UITableView,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                   commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if editingStyle \u003d\u003d .delete {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            if currentMonthTransactions[indexPath.row].frequency.nature \u003d\u003d .oneTime {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                deleteSingleTransaction(at: indexPath)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                chooseSingleOrMultipleDeletion(at: indexPath)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func chooseSingleOrMultipleDeletion(at indexPath: IndexPath) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let alert \u003d UIAlertController(title: Constants.deleteAlertTitle,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                      message: Constants.deleteAlertMessage,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                      preferredStyle: .alert)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        alert.addAction(UIAlertAction(title: Constants.deleteSingleMessage, style: .default) { _ in"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                        self.deleteSingleTransaction(at: indexPath)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        })"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        alert.addAction(UIAlertAction(title: Constants.deleteAllMessage, style: .default) { _ in"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                        self.deleteAllRecurringTransaction(at: indexPath)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        })"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.present(alert, animated: true)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func deleteSingleTransaction(at indexPath: IndexPath) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.currentMonthTransactions[indexPath.row].delete(successCallback: {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.currentMonthTransactions.remove(at: indexPath.row)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.tableView.deleteRows(at: [indexPath], with: .automatic)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            // There should have been no need to reload the table"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            // However, since we are displaying an index, we need to reload to update the index displayed"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            // It is doen after some delay to preserve the deleteRows animation"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.perform(#selector(self.reloadTable), with: nil, afterDelay: 0.4)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }, failureCallback: { errorMessage in"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: errorMessage)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        })"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func deleteAllRecurringTransaction(at indexPath: IndexPath) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let core \u003d core else {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alertUser(title: Constants.warningTitle, message: Constants.coreFailureMessage)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            try core.deleteAllRecurringInstances(of: currentMonthTransactions[indexPath.row])"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            // Not feasible to predict which rows to delete from the table view"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            // Hence, reload everything"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            reload()"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.handleError(error: error, customMessage: Constants.transactionDeleteFailureMessage)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // swiftlint:disable attributes"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @objc func reloadTable() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        DispatchQueue.main.async {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.tableView.reloadData()"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // swiftlint:enable attributes"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// MARK: TransactionsViewController: segues"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "extension TransactionsViewController {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if segue.identifier \u003d\u003d Constants.transactionsToEdit {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            guard let editController \u003d segue.destination as? AddTransactionViewController else {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                return"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            editController.transactionToEdit \u003d transactionToEdit"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            editController.core \u003d core"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            editController.isInEditMode \u003d true"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBAction func unwindToTransactions(segue: UIStoryboardSegue) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if segue.source is AddTransactionViewController {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            reload()"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 5,
      "kumuwu": 311
    }
  },
  {
    "path": "bacon/controller/coreLogic/CoreLogic+BreakDownByLocation.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  CoreLogic+BreakDownByLocation.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 21/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "extension CoreLogic {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func getBreakdownByLocation(from fromDate: Date, to toDate: Date) throws -\u003e ([CLLocation]) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let transactions \u003d try transactionManager.loadTransactions(from: fromDate, to: toDate)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return try getBreakdownByLocation(transactions: transactions)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func getBreakdownByLocation(transactions: [Transaction]) throws -\u003e ([CLLocation]) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var locations \u003d [CLLocation]()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        for transaction in transactions where transaction.type \u003d\u003d .expenditure {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            if let location \u003d transaction.location {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                locations.append(location.location)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return locations"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 26
    }
  },
  {
    "path": "bacon/controller/coreLogic/CoreLogic+BreakDownByTag.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  CoreLogic+BreakDownByTag.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 12/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "extension CoreLogic {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func getBreakdownByTag(from fromDate: Date, to toDate: Date, for tags: Set\u003cTag\u003e) throws -\u003e ([Tag], [Double]) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let transactions \u003d try transactionManager.loadTransactions(from: fromDate, to: toDate)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return try getBreakdownByTag(transactions: transactions, for: tags)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func getBreakdownByTag(transactions: [Transaction],"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                   for requiredTags: Set\u003cTag\u003e) throws -\u003e ([Tag], [Double]) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var tagAmount: [Tag: Double] \u003d [:]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Initialize all required tags to have amount zero"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // This is important for the case where no transactions ever uses a particular tag"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        for tag in requiredTags {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            tagAmount[tag] \u003d 0"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // For each required tag, count the amount of transactions having this tag"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        for transaction in transactions where transaction.type \u003d\u003d .expenditure {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            for tag in transaction.tags where requiredTags.contains(tag) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                // Firstly, if the transaction contains a tag that is required, increase the amount for the tag"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                tagAmount[tag] \u003d (tagAmount[tag] ?? 0) + NSDecimalNumber(decimal: transaction.amount).doubleValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                // If the current tag is a child tag, this transaction must be counted towards the parent tag too"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                // Provided the transaction is not tagged with the parent tag itself (to prevent double counting)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                if let parentTagValue \u003d tag.parentValue {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                    let parentTag \u003d try self.getTag(for: parentTagValue, of: nil) // We know it\u0027s a parent tag"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                    if requiredTags.contains(parentTag) \u0026\u0026 !transaction.tags.contains(parentTag) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                        tagAmount[parentTag] \u003d (tagAmount[parentTag] ?? 0) +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                            NSDecimalNumber(decimal: transaction.amount).doubleValue"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Put the dictionary into two arrays for use for the charting library"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var tags \u003d [Tag](tagAmount.keys)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var amounts \u003d [Double]()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        for index in 0..\u003ctags.count {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            guard let amountForThisTag \u003d tagAmount[tags[index]] else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                // It should have been initilaized to zero"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                throw InitializationError(message: \"Dictionary initializtion encountered error!\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            amounts.append(amountForThisTag)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return (tags, amounts)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 58
    }
  },
  {
    "path": "bacon/controller/coreLogic/CoreLogic+BreakDownByTime.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  CoreLogic+BreakDownByTime.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 20/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "extension CoreLogic {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func getBreakdownByTime(from fromDate: Date, to toDate: Date) throws -\u003e ([(Int, Int)], [Double]) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let adjustedDates \u003d try adjustFromAndToDates(fromDate: fromDate, toDate: toDate)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let months \u003d try calculateMonthsIncluded(from: fromDate, to: toDate)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var amounts \u003d [Double]()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        for index in 0..\u003cmonths.count {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            amounts.append(try calculateMonthlyNetIncome(month: months[index].0, year: months[index].1,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                                         fromDate: adjustedDates.0, toDate: adjustedDates.1))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return (months, amounts)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // Set the fromDate to its first moment (00:00:00) and the toDate to its last moment (23:59:00)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func adjustFromAndToDates(fromDate: Date, toDate: Date) throws -\u003e (Date, Date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let calendar \u003d Calendar.current"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let fromDateStart \u003d calendar.startOfDay(for: fromDate)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let toDateEnd \u003d calendar.date(byAdding: DateComponents(day: 1, second: -1),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                            to: calendar.startOfDay(for: toDate)) else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                                throw InitializationError(message:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                                    \"Date initializtion encountered error!\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return (fromDateStart, toDateEnd)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func calculateMonthsIncluded(from fromDate: Date, to toDate: Date) throws -\u003e [(Int, Int)] {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let calendar \u003d Calendar.current"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var monthsIncluded \u003d [(Int, Int)]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var dateComponents \u003d DateComponents()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        dateComponents.month \u003d 1 // Each time we add one month to the date"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var referenceDate \u003d fromDate // A Date object to help roll over the dates"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Adjust the toDate to the first day of the next month after the given toDate"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // e.g. If toDate is 21/04/2019, then toDateAdjusted will be 01/05/2019"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // So as to ensure the loop below always includes the month of the toDate"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let oneMonthAfterToDate \u003d calendar.date(byAdding: dateComponents, to: toDate) else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            throw InitializationError(message: \"Date initializtion encountered error!\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let toDateAdjusted \u003d try oneMonthAfterToDate.getStartOfCurrentMonth()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        while referenceDate \u003c toDateAdjusted {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let year \u003d calendar.component(.year, from: referenceDate)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let month \u003d calendar.component(.month, from: referenceDate)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            monthsIncluded.append((month, year))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            guard let nextMonth \u003d calendar.date(byAdding: dateComponents, to: referenceDate) else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                throw InitializationError(message: \"Date initializtion encountered error!\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            referenceDate \u003d nextMonth"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return monthsIncluded"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func calculateMonthlyNetIncome(month: Int, year: Int, fromDate: Date, toDate: Date) throws -\u003e Double {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let currentMonthTransactions \u003d try self.loadTransactions(month: month, year: year)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var total: Double \u003d 0"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        for transaction in currentMonthTransactions where transaction.date \u003c\u003d toDate \u0026\u0026 transaction.date \u003e\u003d fromDate {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            if transaction.type \u003d\u003d .expenditure {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                total -\u003d NSDecimalNumber(decimal: transaction.amount).doubleValue"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                total +\u003d NSDecimalNumber(decimal: transaction.amount).doubleValue"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return total"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 76
    }
  },
  {
    "path": "bacon/controller/coreLogic/CoreLogic.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  CoreLogic.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Created by Travis Ching Jia Yea on 2/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "class CoreLogic: CoreLogicInterface {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // MARK: - Properties"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    let transactionManager: TransactionManagerInterface"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    let budgetManager: BudgetManagerInterface"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    let predictionManager: PredictionManagerInterface"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var tagManager: TagManagerInterface"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    init(tagManager: TagManager \u003d TagManager.create(testMode: false)) throws {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        transactionManager \u003d try TransactionManager()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        budgetManager \u003d try BudgetManager()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        predictionManager \u003d try PredictionManager()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.tagManager \u003d tagManager"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // MARK: Transaction related"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func getTotalTransactionsRecorded() -\u003e Double {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return transactionManager.getNumberOfTransactionsInDatabase()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func clearAllTransactions() throws {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try transactionManager.clearTransactionDatabase()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func recordTransaction(date: Date,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                           type: TransactionType,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                           frequency: TransactionFrequency,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                           tags: Set\u003cTag\u003e,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                           amount: Decimal,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                           description: String,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                           image: CodableUIImage? \u003d nil,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                           location: CodableCLLocation? \u003d nil,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                           prediction: Prediction? \u003d nil) throws {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let currentTransaction \u003d try Transaction(date: date, type: type, frequency: frequency,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                                 tags: tags, amount: amount, description: description,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                 image: image, location: location)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            CoreLogic.recordTransaction() with arguments:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            date\u003d\\(date) type\u003d\\(type) frequency\u003d\\(frequency) tags\u003d\\(tags) amount\u003d\\(amount)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            description\u003d\\(description) location\u003d\\(location as Optional)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try transactionManager.saveTransaction(currentTransaction)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let prediction \u003d prediction else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            // No prediction was used, hence no need to check whether prediction is accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if doesAcceptPrediction(transaction: currentTransaction, prediction: prediction) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                try predictionManager.savePrediction(prediction)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            } catch {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                // Failure in prediction should be resolved internally, as it is not known at all by the user"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                log.warning(\"CoreLogic failed saving prediction\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func doesAcceptPrediction(transaction: Transaction, prediction: Prediction) -\u003e Bool {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if transaction.amount \u003d\u003d prediction.amountPredicted \u0026\u0026 transaction.tags \u003d\u003d prediction.tagsPredicted {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func deleteAllRecurringInstances(of transaction: Transaction) throws {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        guard transaction.frequency.nature \u003d\u003d .recurring else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            throw InvalidArgumentError(message: \"\"\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                deleteAllRecurringInstances() requires transaction to be recurring."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try transactionManager.deleteAllRecurringInstance(of: transaction)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func loadTransactions(month: Int, year: Int) throws -\u003e [Transaction] {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        guard month \u003e 0 \u0026\u0026 month \u003c 13 else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            throw InvalidArgumentError(message: \"Month should be an integer ranging from 1 to 12.\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        guard year \u003e\u003d 0 \u0026\u0026 year \u003c 10_000 else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            throw InvalidArgumentError(message: \"Year should be an integer ranging from 0000 to 9999\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let monthString \u003d String(format: \"%02d\", month)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        guard let startDate \u003d Constants.getDateFormatter().date(from: \"\\(year)-\\(monthString)-01 00:00:00\") else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            throw InitializationError(message: \"\"\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Unable to initialize start date from month and year given in CoreLogic.loadTransaction()."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        guard let daysInMonth \u003d Calendar.current.range(of: .day, in: .month, for: startDate)?.count else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            throw InitializationError(message: \"\"\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Unable to identify number of days in month supplied in CoreLogic.loadTransaction()."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        guard let endDate \u003d Constants.getDateFormatter()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .date(from: \"\\(year)-\\(monthString)-\\(daysInMonth) 23:59:59\") else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            throw InitializationError(message: \"\"\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Unable to initialize end date from month and year given in CoreLogic.loadTransaction()."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            CoreLogic.loadTransaction() with arguments:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            month\u003d\\(month) year\u003d\\(year)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return try transactionManager.loadTransactions(from: startDate, to: endDate)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // MARK: Budget related"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func saveBudget(_ budget: Budget) throws {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try budgetManager.saveBudget(budget)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func loadBudget() throws -\u003e Budget {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let budget \u003d try budgetManager.loadBudget()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let currentDate \u003d Date()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        if budget.toDate \u003c currentDate {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            // budget is overdue"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            try budgetManager.deleteBudget()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            throw InitializationError(message: \"Budget is outdated, needs to be reinitialized.\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return budget"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func getSpendingStatus(_ currentMonthTransactions: [Transaction]) throws -\u003e SpendingStatus {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let budget \u003d try self.loadBudget()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var totalExpenditure: Decimal \u003d 0.0"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        for transaction in currentMonthTransactions where transaction.type \u003d\u003d .expenditure {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            totalExpenditure +\u003d transaction.amount"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return SpendingStatus(currentSpending: totalExpenditure, totalBudget: budget.amount)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // MARK: Tag related"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func getTag(for value: String, of parentValue: String?) throws -\u003e Tag {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return try tagManager.getTag(for: value, of: parentValue)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func getAllTags() -\u003e [Tag: [Tag]] {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return tagManager.tags"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func getAllParentTags() -\u003e [Tag] {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return tagManager.parentTags"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func getChildrenTags(of parent: String) throws -\u003e [Tag] {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return try tagManager.getChildrenTags(of: parent)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @discardableResult"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func addParentTag(_ name: String) throws -\u003e Tag {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return try tagManager.addParentTag(name)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @discardableResult"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func addChildTag(_ child: String, to parent: String) throws -\u003e Tag {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return try tagManager.addChildTag(child, to: parent)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @discardableResult"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func renameTag(for tag: Tag, to newValue: String) throws -\u003e Tag {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return try tagManager.renameTag(tag.value, to: newValue, of: tag.parentValue)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func removeChildTag(_ child: String, from parent: String) throws {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let removedTags \u003d try tagManager.removeChildTag(child, from: parent)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        for tags in removedTags {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            try transactionManager.deleteTagFromTransactions(tags)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func removeParentTag(_ parent: String) throws {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let removedTags \u003d try tagManager.removeParentTag(parent)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        for tags in removedTags {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            try transactionManager.deleteTagFromTransactions(tags)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TravisCJY"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // MARK: Prediction related"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func getPrediction(_ time: Date, _ location: CodableCLLocation,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                       _ transactions: [Transaction]) -\u003e Prediction? {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            CoreLogic.getPrediction() with arguments:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            time\u003d\\(time) location\u003d\\(location) transactions\u003d\\(transactions)."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return predictionManager.getPrediction(time, location, transactions)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 33,
      "kumuwu": 76,
      "TravisCJY": 1,
      "Fabian": 3,
      "Travis Ching Jia Yea": 81
    }
  },
  {
    "path": "bacon/controller/coreLogic/CoreLogicInterface.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  CoreLogicInterface.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  An API for all core-logic related functionalities."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Created by Travis Ching Jia Yea on 9/4/19."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "protocol CoreLogicInterface {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // MARK: Transaction Related"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func getTotalTransactionsRecorded() -\u003e Double"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func clearAllTransactions() throws"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func recordTransaction(date: Date,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                           type: TransactionType,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                           frequency: TransactionFrequency,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                           tags: Set\u003cTag\u003e,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                           amount: Decimal,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                           description: String,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                           image: CodableUIImage?,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                           location: CodableCLLocation?,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                           prediction: Prediction?) throws"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func deleteAllRecurringInstances(of transaction: Transaction) throws"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func loadTransactions(month: Int, year: Int) throws -\u003e [Transaction]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // MARK: Budget Related"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func saveBudget(_ budget: Budget) throws"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func loadBudget() throws -\u003e Budget"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func getSpendingStatus(_ currentMonthTransactions: [Transaction]) throws -\u003e SpendingStatus"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // MARK: Tag related"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func getTag(for value: String, of parentValue: String?) throws -\u003e Tag"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func getAllTags() -\u003e [Tag: [Tag]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func getAllParentTags() -\u003e [Tag]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func getChildrenTags(of parent: String) throws -\u003e [Tag]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @discardableResult"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func addParentTag(_ name: String) throws -\u003e Tag"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @discardableResult"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func addChildTag(_ child: String, to parent: String) throws -\u003e Tag"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @discardableResult"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func renameTag(for tag: Tag, to newValue: String) throws -\u003e Tag"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func removeChildTag(_ child: String, from parent: String) throws"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func removeParentTag(_ parent: String) throws"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // MARK: Prediction related"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func getPrediction(_ time: Date, _ location: CodableCLLocation,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                       _ transactions: [Transaction]) -\u003e Prediction?"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // MARK: Breakdown analysis modules"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// Breakdown by tag only analyzes transactions of type expenditure"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func getBreakdownByTag(from fromDate: Date, to toDate: Date, for tags: Set\u003cTag\u003e)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        throws -\u003e ([Tag], [Double])"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// The fromDate will be set to its first moment (00:00:00)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// and the toDate to its last moment (23:59:00)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// To make sure all transactions are in the time period are included."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// Breakdown by time analyzes net transactions (i.e. both expenditure and income)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func getBreakdownByTime(from fromDate: Date, to toDate: Date)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        throws -\u003e ([(Int, Int)], [Double])"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// Breakdown by location only analyzes transactions of type expenditure"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func getBreakdownByLocation(from fromDate: Date, to toDate: Date)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        throws -\u003e ([CLLocation])"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 17,
      "kumuwu": 21,
      "Fabian": 1,
      "Travis Ching Jia Yea": 26
    }
  },
  {
    "path": "bacon/controller/locationPrompt/ApiHandlerProtocol.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  ApiHandlerProtocol.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 18/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import CoreLocation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// API handlers send requests to and interpret responses from"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// specific remote resources to determine if a user should"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// receive a prompt based on the current location."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": "protocol ApiHandler {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Sends a request to this ApiHandler\u0027s API endpoint,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// interprets the response (or handles a failure),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// and calls `decisionHandler` with the decision"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// (`true` to prompt and `false` otherwise)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func sendRequest(currentLocation: CLLocation,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                     decisionHandler: @escaping (Bool) -\u003e Void)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fabian": 24
    }
  },
  {
    "path": "bacon/controller/locationPrompt/GooglePlacesApiHandler.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  GooglePlacesApiHandler.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 18/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import CoreLocation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import Alamofire"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import SwiftyJSON"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// An API Handler for Google\u0027s Places API."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": "class GooglePlacesApiHandler: ApiHandler {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // See: https://developers.google.com/places/web-service/search for documentation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private let apiBaseUrl \u003d \"https://maps.googleapis.com/maps/api/place/nearbysearch/json\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // There are multiple ways to secure API keys in production:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // 1) Perhaps the simplest way is to add an application restriction: see"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    //      https://developers.google.com/maps/documentation/ios-sdk/get-api-key#step_2_add_the_api_key_to_your_app"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // 2) For more sophisticated ways, see: https://www.reddit.com/r/iOSProgramming/comments/5xh7my/how_do_you_securely_store_api_keys/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private let apiKey \u003d Constants.LocationPromptGooglePlacesApiKey"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func sendRequest(currentLocation: CLLocation,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                     decisionHandler: @escaping (Bool) -\u003e Void) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let parameters \u003d generateRequestParameters(currentLocation: currentLocation,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                                   context: Constants.LocationPromptContext)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.info(\"Sending Alamofire request.\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        Alamofire"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            .request(apiBaseUrl, parameters: parameters)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            .validate()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            .responseJSON { response in"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                log.info(\"Received request response.\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                switch response.result {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                case .failure(let error):"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                    log.warning(\"Request unsuccessful. Error\u003d\\(error)\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                    decisionHandler(false) // Don\u0027t notify user if request is unsuccessful"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                case .success(let value):"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                    log.info(\"Request successful.\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                    let decision \u003d self.handleResponse(value)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                    decisionHandler(decision)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Generates a dictionary representing Alamofire request parameters."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private func generateRequestParameters(currentLocation: CLLocation,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                           context: String) -\u003e [String: String] {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let latitude \u003d currentLocation.coordinate.latitude"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let longitude \u003d currentLocation.coordinate.longitude"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return [\"key\": apiKey,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                \"keyword\": context,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                \"location\": String(latitude) + \",\" + String(longitude),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                \"radius\": String(Constants.LocationPromptRadius)]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // This method contains the logic to handle the response from a request to Google Places\u0027 API."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // This could be modified or extended in the future to support machine learning for more accurate predictions."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private func handleResponse(_ response: Any) -\u003e Bool {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let json \u003d JSON(response)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Rudimentary logic: if there is \u003e\u003d 1 place in the specified vicinity"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // matching the term, return true."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let matchingPlacesCount \u003d json[\"results\"].arrayValue.count"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return matchingPlacesCount \u003e\u003d 1"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fabian": 74
    }
  },
  {
    "path": "bacon/controller/locationPrompt/LocationPrompt.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  LocationPrompt.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 18/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import CoreLocation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import Alamofire"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import SwiftyJSON"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "class LocationPrompt {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private static let apiHandler: ApiHandler \u003d GooglePlacesApiHandler()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Decides if the user should receive a prompt to record a transaction."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Parameters:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - currentLocation: The user\u0027s current location."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - callback: This will be fired after LocationPrompt makes a decision."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///         It will be called with `true` if the user should be prompted, and `false` otherwise."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    static func shouldPromptUser(currentLocation: CLLocation,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                 decisionHandler: @escaping (Bool) -\u003e Void) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        apiHandler.sendRequest(currentLocation: currentLocation, decisionHandler: decisionHandler)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fabian": 28
    }
  },
  {
    "path": "bacon/model/budget/Budget.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Budget.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Created by Travis Ching Jia Yea on 8/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// Represents a budget. Budgets have a starting date, ending date, and amount."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "struct Budget: Codable, Equatable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    let fromDate: Date"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    let toDate: Date"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    let amount: Decimal"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Creates a Budget."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - fromDate: This must be set before `toDate`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - toDate: This must be set after `fromDate`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - amount: This must be greater than 0."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    init (from fromDate: Date, to toDate: Date, amount: Decimal) throws {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        guard fromDate \u003c toDate else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            throw InitializationError(message: \"\u0027from\u0027 date must not be equivalent or later than \u0027to\u0027 date.\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        guard amount \u003e\u003d 0 else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            throw InitializationError(message: \"Budget must be of a non-negative value.\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        self.fromDate \u003d fromDate"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        self.toDate \u003d toDate"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        self.amount \u003d amount"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fabian": 5,
      "Travis Ching Jia Yea": 27
    }
  },
  {
    "path": "bacon/model/budget/BudgetManager.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  BudgetManager.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Created by Travis Ching Jia Yea on 9/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// Manages a budget."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "class BudgetManager: BudgetManagerInterface {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    private let storageManager: StorageManagerInterface"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Instantiates a BudgetManager."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// A BudgetManager is backed internally by a StorageManager."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: Rethrows any error encountered while instantiating a StorageManager."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    init() throws {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        storageManager \u003d try StorageManager()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            BudgetManager initialized using BudgetManager.init()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func saveBudget(_ budget: Budget) throws {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try storageManager.saveBudget(budget)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func loadBudget() throws -\u003e Budget {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return try storageManager.loadBudget()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func deleteBudget() throws {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try storageManager.clearBudgetDatabase()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 6,
      "Fabian": 4,
      "Travis Ching Jia Yea": 27
    }
  },
  {
    "path": "bacon/model/budget/BudgetManagerInterface.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  BudgetManagerInterface.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  An API for all budget related functionalities."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  Created by Travis Ching Jia Yea on 21/4/19."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "protocol BudgetManagerInterface {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Saves a budget."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: Rethrows any errors encountered during the operation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func saveBudget(_ budget: Budget) throws"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Loads and returns a budget."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: Rethrows any errors encountered during the operation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadBudget() throws -\u003e Budget"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Deletes a budget."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: Rethrows any errors encountered during the operation."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func deleteBudget() throws"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 17,
      "Fabian": 8
    }
  },
  {
    "path": "bacon/model/budget/SpendingStatus.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  SpendingStatus.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  A struct to store computed properties for display"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  on the main landing page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 13/4/19."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// Represents an expenditure status as a proportion of a budget."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "struct SpendingStatus {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    let currentSpending: Decimal"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    let totalBudget: Decimal"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var percentage: Decimal {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if totalBudget \u003d\u003d 0 {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            if currentSpending \u003d\u003d 0 {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                return 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                return 100"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return currentSpending / totalBudget"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 3,
      "kumuwu": 24,
      "Fabian": 3
    }
  },
  {
    "path": "bacon/model/prediction/BaconPredictionGenerator.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  BaconPredictionGenerator.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 14/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import CoreLocation"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "class BaconPredictionGenerator {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func predict(_ time: Date, _ location: CodableCLLocation, _ transactions: [Transaction]) -\u003e Prediction? {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            BaconPredictionGenerator started predicting using BaconPredictionGenerator.predict()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var similarTransactions \u003d Set\u003cTransaction\u003e()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        for transaction in transactions {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            if isSimilarInTime(time, transaction) \u0026\u0026 isSimilarInLocation(location, transaction) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                similarTransactions.insert(transaction)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return generatePredictionFromSimilarTransactions(time, location, similarTransactions)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func isSimilarInTime(_ time: Date, _ transaction: Transaction) -\u003e Bool {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let calendar \u003d Calendar.current"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let time1 \u003d time"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let time2 \u003d transaction.date"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Take out only the hour and minute of time1"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let components \u003d calendar.dateComponents([.hour, .minute, .second], from: time1)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let hour \u003d components.hour, let minute \u003d components.minute, let second \u003d components.second else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Map the hour and minute components of time1 to time2, so the two times have the same date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let time3 \u003d calendar.date(bySettingHour: hour, minute: minute, second: second, of: time2)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let mappedTime1 \u003d time3 else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Now take the difference between time2 and mappedTime1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let difference \u003d calendar.dateComponents([.hour, .minute], from: mappedTime1, to: time2)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let hourDiff \u003d difference.hour, let minuteDiff \u003d difference.minute else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Calculate the number of minutes between the two times"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Taking into consideration of wrapping around at mid-night"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let absHourDiff \u003d abs(hourDiff)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let absMinuteDiff \u003d abs(minuteDiff)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let totalDiffInMin \u003d absHourDiff * 60 + absMinuteDiff"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let reverseTotalDiffInMin \u003d 24 * 60 - totalDiffInMin"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let finalDiffInMin \u003d min(totalDiffInMin, reverseTotalDiffInMin)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if finalDiffInMin \u003c\u003d Constants.timeSimilarityThreshold {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func isSimilarInLocation(_ location: CodableCLLocation, _ transaction: Transaction) -\u003e Bool {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let location1 \u003d transaction.location?.location else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let location2 \u003d location.location"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if location1.distance(from: location2) \u003c\u003d Constants.locationSimilarityThreshold {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func generatePredictionFromSimilarTransactions(_ time: Date,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                                           _ location: CodableCLLocation,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                                           _ similarTransactions: Set\u003cTransaction\u003e) -\u003e Prediction? {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var amountPredicted \u003d Constants.defaultPredictedAmount"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var tagsPredicted \u003d Set\u003cTag\u003e()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var amountCount \u003d [Decimal: Int]()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var tagCount \u003d [Tag: Int]()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Count the number of occurrences of each amount and each tag in all similar transactions"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        for transaction in similarTransactions {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            for tag in transaction.tags {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                tagCount[tag] \u003d (tagCount[tag] ?? 0) + 1"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            amountCount[transaction.amount] \u003d (amountCount[transaction.amount] ?? 0) + 1"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // The predicted amount will be the most frequently recorded amount"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // While the predicted tag set contains the top few frequent tags"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if let mostFrequentAmount \u003d amountCount.max(by: { first, second in first.value \u003c second.value })?.key {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            amountPredicted \u003d mostFrequentAmount"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        for _ in 0..\u003cConstants.numberOfPredictedTags {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            if let mostFrequentTag \u003d tagCount.max(by: { first, second in first.value \u003c second.value })?.key {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                tagsPredicted.insert(mostFrequentTag)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                tagCount[mostFrequentTag] \u003d 0"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let prediction \u003d try Prediction(time: time, location: location,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                            amount: amountPredicted, tags: tagsPredicted)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            log.info(\"\"\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                BaconPredictionGenerator finished predicting prediction"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return prediction"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            // Failure in prediction should be resolved internally, as it is not known at all by the user"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            log.warning(\"\"\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                BaconPredictionGenerator failed predicting, returning nil"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return nil"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 117
    }
  },
  {
    "path": "bacon/model/prediction/Prediction.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Prediction.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 14/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// Represents a prediction of a Transaction\u0027s details."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "struct Prediction: Codable, Hashable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    let time: Date"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    let location: CodableCLLocation"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    let amountPredicted: Decimal"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    let tagsPredicted: Set\u003cTag\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Instantiates a Prediction."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - time: The predicted time."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - location: The predicted location."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - amount: The predicted amount. This must be greater than 0."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - tags: The predicted tags."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    init(time: Date, location: CodableCLLocation, amount: Decimal, tags: Set\u003cTag\u003e) throws {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard amount \u003e\u003d 0 else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            throw InitializationError(message: \"Amount must be of a non-negative value.\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.time \u003d time"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.location \u003d location"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.amountPredicted \u003d amount"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.tagsPredicted \u003d tags"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "// MARK: Prediction: equals()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "extension Prediction {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// Compares 2 predictions."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// - Returns: true if they have equal properties."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func equals(_ prediction: Prediction) -\u003e Bool {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return time \u003d\u003d prediction.time"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            \u0026\u0026 location \u003d\u003d prediction.location"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            \u0026\u0026 amountPredicted \u003d\u003d prediction.amountPredicted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            \u0026\u0026 tagsPredicted \u003d\u003d prediction.tagsPredicted"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 12,
      "kumuwu": 26,
      "Fabian": 6
    }
  },
  {
    "path": "bacon/model/prediction/PredictionGenerator.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  PredictionGenerator.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 14/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// This provides an abstraction layer over the underlying prediction generation logic."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// This localizes any changes needed when swapping out the underlying prediction generator."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "class PredictionGenerator {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private let concretePredictor: BaconPredictionGenerator"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    init() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            PredictionGenerator initialized using PredictionGenerator.init()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        concretePredictor \u003d BaconPredictionGenerator()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Makes a prediction based on the input arguments and an array of past Transactions."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func predict(_ time: Date, _ location: CodableCLLocation, _ transactions: [Transaction]) -\u003e Prediction? {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return concretePredictor.predict(time, location, transactions)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 25,
      "Fabian": 3
    }
  },
  {
    "path": "bacon/model/prediction/PredictionManager.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  PredictionManager.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 14/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// Manages predictions."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "class PredictionManager: PredictionManagerInterface {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    private let storageManager: StorageManagerInterface"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private let predictionGeneraor: PredictionGenerator"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Instantiates a PredictionManager."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// A PredictionManager is backed internally by a StorageManager."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: Rethrows any error encountered while instantiating a StorageManager."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    init() throws {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        storageManager \u003d try StorageManager()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        predictionGeneraor \u003d PredictionGenerator()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            PredictionManager initialized using PredictionManager.init()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func getPrediction(_ time: Date, _ location: CodableCLLocation,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                       _ transactions: [Transaction]) -\u003e Prediction? {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let newPrediction \u003d getPredictionFromGenerator(time, location, transactions)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return newPrediction"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func getPredictionFromGenerator(_ time: Date, _ location: CodableCLLocation,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                            _ transactions: [Transaction]) -\u003e Prediction? {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "       return predictionGeneraor.predict(time, location, transactions)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func savePrediction(_ prediction: Prediction) throws {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        try storageManager.savePrediction(prediction)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 2,
      "kumuwu": 36,
      "Fabian": 4
    }
  },
  {
    "path": "bacon/model/prediction/PredictionManagerInterface.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  PredictionManagerInterface.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  Created by Travis Ching Jia Yea on 21/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// An interface for all Prediction-related functionalities."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "protocol PredictionManagerInterface {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Retrieves and returns a prediction."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func getPrediction(_ time: Date, _ location: CodableCLLocation,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                       _ transactions: [Transaction]) -\u003e Prediction?"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Saves a prediction."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: Rethrows any error encountered during the operation."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func savePrediction(_ prediction: Prediction) throws"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 15,
      "Fabian": 5
    }
  },
  {
    "path": "bacon/model/storage/StorageCouchBaseDB+Budget.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  StorageCouchBaseDB+Budget.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  This file is an extension to StorageCouchBaseDB"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  that provides methods supporting Budget activities."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Created by Travis Ching Jia Yea on 8/4/19."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "import CouchbaseLiteSwift"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "extension StorageCouchBaseDB {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // Method for testing to ensure that there is always only 1 budget in database"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func getNumberOfBudgetsInDatabase() -\u003e Double {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return Double(budgetDatabase.count)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func clearBudgetDatabase() throws {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            try budgetDatabase.delete()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            // Reinitialize database"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            budgetDatabase \u003d try StorageCouchBaseDB.openOrCreateEmbeddedDatabase(name: .budget)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            log.info(\"Entered method StorageCouchBaseDB.clearBudgetDatabase()\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            if error is StorageError {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                log.warning(\"\"\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    StorageCouchBaseDB.clearBudgetDatabase():"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Encounter error while reinitializing budget database."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Throwing StorageError."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                throw error"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                log.warning(\"\"\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    StorageCouchBaseDB.clearBudgetDatabase():"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Encounter error while clearing budget database."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Throwing StorageError."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                throw StorageError(message: \"Encounter error while clearing Budget Database.\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func saveBudget(_ budget: Budget) throws {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            let budgetDocument \u003d try createMutableDocument(from: budget)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            try budgetDatabase.saveDocument(budgetDocument)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            log.info(\"\"\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                StorageCouchBaseDB.saveBudget() with arguments:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                budget\u003d\\(budget)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            if error is StorageError {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                throw error"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                log.info(\"\"\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    StorageCouchBaseDB.saveBudget():"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Encounter error saving budget into database."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Throwing StorageError."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                throw StorageError(message: \"Budget couldn\u0027t be saved into database.\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func loadBudget() throws -\u003e Budget {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let query \u003d QueryBuilder.select(SelectResult.all())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .from(DataSource.database(budgetDatabase))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .limit(Expression.int(1))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            StorageCouchBaseDB.loadBudget()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return try getBudgetFromQuery(query)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    private func getBudgetFromQuery(_ query: Query) throws -\u003e Budget {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            guard let result \u003d try query.execute().allResults().first else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                throw StorageError(message: \"There is no Budget saved in database.\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            guard let budgetDictionary \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                result.toDictionary()[DatabaseCollections.budget.rawValue] as? [String: Any] else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                throw StorageError(message: \"Could not read Document loaded from database as Dictionary.\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            let budgetData \u003d try JSONSerialization.data(withJSONObject: budgetDictionary, options: [])"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            let budget \u003d try JSONDecoder().decode(Budget.self, from: budgetData)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            return budget"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            if error is DecodingError {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                log.warning(\"\"\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    StorageCouchBaseDB.getBudgetFromQuery():"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Encounter error decoding data from database."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Throwing StorageError."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                throw StorageError(message: \"Data loaded from database couldn\u0027t be decoded back as Budget.\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                log.warning(\"\"\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    StorageCouchBaseDB.getBudgetFromQuery():"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Encounter error loading data from database."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Throwing StorageError."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                throw StorageError(message: \"Budget data couldn\u0027t be loaded from database.\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 4,
      "Travis Ching Jia Yea": 105
    }
  },
  {
    "path": "bacon/model/storage/StorageCouchBaseDB+Prediction.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  StorageCouchBaseDB+Prediction.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  This file is an extension to StorageCouchBaseDB"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  that provides methods supporting Prediction activities."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  Created by Travis Ching Jia Yea on 17/4/19."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "import CouchbaseLiteSwift"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "extension StorageCouchBaseDB {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func getNumberOfPredictionsInDatabase() -\u003e Double {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return Double(predictionDatabase.count)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func clearPredictionDatabase() throws {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            try predictionDatabase.delete()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            // Reinitialize database"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            predictionDatabase \u003d try StorageCouchBaseDB.openOrCreateEmbeddedDatabase(name: .predictions)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            log.info(\"Entered method StorageCouchBaseDB.clearPredictionDatabase()\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            if error is StorageError {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                log.warning(\"\"\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    StorageCouchBaseDB.clearPredictionDatabase():"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    Encounter error while reinitializing prediction database."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    Throwing StorageError."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                throw error"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                log.warning(\"\"\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    StorageCouchBaseDB.clearPredictionDatabase():"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    Encounter error while clearing prediction database."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    Throwing StorageError."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                throw StorageError(message: \"Encounter error while clearing Prediction Database.\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func savePrediction(_ prediction: Prediction) throws {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            let predictionDocument \u003d try createMutableDocument(from: prediction)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            try predictionDatabase.saveDocument(predictionDocument)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            log.info(\"\"\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                StorageCouchBaseDB.savePrediction() with arguments:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                prediction\u003d\\(prediction)."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            if error is StorageError {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                throw error"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                log.warning(\"\"\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    StorageCouchBaseDB.savePrediction():"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    Encounter error saving prediction into database."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    Throwing StorageError."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                throw StorageError(message: \"Prediction couldn\u0027t be saved into database.\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadAllPredictions() throws -\u003e [Prediction] {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let query \u003d QueryBuilder.select(SelectResult.all())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            .from(DataSource.database(predictionDatabase))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            .orderBy(Ordering.property(Constants.rawDateKey).descending())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            StorageCouchBaseDB.loadAllPredictions()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return try getPredictionsFromQuery(query)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadPredictions(limit: Int) throws -\u003e [Prediction] {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let query \u003d QueryBuilder.select(SelectResult.all())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            .from(DataSource.database(predictionDatabase))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            .orderBy(Ordering.property(Constants.rawDateKey).descending())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            .limit(Expression.int(limit))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            StorageCouchBaseDB.loadAllPredictions() with arguments:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            limit\u003d\\(limit)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return try getPredictionsFromQuery(query)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    private func getPredictionsFromQuery(_ query: Query) throws -\u003e [Prediction] {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            var predictions: [Prediction] \u003d Array()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            for result in try query.execute().allResults() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                guard var predictionDictionary \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    result.toDictionary()[DatabaseCollections.predictions.rawValue] as? [String: Any] else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                        throw StorageError(message: \"Could not read Document loaded from database as Dictionary.\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                predictionDictionary.removeValue(forKey: Constants.rawDateKey)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                let predictionData \u003d try JSONSerialization.data(withJSONObject: predictionDictionary, options: [])"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                let currentPrediction \u003d try JSONDecoder().decode(Prediction.self, from: predictionData)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                predictions.append(currentPrediction)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            return predictions"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            if error is DecodingError {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                log.warning(\"\"\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    StorageCouchBaseDB.getPredictionsFromQuery():"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    Encounter error decoding data from database."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    Throwing StorageError."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                throw StorageError(message: \"Data loaded from database couldn\u0027t be decoded back as Prediction.\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                log.warning(\"\"\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    StorageCouchBaseDB.getPredictionsFromQuery():"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    Encounter error loading data from database."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    Throwing StorageError."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                throw StorageError(message: \"Predictions data couldn\u0027t be loaded from database.\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 122
    }
  },
  {
    "path": "bacon/model/storage/StorageCouchBaseDB+TagAssociation.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  StorageCouchBaseDB+TagAssociation.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  This file is an extension to StorageCouchBaseDB"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  that implements database schema for tag-transaction association."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Created by Travis Ching Jia Yea on 13/4/19."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "import CouchbaseLiteSwift"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "extension StorageCouchBaseDB {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // To be called when transactions are created by the user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func associateTransactionWithTags(for transaction: Transaction, withId uid: String) throws {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        for tags in transaction.tags {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            try associateTransactionWithTag(forTransaction: uid, withTag: tags)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    private func associateTransactionWithTag(forTransaction uid: String, withTag tag: Tag) throws {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let associationDocument \u003d createMutableDocument(forTransaction: uid, withTag: tag)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            try tagAssociationDatabase.saveDocument(associationDocument)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            log.info(\"\"\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                StorageCouchBaseDB.associateTransactionWithTag() with arguments:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                uid\u003d\\(uid) tag\u003d\\(tag)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            log.warning(\"\"\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                StorageCouchBaseDB.associateTransactionWithTag():"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Encounter error saving transaction-tag association into database."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Throwing StorageError."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            throw StorageError(message: \"Transaction-tag association couldn\u0027t be saved into database.\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    private func getQueryOfSpecifiedTag(_ tag: Tag) -\u003e Query {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let query \u003d QueryBuilder.select(SelectResult.all(), SelectResult.expression(Meta.id))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .from(DataSource.database(tagAssociationDatabase))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            .where(Expression.property(Constants.tagValueKey).equalTo(Expression.string(tag.internalValue)))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return query"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// Retrieves all transaction ids with the specified tag"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func getTransactionIdsWithTag(_ tag: Tag) throws -\u003e [String] {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let query \u003d getQueryOfSpecifiedTag(tag)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Retrieve all transaction ids with this tag"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let transactionIds \u003d try getTransactionIdsFromQuery(query)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return transactionIds"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// Retrieves all transaction ids with the specified tag"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// As well as remove all associations with the specified tag"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func getAndDeleteTransactionIdsWithTag(_ tag: Tag) throws -\u003e [String] {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let query \u003d getQueryOfSpecifiedTag(tag)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Retrieve all transaction ids with this tag"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let transactionIds \u003d try getTransactionIdsFromQuery(query)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Remove all associations of this tag"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try clearAssociations(try getAssociationIdsFromQuery(query))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return transactionIds"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    private func getAssociationIdsFromQuery(_ query: Query) throws -\u003e [String] {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            var associations: [String] \u003d Array()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            for result in try query.execute().allResults() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                // Retrieve the id of the association in the database"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                guard let associationDatabaseId \u003d result.string(forKey: \"id\") else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    throw StorageError(message: \"Could not retrieve UID of transaction-tag association from database.\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                associations.append(associationDatabaseId)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            return associations"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            log.warning(\"\"\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                StorageCouchBaseDB.getAssociationIdsFromQuery():"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Encounter error loading associations from database."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Throwing StorageError."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            throw StorageError(message: \"Transaction-Tag association couldn\u0027t be loaded from database.\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    private func getTransactionIdsFromQuery(_ query: Query) throws -\u003e [String] {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            var transactions: [String] \u003d Array()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            for result in try query.execute().allResults() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                guard var associationDictionary \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    result.toDictionary()[DatabaseCollections.tagAssociation.rawValue] as? [String: Any] else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                        throw StorageError(message: \"Could not read Document loaded from database as Dictionary.\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                guard let transactionId \u003d associationDictionary[Constants.transactionKey] as? String else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    throw StorageError(message: \"Could not retrieve transaction Id from document.\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                transactions.append(transactionId)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            return transactions"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            log.warning(\"\"\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                StorageCouchBaseDB.getTransactionIdsFromQuery():"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Encounter error loading associations from database."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Throwing StorageError."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            throw StorageError(message: \"Transaction-Tag association couldn\u0027t be loaded from database.\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    private func getAllAssociationIdsOfTransaction(withId uid: String) throws -\u003e [String] {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Get all associations stored in the database that belongs to this transaction"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let query \u003d QueryBuilder.select(SelectResult.all(), SelectResult.expression(Meta.id))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .from(DataSource.database(tagAssociationDatabase))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .where(Expression.property(Constants.transactionKey).equalTo(Expression.string(uid)))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let documentIds \u003d try getAssociationIdsFromQuery(query)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            StorageCouchBaseDB.getAllAssociationIdsOfTransaction() with argument:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            uid:\\(uid)."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return documentIds"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // To be called when transactions are deleted by the user"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func clearAssociationsOfTransaction(uid: String) throws {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Get all associations\u0027 uid stored in the database that belongs to this transaction"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let documentIds \u003d try getAllAssociationIdsOfTransaction(withId: uid)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            StorageCouchBaseDB.clearAssociationsOfTransaction() with argument:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            uid:\\(uid)."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try clearAssociations(documentIds)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func clearAssociations(_ documentIds: [String]) throws {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        for documentId in documentIds {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            // Fetch the specific document from database"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            guard let associationDocument \u003d tagAssociationDatabase.document(withID: documentId) else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                log.warning(\"\"\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    StorageCouchBaseDB.clearAssociations():"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Encounter error clearing tag-transaction association from database."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Unable to retrieve association document in database using id."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Throwing StorageError."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                throw StorageError(message: \"\"\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Unable to retrieve association document in database using id."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            // Delete the document"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                try tagAssociationDatabase.deleteDocument(associationDocument)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            } catch {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                log.warning(\"\"\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    StorageCouchBaseDB.clearAssociations():"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Encounter error deleting tag-transaction association from database."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Throwing StorageError."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                throw StorageError(message: \"\"\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Encounter error deleting tag-transaction association from database."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // To be called when transaction is updated by the user."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // Use case : 1. Tags of the specific transaction has been removed."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    //            2. New tags have been added to the transaction."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func updateTransactionTagAssociation(for transaction: Transaction, withId uid: String) throws {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let associationDocumentIds \u003d try getAllAssociationIdsOfTransaction(withId: uid)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        var newTags \u003d transaction.tags"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            StorageCouchBaseDB.updateTransactionTagAssociation() with argument:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            transaction:\\(transaction) uid:\\(uid)."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // ----------------------"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Check for use case (1)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        for documentIds in associationDocumentIds {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            // Fetch the specific document from database"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            guard let associationDocument \u003d tagAssociationDatabase.document(withID: documentIds) else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                log.warning(\"\"\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    StorageCouchBaseDB.clearTransactionAssociation():"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Encounter error updating tag-transaction association database."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Unable to retrieve association document in database using id."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Throwing StorageError."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                throw StorageError(message: \"\"\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Unable to retrieve association document in database using id."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            // Check to see if this tag association needs to be deleted"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            var currentTagIsRemoved \u003d true"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            for tags in newTags where tags.internalValue \u003d\u003d associationDocument.string(forKey: Constants.tagValueKey) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                // Tag still exists"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                currentTagIsRemoved \u003d false"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                newTags.remove(tags)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            if currentTagIsRemoved {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                // Delete the document"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                do {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    try tagAssociationDatabase.deleteDocument(associationDocument)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                } catch {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    log.warning(\"\"\""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                        StorageCouchBaseDB.updateTransactionTagAssociation():"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                        Encounter error deleting tag-transaction association from database."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                        Throwing StorageError."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                        \"\"\")"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    throw StorageError(message: \"\"\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                        Encounter error deleting tag-transaction association from database."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                        \"\"\")"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // ----------------------"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Check for use case (2)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        for tags in newTags {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            try associateTransactionWithTag(forTransaction: uid, withTag: tags)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 19,
      "Fabian": 2,
      "Travis Ching Jia Yea": 200
    }
  },
  {
    "path": "bacon/model/storage/StorageCouchBaseDB+Transaction.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  StorageCouchBaseDB+Transaction.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  This file is an extension to StorageCouchBaseDB"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  that provides methods supporting Transaction activities."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Created by Travis Ching Jia Yea on 8/4/19."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "import CouchbaseLiteSwift"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "// swiftlint:disable file_length"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "extension StorageCouchBaseDB {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func getNumberOfTransactionsInDatabase() -\u003e Double {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return Double(transactionDatabase.count)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func clearTransactionDatabase() throws {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            try transactionDatabase.delete()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            try tagAssociationDatabase.delete()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            transactionIdMapping.removeAll()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            // Reinitialize database"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            transactionDatabase \u003d try StorageCouchBaseDB.openOrCreateEmbeddedDatabase(name: .transactions)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            tagAssociationDatabase \u003d try StorageCouchBaseDB.openOrCreateEmbeddedDatabase(name: .tagAssociation)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            log.info(\"Entered method StorageCouchBaseDB.clearTransactionDatabase()\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            if error is StorageError {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                log.warning(\"\"\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    StorageCouchBaseDB.clearTransactionDatabase():"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Encounter error while reinitializing transaction database."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Throwing StorageError."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                throw error"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                log.warning(\"\"\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    StorageCouchBaseDB.clearTransactionDatabase():"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Encounter error while clearing transaction database."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Throwing StorageError."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                throw StorageError(message: \"Encounter error while clearing Transaction Database.\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func saveTransaction(_ transaction: Transaction) throws {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            let transactionDocument \u003d try createMutableDocument(from: transaction)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            try transactionDatabase.saveDocument(transactionDocument)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            log.info(\"\"\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                StorageCouchBaseDB.saveTransaction() with arguments:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                transaction\u003d\\(transaction)."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            let transactionId \u003d transactionDocument.id"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            try associateTransactionWithTags(for: transaction, withId: transactionId)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            if error is StorageError {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                throw error"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                log.warning(\"\"\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    StorageCouchBaseDB.saveTransaction():"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Encounter error saving transaction into database."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Throwing StorageError."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                throw StorageError(message: \"Transaction couldn\u0027t be saved into database.\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func updateTransaction(_ transaction: Transaction) throws {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Fetch the specific document from database"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        guard let transactionId \u003d transactionIdMapping[transaction] else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            log.warning(\"\"\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                StorageCouchBaseDB.updateTransaction():"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Encounter error updating transaction in database."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Unable to find mapping of transaction object to its unique id in the database."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Throwing StorageError."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            throw StorageError(message: \"\"\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Unable to find mapping of transaction object to its unique id in the database."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let transactionDocument \u003d try createMutableDocument(from: transaction, uid: transactionId)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            StorageCouchBaseDB.updateTransaction() with argument:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            transaction:\\(transaction)."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Update the document"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            try transactionDatabase.saveDocument(transactionDocument)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            try updateTransactionTagAssociation(for: transaction, withId: transactionId)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            log.warning(\"\"\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                StorageCouchBaseDB.updateTransaction() with argument:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                transaction:\\(transaction)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Encounter error updating transaction in database."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Throwing StorageError."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            throw StorageError(message: \"\"\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Encounter error updating \\(transaction) in database."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func deleteTransaction(_ transaction: Transaction) throws {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Fetch the specific document from database"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        guard let transactionId \u003d transactionIdMapping[transaction] else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            log.warning(\"\"\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                StorageCouchBaseDB.deleteTransaction():"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Encounter error deleting transaction from database."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Unable to find mapping of transaction object to its unique id in the database."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Throwing StorageError."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            throw StorageError(message: \"\"\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Unable to find mapping of transaction object to its unique id in the database."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        guard let transactionDocument \u003d transactionDatabase.document(withID: transactionId) else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            log.warning(\"\"\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                StorageCouchBaseDB.deleteTransaction():"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Encounter error deleting transaction from database."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Unable to retrieve transaction document in database using id from mapping."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Throwing StorageError."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            throw StorageError(message: \"\"\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Unable to retrieve transaction document in database using id from mapping."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            StorageCouchBaseDB.deleteTransaction() with argument:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            transaction:\\(transaction)."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Delete the document"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            try transactionDatabase.deleteDocument(transactionDocument)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            // Delete the mapping"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            transactionIdMapping.removeValue(forKey: transaction)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            try clearAssociationsOfTransaction(uid: transactionId)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            log.warning(\"\"\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                StorageCouchBaseDB.deleteTransaction() with argument:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                transaction:\\(transaction)."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Encounter error deleting transaction from database."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Throwing StorageError."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            throw StorageError(message: \"\"\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Encounter error deleting \\(transaction) from database."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func deleteAllRecurringInstances(of transaction: Transaction) throws {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        guard transaction.frequency.nature \u003d\u003d .recurring else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            throw InvalidArgumentError(message: \"\"\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                deleteAllRecurringInstances() requires transaction to be recurring."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Retrieve the id of all the recurring instances"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        guard let recurringId \u003d transaction.recurringId else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            fatalError(\"transaction is guarded to be recurring, recurringId should not be nil.\")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let query \u003d QueryBuilder.select(SelectResult.expression(Meta.id))"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            .from(DataSource.database(transactionDatabase))"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            .where(Expression.property(Constants.recurringIdKey).equalTo(Expression.string(recurringId.uuidString)))"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            .orderBy(Ordering.property(Constants.rawDateKey).descending())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let transactionIds \u003d try getTransactionIdsFromQuery(query)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        for transactionId in transactionIds {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            guard let transactionDocument \u003d transactionDatabase.document(withID: transactionId) else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                log.warning(\"\"\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    StorageCouchBaseDB.deleteAllRecurringInstances():"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    Encounter error deleting recurring transaction from database."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    Unable to retrieve transaction document in database using id."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    Throwing StorageError."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                throw StorageError(message: \"\"\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    Unable to retrieve transaction document in database using id."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            // Delete the current transaction from database"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            try transactionDatabase.deleteDocument(transactionDocument)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            // Delete the association of tags to this transaction from tag-association database"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            try clearAssociationsOfTransaction(uid: transactionId)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            StorageCouchBaseDB.loadAllTransactions()"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // To be called when a tag has been deleted from TagManager"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func deleteTagFromTransactions(_ tag: Tag) throws {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let transactionIds \u003d try getAndDeleteTransactionIdsWithTag(tag)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            StorageCouchBaseDB.deleteTagFromTransactions() with argument:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            tag:\\(tag)."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Update transactions in database to remove this tag"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let transactions \u003d try loadTransactionsFromIds(transactionIds)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        for (currentTransaction, transactionId) in transactions {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            // Remove the tag from transaction"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            var newTags \u003d currentTransaction.tags"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            newTags.remove(tag)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            try currentTransaction.edit(tags: newTags)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            // Update transaction to database"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            let updatedTransactionDocument \u003d try createMutableDocument(from: currentTransaction, uid: transactionId)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                try transactionDatabase.saveDocument(updatedTransactionDocument)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            } catch {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                log.warning(\"\"\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    StorageCouchBaseDB.deleteTagFromTransactions() with argument:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    tag:\\(tag)."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Encounter error updating transaction after removing tag to database."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Throwing StorageError."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                throw StorageError(message: \"\"\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    Encounter error saving updated transaction after removing tag to database."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    private func getTransactionIdsFromQuery(_ query: Query) throws -\u003e [String] {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            var transactionIds: [String] \u003d []"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            for result in try query.execute().allResults() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                guard let currentTransactionId \u003d result.string(forKey: \"id\") else {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    throw StorageError(message: \"Could not retrieve UID of transaction from database.\")"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                transactionIds.append(currentTransactionId)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            return transactionIds"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            log.warning(\"\"\""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                StorageCouchBaseDB.getTransactionIdsFromQuery():"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                Encounter error loading data and retrieving its id from database."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                Throwing StorageError."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            throw StorageError(message: \"Transactions id couldn\u0027t be loaded from database.\")"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    private func getTransactionsFromQuery(_ query: Query,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                          recordId: Bool \u003d true) throws -\u003e [Transaction] {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Every time database is called to load Transactions, we clear the transaction id mapping"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // dictionary."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // We only allow front end to deal with transactions per call to load method."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        transactionIdMapping.removeAll(keepingCapacity: true)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            var transactions: [Transaction] \u003d Array()"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            for result in try query.execute().allResults() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                guard var transactionDictionary \u003d"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    result.toDictionary()[DatabaseCollections.transactions.rawValue] as? [String: Any] else {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                        throw StorageError(message: \"Could not read Document loaded from database as Dictionary.\")"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                transactionDictionary.removeValue(forKey: Constants.rawDateKey)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                let transactionData \u003d try JSONSerialization.data(withJSONObject: transactionDictionary, options: [])"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                let currentTransaction \u003d try JSONDecoder().decode(Transaction.self, from: transactionData)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                transactions.append(currentTransaction)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                // Retrieve and store the mapping of transaction to its id in database"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                if recordId {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    guard let transactionDatabaseId \u003d result.string(forKey: \"id\") else {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                        throw StorageError(message: \"Could not retrieve UID of transaction from database.\")"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    transactionIdMapping.updateValue(transactionDatabaseId,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                     forKey: currentTransaction)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            return transactions"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            if error is DecodingError {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                log.warning(\"\"\""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    StorageCouchBaseDB.getTransactionsFromQuery():"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Encounter error decoding data from database."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Throwing StorageError."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                throw StorageError(message: \"Data loaded from database couldn\u0027t be decoded back as Transactions.\")"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                log.warning(\"\"\""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    StorageCouchBaseDB.getTransactionsFromQuery():"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Encounter error loading data from database."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Throwing StorageError."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                throw StorageError(message: \"Transactions data couldn\u0027t be loaded from database.\")"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    private func loadTransactionsFromIds(_ transactionIds: [String]) throws"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        -\u003e [(transaction: Transaction, uid: String)] {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        var transactionAndIdCollection: [(transaction: Transaction, uid: String)] \u003d []"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        log.info(\"loadTransactionsFromIds():\")"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        for transactionId in transactionIds {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                // Fetch the specific document from database"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                guard let transactionDocument \u003d transactionDatabase.document(withID: transactionId) else {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    log.warning(\"\"\""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                        StorageCouchBaseDB.loadTransactionsFromIds():"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                        Encounter error removing tag from transaction in database."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                        Unable to retrieve transaction document in database using id."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                        Throwing StorageError."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                        \"\"\")"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    throw StorageError(message: \"\"\""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                        Unable to retrieve transaction document in database using id."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                        \"\"\")"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                // Reconstruct document as Transaction object"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                let transactionDictionary \u003d transactionDocument.toDictionary()"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                let transactionData \u003d try JSONSerialization.data(withJSONObject: transactionDictionary, options: [])"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                let currentTransaction \u003d try JSONDecoder().decode(Transaction.self, from: transactionData)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                transactionAndIdCollection.append((transaction: currentTransaction, uid: transactionId))"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            } catch {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                log.warning(\"\"\""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    StorageCouchBaseDB.loadTransactionsFromIds():"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    Encounter error reconstructing transaction objects."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                throw StorageError(message: \"\"\""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    Encounter error reconstructing transaction objects by loading from database using id."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return transactionAndIdCollection"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func loadAllTransactions() throws -\u003e [Transaction] {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let query \u003d QueryBuilder.select(SelectResult.all(), SelectResult.expression(Meta.id))"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .from(DataSource.database(transactionDatabase))"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .orderBy(Ordering.property(Constants.rawDateKey).descending())"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            StorageCouchBaseDB.loadAllTransactions()"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return try getTransactionsFromQuery(query)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func loadTransactions(limit: Int) throws -\u003e [Transaction] {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let query \u003d QueryBuilder.select(SelectResult.all(), SelectResult.expression(Meta.id))"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .from(DataSource.database(transactionDatabase))"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .orderBy(Ordering.property(Constants.rawDateKey).descending())"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .limit(Expression.int(limit))"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            StorageCouchBaseDB.loadTransactions() with arguments:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            limit\u003d\\(limit)."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return try getTransactionsFromQuery(query)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func loadTransactions(after date: Date, limit: Int) throws -\u003e [Transaction] {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let query \u003d QueryBuilder.select(SelectResult.all(), SelectResult.expression(Meta.id))"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .from(DataSource.database(transactionDatabase))"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .where(Expression.property(Constants.rawDateKey).greaterThan(Expression.date(date)))"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .orderBy(Ordering.property(Constants.rawDateKey).descending())"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .limit(Expression.int(limit))"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            StorageCouchBaseDB.loadTransactions() with arguments:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            after\u003d\\(date) limit\u003d\\(limit)."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return try getTransactionsFromQuery(query)"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func loadTransactions(before date: Date, limit: Int) throws -\u003e [Transaction] {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let query \u003d QueryBuilder.select(SelectResult.all(), SelectResult.expression(Meta.id))"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .from(DataSource.database(transactionDatabase))"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .where(Expression.property(Constants.rawDateKey).lessThan(Expression.date(date)))"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .orderBy(Ordering.property(Constants.rawDateKey).descending())"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .limit(Expression.int(limit))"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            StorageCouchBaseDB.loadTransactions() with arguments:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            before\u003d\\(date) limit\u003d\\(limit)."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return try getTransactionsFromQuery(query)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func loadTransactions(from fromDate: Date, to toDate: Date) throws -\u003e [Transaction] {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let query \u003d QueryBuilder.select(SelectResult.all(), SelectResult.expression(Meta.id))"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .from(DataSource.database(transactionDatabase))"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .where(Expression.property(Constants.rawDateKey)"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                .between(Expression.date(fromDate), and: Expression.date(toDate)))"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .orderBy(Ordering.property(Constants.rawDateKey).descending())"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            StorageCouchBaseDB.loadTransactions() with arguments:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            from\u003d\\(fromDate) to\u003d\\(toDate)."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return try getTransactionsFromQuery(query)"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func loadTransactions(ofType type: TransactionType, limit: Int) throws -\u003e [Transaction] {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let query \u003d QueryBuilder.select(SelectResult.all(), SelectResult.expression(Meta.id))"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .from(DataSource.database(transactionDatabase))"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .where(Expression.property(Constants.typeKey).equalTo(Expression.string(type.rawValue)))"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .orderBy(Ordering.property(Constants.rawDateKey).descending())"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .limit(Expression.int(limit))"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            StorageCouchBaseDB.loadTransactions() with arguments:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            ofType\u003d\\(type) limit\u003d\\(limit)."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return try getTransactionsFromQuery(query)"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadTransactions(ofTag tag: Tag) throws -\u003e [Transaction] {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let transactionIds \u003d try getTransactionIdsWithTag(tag)"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let transactionIdTuples \u003d try loadTransactionsFromIds(transactionIds)"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        var transactions: [Transaction] \u003d []"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        for (transaction, _) in transactionIdTuples {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            transactions.append(transaction)"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            StorageCouchBaseDB.loadTransactions() with arguments:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            ofTag\u003d\\(tag)."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return transactions"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadFirstRecurringInstance(of transaction: Transaction) throws -\u003e Transaction {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        guard transaction.frequency.nature \u003d\u003d .recurring else {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            throw InvalidArgumentError(message: \"\"\""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                loadFirstRecurringInstance() requires transaction to be recurring."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        guard let recurringId \u003d transaction.recurringId else {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            fatalError(\"transaction is guarded to be recurring, recurringId should not be nil.\")"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let query \u003d QueryBuilder.select(SelectResult.all())"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            .from(DataSource.database(transactionDatabase))"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            .where(Expression.property(Constants.recurringIdKey).equalTo(Expression.string(recurringId.uuidString)))"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            .orderBy(Ordering.property(Constants.rawDateKey).ascending())"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            .limit(Expression.int(1))"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let loadedTransaction \u003d try getTransactionsFromQuery(query, recordId: false)"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        guard let firstInstance \u003d loadedTransaction.first else {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            // As all recurring transaction has at least one instance"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            // It is guaranteed that there should be a first nstance"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            fatalError(\"A recurring transaction is guaranteed to have at least one instance.\")"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return firstInstance"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "}"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "// swiftlint:enable file_length"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 151,
      "Travis Ching Jia Yea": 288
    }
  },
  {
    "path": "bacon/model/storage/StorageCouchBaseDB.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  StorageMongoDB.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Underlying class of StorageManager to provide all saving and loading functionalities."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Uses CouchBaseLiteSwfit to provide a full-featured embedded NoSQL database that runs locally."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  As the embedded database is saved into the Document Directory,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  user\u0027s data will be automatically backed up to their icloud."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  StorageCouchBaseDB is implemented as a Singleton class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Created by Travis Ching Jia Yea on 19/3/19."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "import CouchbaseLiteSwift"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "enum DatabaseCollections: String {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    case transactions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    case tagAssociation"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    case budget"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    case predictions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "class StorageCouchBaseDB {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let sharedDatabase: StorageCouchBaseDB? \u003d StorageCouchBaseDB()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // MARK: - Properties"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    var transactionDatabase: Database"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    var tagAssociationDatabase: Database"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    var budgetDatabase: Database"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    var predictionDatabase: Database"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // Dictionary to provide a mapping from instantiated `Transaction` objects"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // to their unique id in the databse."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    var transactionIdMapping: [Transaction: String]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    private init?() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Initialize database"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            transactionDatabase \u003d try StorageCouchBaseDB.openOrCreateEmbeddedDatabase(name: .transactions)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            tagAssociationDatabase \u003d try StorageCouchBaseDB.openOrCreateEmbeddedDatabase(name: .tagAssociation)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            budgetDatabase \u003d try StorageCouchBaseDB.openOrCreateEmbeddedDatabase(name: .budget)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            predictionDatabase \u003d try StorageCouchBaseDB.openOrCreateEmbeddedDatabase(name: .predictions)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            transactionIdMapping \u003d [:]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            log.info(\"\"\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                StorageCouchBaseDB.init() :"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Initializing singleton instance of couchbase database."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            log.warning(\"\"\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                StorageManager.init() :"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Encounter error initializing couchbase database."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            return nil"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static func openOrCreateEmbeddedDatabase(name: DatabaseCollections) throws -\u003e Database {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            let options \u003d DatabaseConfiguration()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            // Get the path to the Database"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            let urls \u003d FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            guard let documentDirectory \u003d urls.first else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                throw InitializationError(message: \"unable to access document directory!\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            let databaseFolderUrl \u003d documentDirectory.appendingPathComponent(name.rawValue, isDirectory: true)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            let databaseFolderPath \u003d try getOrCreateFolderPath(for: databaseFolderUrl)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            // Set the folder path for the CouchbaseLite Database"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            options.directory \u003d databaseFolderPath"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            // Create a new database or get handle to existing database at specified path"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            log.info(\"\"\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                StorageCouchBaseDB.openOrCreateEmbeddedDatabase() with arguments:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                name\u003d\\(name) directory path\u003d\\(databaseFolderPath)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            return try Database(name: name.rawValue, config: options)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            if error is InitializationError {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                throw error"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                log.warning(\"\"\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                    StorageCouchBaseDB.openOrCreateEmbeddedDatabase():"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Encounter error while accessing/creating Database."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Throwing InitializationError."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                throw InitializationError(message: \"unable to access embedded \\(name.rawValue) mobile database.\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    private static func getOrCreateFolderPath(for url: URL) throws -\u003e String {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let folderPath \u003d url.path"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let fileManager \u003d FileManager.default"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        if !fileManager.fileExists(atPath: folderPath) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            // Create folder if non-existent"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                try fileManager.createDirectory(atPath: folderPath,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                withIntermediateDirectories: true,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                attributes: nil)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            } catch {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                log.warning(\"\"\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                    StorageCouchBaseDB.getOrCreateFolderPath()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Encounter error while creating directory at \\(folderPath)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    Throwing InitializationError."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                throw InitializationError(message:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    \"Database directory path is non-existent and encountered error creating directory: \\(folderPath)\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return folderPath"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // Method to encode a Transaction class to its MutableDocument counterpart"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func createMutableDocument(from transaction: Transaction, uid: String? \u003d nil) throws -\u003e MutableDocument {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            let transactionData \u003d try transaction.asDictionary()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            // if uid is not provided, a random uid will be assigned to the document"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            let transactionDocument \u003d MutableDocument(id: uid, data: transactionData)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            // Even though transaction is encoded with a date,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            // as the encoded date is in a string format,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            // comparison is not supported in the database level."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            // However CouchBase provides support for date objects,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            // so the date is explicitly set here after converting a `Transaction`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            // class into a document."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            transactionDocument.setDate(transaction.date, forKey: Constants.rawDateKey)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            return transactionDocument"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            log.warning(\"\"\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                StorageCouchBaseDB.createMutableDocument(): transaction"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                Encounter error encoding transaction into MutableDocument."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                Throwing StorageError."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            throw StorageError(message: \"Transaction couldn\u0027t be encoded into MutableDocument.\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // Method to encode a Budget struct to its MutableDocument counterpart"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func createMutableDocument(from budget: Budget) throws -\u003e MutableDocument {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            let budgetData \u003d try budget.asDictionary()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            let budgetDocument \u003d MutableDocument(id: Constants.budgetUID, data: budgetData)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            return budgetDocument"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            log.warning(\"\"\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                StorageCouchBaseDB.createMutableDocument(): budget"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Encounter error encoding budget into MutableDocument."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Throwing StorageError."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            throw StorageError(message: \"Budget couldn\u0027t be encoded into MutableDocument.\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // Method to encode a Prediction struct to its MutableDocument counterpart"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func createMutableDocument(from prediction: Prediction) throws -\u003e MutableDocument {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            let predictionData \u003d try prediction.asDictionary()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            let predictionDocument \u003d MutableDocument(data: predictionData)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            // Even though prediction is encoded with a date,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            // as the encoded date is in a string format,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            // comparison is not supported in the database level."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            // However CouchBase provides support for date objects,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            // so the date is explicitly set here after converting a `Prediction`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            // struct into a document."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            predictionDocument.setDate(prediction.time, forKey: Constants.rawDateKey)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            return predictionDocument"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            log.warning(\"\"\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                StorageCouchBaseDB.createMutableDocument(): prediction"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                Encounter error encoding prediction into MutableDocument."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                Throwing StorageError."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            throw StorageError(message: \"Prediction couldn\u0027t be encoded into MutableDocument.\")"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // Method to encode a Transaction-Tag association to its MutableDocument counterpart"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func createMutableDocument(forTransaction transactionId: String, withTag tag: Tag) -\u003e MutableDocument {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let mutableDocument \u003d MutableDocument()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            .setString(transactionId, forKey: Constants.transactionKey)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            .setString(tag.internalValue, forKey: Constants.tagValueKey)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return mutableDocument"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "// Extension for Encodable to encode codable structs into a dictionary"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "extension Encodable {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func asDictionary() throws -\u003e [String: Any] {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let data \u003d try JSONEncoder().encode(self)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        guard let dictionary \u003d try JSONSerialization.jsonObject(with: data, options: .allowFragments)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            as? [String: Any] else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            throw NSError()"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return dictionary"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 44,
      "kumuwu": 6,
      "Fabian": 3,
      "Travis Ching Jia Yea": 143
    }
  },
  {
    "path": "bacon/model/storage/StorageManager.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  StorageManager.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Provides an abstraction over the underlying storage library dependacies."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  Localizes any changes needed when swapping out the underlying storage library."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Travis Ching Jia Yea on 19/3/19."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "class StorageManager: StorageManagerInterface {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    private let concreteStorage: StorageCouchBaseDB"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    init() throws {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        guard let sharedDatabase \u003d StorageCouchBaseDB.sharedDatabase else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            throw StorageError(message: \"Unable to access singleton instance of concrete database class\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        concreteStorage \u003d sharedDatabase"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            StorageManager initialized using StorageManager.init()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // MARK: Transaction Related"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func getNumberOfTransactionsInDatabase() -\u003e Double {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return concreteStorage.getNumberOfTransactionsInDatabase()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func clearTransactionDatabase() throws {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return try concreteStorage.clearTransactionDatabase()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func saveTransaction(_ transaction: Transaction) throws {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try concreteStorage.saveTransaction(transaction)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func deleteTransaction(_ transaction: Transaction) throws {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try concreteStorage.deleteTransaction(transaction)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func deleteAllRecurringInstances(of transaction: Transaction) throws {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try concreteStorage.deleteAllRecurringInstances(of: transaction)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func updateTransaction(_ transaction: Transaction) throws {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try concreteStorage.updateTransaction(transaction)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func loadAllTransactions() throws -\u003e [Transaction] {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return try concreteStorage.loadAllTransactions()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func loadTransactions(limit: Int) throws -\u003e [Transaction] {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        guard limit \u003e\u003d 0 else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            throw InvalidArgumentError(message: \"\"\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Limit: \\(limit) passed into LoadTransactions(limit..) should be non-negative."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return try concreteStorage.loadTransactions(limit: limit)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func loadTransactions(after date: Date, limit: Int) throws -\u003e [Transaction] {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        guard limit \u003e\u003d 0 else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            throw InvalidArgumentError(message: \"\"\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Limit: \\(limit) passed into LoadTransactions(after..) should be non-negative."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return try concreteStorage.loadTransactions(after: date, limit: limit)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func loadTransactions(before date: Date, limit: Int) throws -\u003e [Transaction] {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        guard limit \u003e\u003d 0 else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            throw InvalidArgumentError(message: \"\"\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Limit: \\(limit) passed into LoadTransactions(before..) should be non-negative."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return try concreteStorage.loadTransactions(before: date, limit: limit)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func loadTransactions(from fromDate: Date, to toDate: Date) throws -\u003e [Transaction] {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return try concreteStorage.loadTransactions(from: fromDate, to: toDate)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func loadTransactions(ofType type: TransactionType, limit: Int) throws -\u003e [Transaction] {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        guard limit \u003e\u003d 0 else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            throw InvalidArgumentError(message: \"\"\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                Limit: \\(limit) passed into LoadTransactions(ofType..) should be non-negative."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return try concreteStorage.loadTransactions(ofType: type, limit: limit)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadTransactions(ofTag tag: Tag) throws -\u003e [Transaction] {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return try concreteStorage.loadTransactions(ofTag: tag)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadFirstRecurringInstance(of transaction: Transaction) throws -\u003e Transaction {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return try concreteStorage.loadFirstRecurringInstance(of: transaction)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // MARK: Budget Related"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func getNumberOfBudgetsInDatabase() -\u003e Double {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return concreteStorage.getNumberOfBudgetsInDatabase()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func clearBudgetDatabase() throws {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return try concreteStorage.clearBudgetDatabase()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func saveBudget(_ budget: Budget) throws {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try concreteStorage.saveBudget(budget)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadBudget() throws -\u003e Budget {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return try concreteStorage.loadBudget()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // MARK: Tag Related"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func deleteTagFromTransactions(_ tag: Tag) throws {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try concreteStorage.deleteTagFromTransactions(tag)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // MARK: Prediction Related"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func getNumberOfPredictionsInDatabase() -\u003e Double {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return concreteStorage.getNumberOfPredictionsInDatabase()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func clearPredictionDatabase() throws {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try concreteStorage.clearPredictionDatabase()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func savePrediction(_ prediction: Prediction) throws {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try concreteStorage.savePrediction(prediction)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadAllPredictions() throws -\u003e [Prediction] {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return try concreteStorage.loadAllPredictions()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadPredictions(limit: Int) throws -\u003e [Prediction] {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        guard limit \u003e\u003d 0 else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            throw InvalidArgumentError(message: \"\"\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                Limit: \\(limit) passed into loadPredictions(limit..) should be non-negative."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return try concreteStorage.loadPredictions(limit: limit)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 56,
      "Fabian": 16,
      "Travis Ching Jia Yea": 80
    }
  },
  {
    "path": "bacon/model/storage/StorageManagerInterface.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  StorageManagerInterface.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  An API for all storage related functionalities."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  Created by Psychedelia on 17/4/19."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "protocol StorageManagerInterface {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // MARK: Transaction Related"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Returns the number of transactions in the database."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func getNumberOfTransactionsInDatabase() -\u003e Double"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Clears the database of transactions."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: `StorageError` if an error is encountered during the operation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func clearTransactionDatabase() throws"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Saves a Transaction to the database."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: `StorageError` if an error is encountered during the operation."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func saveTransaction(_ transaction: Transaction) throws"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Deletes a Transaction."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// This should only be called on Transactions that are loaded out from the database."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: `StorageError` if this is called and passed a new Transaction object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// instantiated directly at run-time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func deleteTransaction(_ transaction: Transaction) throws"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Deletes all Transaction instances with the same recurring ID."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func deleteAllRecurringInstances(of transaction: Transaction) throws"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Updates a Transaction."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// This should only be called on Transactions that are loaded out from the database."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: `StorageError` if this is called and passed a new Transaction object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// instantiated directly at run-time."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func updateTransaction(_ transaction: Transaction) throws"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Loads all the Transactions in the database."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// The caller is responsible for ensuring that doing so will not"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// result in a memory warning or error."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Returns: All the transactions saved in the database in reverse chronological order."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    ///     If there are no transactions saved, an empty array is returned."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: `StorageError` if an error is encountered during the operation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadAllTransactions() throws -\u003e [Transaction]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Loads a collection of Transaction objects."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// - Parameters:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - limit: The number of transactions to load. This must not be less than 0."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Returns: The specified number of transactions in reverse chronological order."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    ///     If there are no transactions saved, an empty array is returned."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// - Throws:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - `InvalidArgumentError` if limit \u003c 0."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - `StorageError` if an error is encountered during the operation."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadTransactions(limit: Int) throws -\u003e [Transaction]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Loads a collection of Transaction objects after the specified date."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// - Parameters:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - date: The boundary date."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - limit: The number of transactions to load. This must not be less than 0."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Returns: The specified number of transactions in reverse chronological order."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    ///     If there are no transactions saved, an empty array is returned."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// - Throws:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - `InvalidArgumentError` if limit \u003c 0."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - `StorageError` if an error is encountered during the operation."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadTransactions(after date: Date, limit: Int) throws -\u003e [Transaction]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Loads a collection of Transaction objects before the date specified."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// - Parameters:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - date: The boundary date."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - limit: The number of transaction to load. This must not be less than 0."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Returns: The specified number of transactions in reverse chronological order."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    ///     If there are no transactions saved, an empty array is returned."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// - Throws:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - `InvalidArgumentError` if limit \u003c 0."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - `StorageError` if an error is encountered during the operation."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadTransactions(before date: Date, limit: Int) throws -\u003e [Transaction]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Loads a collection of Transaction objects between the specified dates (inclusive)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// - Parameters:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - from: The start date."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - to: The end date."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Returns: All the transactions that fall between the fromDate and toDate (inclusive)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     in reverse chronological order. If there are no transactions in that period,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     an empty array is returned."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: `StorageError` if an error is encountered during the operation."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadTransactions(from fromDate: Date, to toDate: Date) throws -\u003e [Transaction]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Loads a collection of Transaction objects of the specified type."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// - Parameters:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    ///     - type: The transaction type."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - limit: The number of transactions to load. This must not be less than 0."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Returns: The specified number of transactions of the specified type in"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     reverse chronological order. If no transactions fulfill the requirement,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     an empty array is returned."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// - Throws:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - `InvalidArgumentError` if limit \u003c 0."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - `StorageError` if an error is encountered during the operation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadTransactions(ofType type: TransactionType, limit: Int) throws -\u003e [Transaction]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Loads a collection of Transaction objects with the tags specified."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// - Parameters:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    ///     - tags: The set of tags specified."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Returns: All transactions that have at least one of the tags specified in"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     reverse chronological order. If no transactions fulfill the requirement,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     an empty array is returned."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: `StorageError` if an error is encountered during the operation."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadTransactions(ofTag tag: Tag) throws -\u003e [Transaction]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Loads and returns the first Transaction instance of a recurring Transaction object."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Parameter transaction: This must be a recurring Transaction."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: `InvalidArgumentError` if `transaction` is a one-time Transaction object."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadFirstRecurringInstance(of transaction: Transaction) throws -\u003e Transaction"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // MARK: Budget Related"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Returns the number of budgets in the database."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func getNumberOfBudgetsInDatabase() -\u003e Double"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Clears the database of the budget."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: `StorageError` if an error is encountered during the operation."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func clearBudgetDatabase() throws"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Saves a budget to the database."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// There can only be at most 1 budget existing in the database."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Therefore, this will overwrite any existing budget data."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: `StorageError` if an error is encountered during the operation."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func saveBudget(_ budget: Budget) throws"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Returns the set budget."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: `StorageError` if there is no budget."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadBudget() throws -\u003e Budget"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // MARK: Tag Related"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// deleteTagFromTransactions will remove the specified tag"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// from all transactions associated with it."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func deleteTagFromTransactions(_ tag: Tag) throws"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // MARK: Prediction Related"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func getNumberOfPredictionsInDatabase() -\u003e Double"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func clearPredictionDatabase() throws"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func savePrediction(_ prediction: Prediction) throws"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadAllPredictions() throws -\u003e [Prediction]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadPredictions(limit: Int) throws -\u003e [Prediction]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 74,
      "Fabian": 72
    }
  },
  {
    "path": "bacon/model/tags/TagManager.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  TagManager.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  Tag and TagManager are defined in the same file"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  because we want one of Tag\u0027s init() methods to"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  remain fileprivate."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  This is to guard against accidentally initializing"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  a Tag object. Since Tag objects compute their"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  values through TagManager, initializing a Tag"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  directly will result in an error when its"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  computed property is accessed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 10/4/19."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "// swiftlint:disable file_length"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": "// MARK: Tag"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": "struct Tag: Codable, Comparable, Hashable {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // Internal values uniquely identify a Tag"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let internalValue: String"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let parentInternalValue: String?"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // Override computed properties: this improves testability by dissociating Tag from TagManager."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // Normally (in production), a Tag\u0027s value and parentValue properties are computed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // with reference to the singleton TagManager."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // These overriding properties allow for the creation of standalone Tags"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // that work independently of TagManager."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private var overriddenValue: String?"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private var overriddenParentValue: String?"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private var isParentValueOverridden: Bool \u003d false // We require an extra flag"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // for parentValue because parentValue can normally be nil anyway"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Returns the user-defined display value of a Tag, or an empty string if unavailable."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// The only period of unavailablility is when TagManager has not been fully instantiated."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// It should never be unavailable in normal usage."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private(set) var value: String {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        get {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            if let overriddenValue \u003d overriddenValue {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                return overriddenValue"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            if TagManager.inTestMode {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                return TagManager.cachedPersistentTagManagerTest?.getDisplayValue(of: internalValue) ?? \"\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                return TagManager.cachedPersistentTagManager?.getDisplayValue(of: internalValue) ?? \"\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        set(newValue) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            overriddenValue \u003d newValue"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Returns the user-defined display value of a Tag\u0027s parent."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Returns `nil` if a Tag does not have a parent, or an empty string if unavailable."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// The only period of unavailablility is when TagManager has not been fully instantiated."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// It should never be unavailable in normal usage."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private(set) var parentValue: String? {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        get {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            if isParentValueOverridden {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                return overriddenParentValue"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            // Guard against having no parent Tag"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard let parentInternalValue \u003d parentInternalValue else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                return nil"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            if TagManager.inTestMode {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                return TagManager.cachedPersistentTagManagerTest?.getDisplayValue(of: parentInternalValue) ?? \"\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                return TagManager.cachedPersistentTagManager?.getDisplayValue(of: parentInternalValue) ?? \"\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        set(newValue) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            overriddenParentValue \u003d newValue"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            isParentValueOverridden \u003d true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private enum CodingKeys: String, CodingKey {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case internalValue"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case parentInternalValue"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case overriddenValue"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case overriddenParentValue"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case isParentValueOverridden"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Initializes a Tag."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    fileprivate init(_ internalValue: String, parentInternalValue: String?) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        self.internalValue \u003d internalValue"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        self.parentInternalValue \u003d parentInternalValue"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Initializes a standalone Tag."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Standalone Tags work independently and are not associated to TagManager."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Its `value` and optional `parentValue` properties are specified during instantiation."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    init(_ value: String, parentValue: String? \u003d nil) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        overriddenValue \u003d value"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        overriddenParentValue \u003d parentValue"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        self.internalValue \u003d value"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        self.parentInternalValue \u003d parentValue !\u003d nil ? parentValue : nil"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Convenience computed property to represent whether a Tag is a child Tag."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    var isChild: Bool {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return parentValue !\u003d nil"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Convenience computed property to represent whether a Tag is a parent Tag."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    var isParent: Bool {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return !isChild"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // Exclude `manager` property from Equatable logic"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    static func \u003d\u003d (lhs: Tag, rhs: Tag) -\u003e Bool {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return lhs.internalValue \u003d\u003d rhs.internalValue \u0026\u0026 lhs.parentInternalValue \u003d\u003d rhs.parentInternalValue"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // Generally, we should only compare by the `value` property, since it\u0027s"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // not meaningful to compare children Tags (of different parents), or a child Tag with a parent Tag."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    static func \u003c (lhs: Tag, rhs: Tag) -\u003e Bool {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // 4 possible scenarios:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // 1) child vs child,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // 2) parent vs parent,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // 3) child vs parent,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // 4) parent vs child"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        if lhs.isChild \u0026\u0026 rhs.isChild {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            // Compare their `value` properties first, then compare their `parent` properties"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            if lhs.value !\u003d rhs.value {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                return lhs.value \u003c rhs.value"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            // 2 sub-scenarios: (1) same parent, (2) different parents"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard let lhsParent \u003d lhs.parentValue else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard let rhsParent \u003d rhs.parentValue else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            assert(lhsParent !\u003d rhsParent)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            return lhsParent \u003c rhsParent"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        } else if lhs.isParent \u0026\u0026 rhs.isParent {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            return lhs.value \u003c rhs.value"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        } else if lhs.isChild \u0026\u0026 rhs.isParent {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            // Compare their `value` properties first."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            // If equal, a parent Tag should come before a child Tag."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            if lhs.value !\u003d rhs.value {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                return lhs.value \u003c rhs.value"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            return false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        } else { // lhs.isParent \u0026\u0026 rhs.isChild"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            if lhs.value !\u003d rhs.value {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                return lhs.value \u003c rhs.value"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            return true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func hash(into hasher: inout Hasher) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        hasher.combine(internalValue)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        hasher.combine(parentInternalValue)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func toString() -\u003e String {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var tagName \u003d self.value"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if let parentName \u003d self.parentValue {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            tagName \u003d parentName + \"/\" + tagName"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return tagName"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Fabian"
        },
        "content": "// MARK: TagManager: TagManagerInterface"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Fabian"
        },
        "content": "class TagManager: Codable, Observable, TagManagerInterface {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // Support persistence"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private static let saveFileName \u003d \"TagManager\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private static let saveFileNameTest \u003d \"TagManagerTest\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private static let errorLoadData \u003d \"Loading of TagManager data failed\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    fileprivate static var cachedPersistentTagManager: TagManager?"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    fileprivate static var cachedPersistentTagManagerTest: TagManager?"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    fileprivate static var inTestMode: Bool \u003d false // Static flag"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private var inTestMode: Bool // Instance flag"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // Data stores"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // Map parent to child Tags by display values"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    private var parentChildMap: [String: Set\u003cString\u003e] \u003d [:]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // Map all IDs to display values"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    private var allIdValueMap: [String: String] \u003d [:]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // Map only parent display values to IDs"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    private var parentValueIdMap: [String: String] \u003d [:]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // Map parent IDs to children Tag display value to IDs mapping"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    private var parentChildValueIdMap: [String: [String: String]] \u003d [:]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // Observable"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    var observers: [Observer] \u003d []"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // See: https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // We exclude the \"observers\" property from being encoded/decoded,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // since that information should not be persistent across sessions."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private enum CodingKeys: String, CodingKey {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case inTestMode"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case parentChildMap"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case allIdValueMap"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case parentValueIdMap"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case parentChildValueIdMap"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Creates and returns a TagManager object."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Note: A persistent TagManager is implemented as a singleton, and thus will never be outdated."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Parameter withPersistence: If `true`, changes to TagManager data (e.g. add/remove Tags) will"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     automatically be saved to storage. The TagManager object returned will also be pre-loaded"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     with pre-existing data. If `false`, the TagManager object returned will only manage Tags in memory."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    static func create(testMode: Bool) -\u003e TagManager {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.info(\"Creating TagManager with testMode\u003d\\(testMode).\")"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        TagManager.inTestMode \u003d testMode"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // If a persistent TagManager has previously been instantiated,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // we return it. Otherwise, we create a new instance and cache it."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // We do this regardless of `testMode`."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        if testMode {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            if let tagManager \u003d TagManager.cachedPersistentTagManagerTest {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                log.info(\"Returning cached instance of test TagManager.\")"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                return tagManager"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.info(\"No cached instance of test TagManager found. Instantiating TagManager.\")"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            let fsm \u003d FileStorageManager()"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            let tagManager: TagManager"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                log.info(\"Reading test TagManager data.\")"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                tagManager \u003d try fsm.readFromJson(TagManager.self, file: TagManager.saveFileNameTest)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                log.info(\"Loaded TagManager from data.\")"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            } catch {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                log.warning(\"\\(TagManager.errorLoadData). Creating a new instance.\")"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                tagManager \u003d TagManager(testMode: testMode)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.info(\"Caching test TagManager for future returns.\")"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            TagManager.cachedPersistentTagManagerTest \u003d tagManager"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            return tagManager"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        if let tagManager \u003d TagManager.cachedPersistentTagManager {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.info(\"Returning cached instance of TagManager.\")"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            return tagManager"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.info(\"No cached instance of TagManager found. Instantiating TagManager.\")"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let fsm \u003d FileStorageManager()"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let tagManager: TagManager"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.info(\"Reading TagManager data.\")"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            tagManager \u003d try fsm.readFromJson(TagManager.self, file: TagManager.saveFileName)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.info(\"Loaded TagManager from data.\")"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.warning(\"\\(TagManager.errorLoadData). Creating a new instance.\")"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            tagManager \u003d TagManager(testMode: testMode)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.info(\"Caching TagManager for future returns.\")"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        TagManager.cachedPersistentTagManager \u003d tagManager"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return tagManager"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // Private init to disallow direct instantiation: we want to adopt a semi-singleton design pattern."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // When TagManager is instantiated in non-persistent mode (e.g. for unit testing),"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // we can create as many instances as possible."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // However, in normal operation (persistent mode), we want to allow only 1 instance,"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // to avoid multiple working stores of tag data."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private init(testMode: Bool) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        inTestMode \u003d testMode"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func getTag(for value: String, of parentValue: String? \u003d nil) throws -\u003e Tag {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let isParent \u003d parentValue \u003d\u003d nil"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        if isParent {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard parentChildMap[value] !\u003d nil else {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                throw InvalidTagError(message: \"Parent tag \\(value) does not exist\")"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            guard let uid \u003d parentValueIdMap[value] else {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            return Tag(uid, parentInternalValue: nil)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        } else { // Is child Tag"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard let parentValue \u003d parentValue else {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard let childrenTagValues \u003d parentChildMap[parentValue] else {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                throw InvalidTagError(message: \"Parent tag \\(parentValue) does not exist\")"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard childrenTagValues.contains(value) else {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                throw InvalidTagError(message: \"Child tag \\(value) does not exist\")"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard let parentId \u003d parentValueIdMap[parentValue] else {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            guard let uid \u003d parentChildValueIdMap[parentId]?[value] else {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            return Tag(uid, parentInternalValue: parentId)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func addChildTag(_ child: String, to parent: String) throws -\u003e Tag {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Parent Tag should exist"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        guard let children \u003d parentChildMap[parent] else {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            throw InvalidTagError(message: \"Parent tag \\(parent) does not exist\")"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Child Tag should not exist"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        guard !children.contains(child) else {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            throw DuplicateTagError(message: \"Child tag \\(child) already exists\")"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return createTag(child, of: parent)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func addParentTag(_ parent: String) throws -\u003e Tag {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Parent Tag should not exist"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        guard parentChildMap[parent] \u003d\u003d nil else {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            throw DuplicateTagError(message: \"Parent tag \\(parent) already exists\")"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return createTag(parent)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    @discardableResult"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func removeChildTag(_ child: String, from parent: String) throws -\u003e [Tag] {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Parent Tag should exist"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        guard let children \u003d parentChildMap[parent] else {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            throw InvalidTagError(message: \"Parent tag \\(parent) does not exist\")"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Child Tag should exist"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        guard children.contains(child) else {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            throw InvalidTagError(message: \"Child tag \\(child) does not exist\")"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return try removeTag(child, of: parent)"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    @discardableResult"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func removeParentTag(_ parent: String) throws -\u003e [Tag] {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Parent Tag should exist"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        guard parentChildMap[parent] !\u003d nil else {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            throw InvalidTagError(message: \"Parent tag \\(parent) does not exist\")"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return try removeTag(parent)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    var tags: [Tag: [Tag]] {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        var ret: [Tag: [Tag]] \u003d [:]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Add parent Tags"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        for parentDisplayValue in parentValueIdMap.keys {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard let parentId \u003d parentValueIdMap[parentDisplayValue] else {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            ret[Tag(parentId, parentInternalValue: nil)] \u003d []"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Add children Tags"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        for parentTag in ret.keys {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard let childrenIds \u003d parentChildValueIdMap[parentTag.internalValue]?.values else {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            for childId in childrenIds {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                ret[parentTag]?.append(Tag(childId, parentInternalValue: parentTag.internalValue))"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            // Sort"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            ret[parentTag]?.sort()"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return ret"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    var parentTags: [Tag] {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        var arrParentTags \u003d Array(parentValueIdMap.values).map { Tag($0, parentInternalValue: nil) }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        arrParentTags.sort()"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return arrParentTags"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func getChildrenTags(of parent: String) throws -\u003e [Tag] {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Parent Tag should exist"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        guard let parentId \u003d parentValueIdMap[parent] else {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            throw InvalidTagError(message: \"Parent tag\\(parent) does not exist\")"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        guard let childrenIds \u003d parentChildValueIdMap[parentId]?.values else {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        var arrChildrenTags \u003d Array(childrenIds).map { Tag($0, parentInternalValue: parentId) }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        arrChildrenTags.sort()"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return arrChildrenTags"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func isChildTag(_ child: String, of parent: String) -\u003e Bool {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Parent Tag should exist, otherwise return false"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        guard let childrenDisplayValues \u003d parentChildMap[parent] else {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            return false"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return childrenDisplayValues.contains(child)"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func isParentTag(_ parent: String) -\u003e Bool {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return parentChildMap[parent] !\u003d nil"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func clearTags() {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        parentChildMap.removeAll()"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        allIdValueMap.removeAll()"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        parentValueIdMap.removeAll()"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        parentChildValueIdMap.removeAll()"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        save()"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // swiftlint:disable cyclomatic_complexity"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func renameTag(_ oldValue: String, to newValue: String, of parent: String? \u003d nil) throws -\u003e Tag {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let isParent \u003d parent \u003d\u003d nil"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let ret: Tag // Return value"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Strategy:"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // 1) Guard against Tag not existing"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // 2) Guard against newValue already existing"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // 3) Update data stores"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        if isParent {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard parentChildMap[oldValue] !\u003d nil else {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                throw InvalidTagError(message: \"Parent tag \\(oldValue) does not exist\")"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard parentChildMap[newValue] \u003d\u003d nil else {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                throw DuplicateTagError(message: \"Parent tag \\(newValue) already exists\")"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            // parentChildMap: Update to reflect renaming"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard let childrenTagValues \u003d parentChildMap[oldValue] else {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                fatalError(\"This should never happen\") // We guarded against this"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            parentChildMap[newValue] \u003d childrenTagValues"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            parentChildMap[oldValue] \u003d nil"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            // allIdValueMap: Update ID to display value mapping"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            guard let uid \u003d parentValueIdMap[oldValue] else {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            allIdValueMap[uid] \u003d newValue"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            // parentValueIdMap: Update display value to ID mapping"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            parentValueIdMap[oldValue] \u003d nil"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            parentValueIdMap[newValue] \u003d uid"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            // No need to update parentChildValueIdMap :)"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            ret \u003d Tag(uid, parentInternalValue: nil)"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        } else { // Is child Tag"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard let parentDisplayValue \u003d parent else {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard let childrenTagValues \u003d parentChildMap[parentDisplayValue] else {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                throw InvalidTagError(message: \"Parent tag \\(parentDisplayValue) does not exist\")"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard childrenTagValues.contains(oldValue) else {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                throw InvalidTagError(message: \"Child tag \\(oldValue) does not exist\")"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard !childrenTagValues.contains(newValue) else {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                throw DuplicateTagError(message: \"Child tag \\(newValue) already exists\")"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            // parentChildMap: Update to reflect renaming"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            parentChildMap[parentDisplayValue]?.remove(oldValue)"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            parentChildMap[parentDisplayValue]?.insert(newValue)"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            // allIdValueMap: Update ID to display value mapping"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard let parentId \u003d parentValueIdMap[parentDisplayValue] else {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            guard let uid \u003d parentChildValueIdMap[parentId]?[oldValue] else {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            allIdValueMap[uid] \u003d newValue"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            // No need to update parentValueIdMap :)"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            // parentChildValueIdMap: Update display value to ID mapping"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            parentChildValueIdMap[parentId]?[oldValue] \u003d nil"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            parentChildValueIdMap[parentId]?[newValue] \u003d uid"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            ret \u003d Tag(uid, parentInternalValue: parentId)"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        save()"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return ret"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // swiftlint:enable cyclomatic_complexity"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Fabian"
        },
        "content": "// MARK: TagManager: TagValueSourceInterface"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Fabian"
        },
        "content": "extension TagManager: TagValueSourceInterface {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func getDisplayValue(of internalValue: String) -\u003e String {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        guard let val \u003d allIdValueMap[internalValue] else {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return val"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Fabian"
        },
        "content": "// MARK: TagManager: persistence"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Fabian"
        },
        "content": "extension TagManager {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Saves the current state of the TagManager object to storage."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private func save() {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.info(\"Saving TagManager to storage.\")"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            let fsm \u003d FileStorageManager()"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            let fileName \u003d inTestMode ? TagManager.saveFileNameTest : TagManager.saveFileName"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            try fsm.writeAsJson(data: self, as: fileName)"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        } catch {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.error(\"Error encountered: \\(error)\")"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Fabian"
        },
        "content": "// MARK: TagManager: private utility methods"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Fabian"
        },
        "content": "extension TagManager {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Creates and returns a Tag. This method automtatically updates data stores and saves to disk."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Requires: The Tag being created must not already exist."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private func createTag(_ displayValue: String, of parentDisplayValue: String? \u003d nil) -\u003e Tag {"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let uid \u003d UUID().uuidString"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        allIdValueMap[uid] \u003d displayValue"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let isParentTag \u003d parentDisplayValue \u003d\u003d nil"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        if isParentTag {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            parentChildMap[displayValue] \u003d []"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            parentValueIdMap[displayValue] \u003d uid"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            parentChildValueIdMap[uid] \u003d [:]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            save()"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            return Tag(uid, parentInternalValue: nil)"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        } else { // If child Tag"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard let parentValue \u003d parentDisplayValue else {"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            parentChildMap[parentValue]?.insert(displayValue)"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard let parentId \u003d parentValueIdMap[parentValue] else {"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            parentChildValueIdMap[parentId]?[displayValue] \u003d uid"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            save()"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            return Tag(uid, parentInternalValue: parentId)"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Removes a Tag. This method automatically updates data stores and saves to disk."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// If a parent Tag is removed, all of its children Tags will be removed too."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Requires: The Tag being removed must exist."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    @discardableResult"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    private func removeTag(_ displayValue: String,"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                           of parentDisplayValue: String? \u003d nil) throws -\u003e [Tag] {"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let removedTag: Tag"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        var removedTags: [Tag] \u003d []"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        removedTag \u003d try getTag(for: displayValue, of: parentDisplayValue)"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        removedTags.append(removedTag)"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let isParentTag \u003d parentDisplayValue \u003d\u003d nil"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        if isParentTag {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            guard let uid \u003d parentValueIdMap[displayValue] else {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            // Remove all children Tags"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            removedTags.append(contentsOf: try getChildrenTags(of: displayValue))"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard let childrenTagValues \u003d parentChildMap[displayValue] else {"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            for childTagValue in childrenTagValues {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                try removeTag(childTagValue, of: displayValue)"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            parentValueIdMap[displayValue] \u003d nil"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            allIdValueMap[uid] \u003d nil"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            parentChildMap[displayValue] \u003d nil"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            parentChildValueIdMap[uid] \u003d nil"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        } else { // If child Tag"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard let parentDisplayValue \u003d parentDisplayValue else {"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard let parentId \u003d parentValueIdMap[parentDisplayValue] else {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            guard let uid \u003d parentChildValueIdMap[parentId]?[displayValue] else {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                fatalError(\"This should never happen\")"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            allIdValueMap[uid] \u003d nil"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            parentChildMap[parentDisplayValue]?.remove(displayValue)"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            parentChildValueIdMap[parentId]?[displayValue] \u003d nil"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        save()"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return removedTags"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "// swiftlint:enable file_length"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 58,
      "kumuwu": 9,
      "Fabian": 568
    }
  },
  {
    "path": "bacon/model/tags/TagManagerInterface.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  TagManagerInterface.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 10/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "struct DuplicateTagError: Error {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let message: String"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": "struct InvalidTagError: Error {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let message: String"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "protocol TagManagerInterface {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Returns a Tag of the provided values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: `InvalidTagError` if the Tag does not exist."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func getTag(for value: String, of parentValue: String?) throws -\u003e Tag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Adds a new child Tag to a parent Tag and returns it."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - `DuplicateTagError` if the child Tag already exists."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - `InvalidTagError` if the parent Tag does not exist."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func addChildTag(_ child: String, to parent: String) throws -\u003e Tag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Adds a new parent Tag and returns it."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: `DuplicateTagError` if the Tag already exists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func addParentTag(_ parent: String) throws -\u003e Tag"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Removes a child Tag from a parent Tag."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: `InvalidTagError` if either Tag does not exist."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func removeChildTag(_ child: String, from parent: String) throws -\u003e [Tag]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Removes a parent Tag. All of its children Tags will be removed too."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: `InvalidTagError` if the Tag does not exist."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func removeParentTag(_ parent: String) throws -\u003e [Tag]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Contains all Tags in a dictionary mapping parent Tags to sorted arrays of their children Tags."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    var tags: [Tag: [Tag]] { get }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Contains a sorted array of all existing parent Tags."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    var parentTags: [Tag] { get }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Returns a sorted array of the children Tags of a parent Tag."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: `InvalidTagError` if the parent Tag does not exist."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func getChildrenTags(of parent: String) throws -\u003e [Tag]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Checks whether a child Tag exists."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// A child Tag exists when its parent Tag exists and they are associated."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func isChildTag(_ child: String, of parent: String) -\u003e Bool"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Checks whether a parent Tag with the provided value exists."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func isParentTag(_ parent: String) -\u003e Bool"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Renames a Tag and returns it."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - `DuplicateTagError` if the renamed Tag already exists."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - `InvalidTagError` if the Tag does not exist."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func renameTag(_ oldValue: String, to newValue: String, of parent: String?) throws -\u003e Tag"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Clears all Tags."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func clearTags()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 2,
      "Fabian": 67
    }
  },
  {
    "path": "bacon/model/tags/TagValueSourceInterface.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  TagValueSourceInterface.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 12/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "protocol TagValueSourceInterface: Codable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Returns the (external) display value of a Tag\u0027s internal value."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func getDisplayValue(of internalValue: String) -\u003e String"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fabian": 16
    }
  },
  {
    "path": "bacon/model/transaction/Transaction.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Transaction.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  Represents a mutable transaction."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 19/3/19."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": "// MARK: Transaction class"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "class Transaction: HashableClass, Codable, Observable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // Support transaction deletion through the delete() method."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // These variables should be externally readable but not settable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private(set) var isDeleted \u003d false"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private(set) var deleteSuccessCallback: () -\u003e Void \u003d {}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private(set) var deleteFailureCallback: (String) -\u003e Void \u003d { _ in }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    private(set) var editSuccessCallback: () -\u003e Void \u003d {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    private(set) var editFailureCallback: (String) -\u003e Void \u003d { _ in }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private(set) var date: Date {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        didSet {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.info(\"Set date\u003d\\(date)\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            //notifyObserversOfSelf()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private(set) var type: TransactionType {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        didSet {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.info(\"Set type\u003d\\(type)\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            //notifyObserversOfSelf()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private(set) var frequency: TransactionFrequency {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        didSet {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.info(\"Set frequency\u003d\\(frequency)\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            //notifyObserversOfSelf()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private(set) var tags: Set\u003cTag\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        didSet {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.info(\"Set tags\u003d\\(tags)\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            //notifyObserversOfSelf()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private(set) var amount: Decimal {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        didSet {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.info(\"Set amount\u003d\\(amount)\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            //notifyObserversOfSelf()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private(set) var description: String {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        didSet {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.info(\"Set description\u003d\\(description)\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            //notifyObserversOfSelf()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private(set) var image: CodableUIImage? {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        didSet {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.info(\"Updated image\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            //notifyObserversOfSelf()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private(set) var location: CodableCLLocation? {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        didSet {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.info(\"Set location\u003d\\(String(describing: location))\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            //notifyObserversOfSelf()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    private(set) var recurringId: UUID?"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    var observers: [Observer] \u003d []"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // See: https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // We exclude the \"observers\" property from being encoded/decoded,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // since that information should not be persistent across sessions."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private enum CodingKeys: String, CodingKey {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case date"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case type"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case frequency"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case tags"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case amount"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case description"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case image"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case location"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        case recurringId"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Creates a Transaction instance."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Parameters:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    ///     - date: The transaction date, as represented by a Date object."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - type: The transaction type."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - frequency: The transaction frequency."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - tags: The transaction tags."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - amount: The transaction amount. Must be \u003e 0."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - description: An optional description of the transaction. Defaults to an empty string."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: `InitializationError` if `amount \u003c\u003d 0`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    init(date: Date,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fabian"
        },
        "content": "         type: TransactionType,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fabian"
        },
        "content": "         frequency: TransactionFrequency,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fabian"
        },
        "content": "         tags: Set\u003cTag\u003e,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fabian"
        },
        "content": "         amount: Decimal,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fabian"
        },
        "content": "         description: String \u003d \"\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fabian"
        },
        "content": "         image: CodableUIImage? \u003d nil,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fabian"
        },
        "content": "         location: CodableCLLocation? \u003d nil) throws {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.info(\"Initializing Transaction object.\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        self.date \u003d date"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        self.type \u003d type"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        self.frequency \u003d frequency"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        self.tags \u003d tags"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        self.amount \u003d amount"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        self.description \u003d description"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        self.image \u003d image"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        self.location \u003d location"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // If its a recurring transaction, generate a recurring id"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        if frequency.nature \u003d\u003d .recurring {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            self.recurringId \u003d UUID()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        super.init()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            try validate(date: date,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         type: type,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         frequency: frequency,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         tags: tags,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         amount: amount,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         description: description,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         image: image,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         location: location)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        } catch let error as InvalidTransactionError {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.warning(\"\"\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                Transaction initialization failed (InvalidTransactionError)."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                Re-throwing as InitializationError."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            throw InitializationError(message: error.message) // Propagate error as InitializationError"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.info(\"Transaction initialization succeeded.\")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    private init(date: Date,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                 type: TransactionType,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                 frequency: TransactionFrequency,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                 tags: Set\u003cTag\u003e,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                 amount: Decimal,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                 description: String \u003d \"\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                 image: CodableUIImage? \u003d nil,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                 location: CodableCLLocation? \u003d nil,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                 recurringId: UUID? \u003d nil) throws {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        log.info(\"Initializing Transaction object with private init.\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        self.date \u003d date"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        self.type \u003d type"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        self.frequency \u003d frequency"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        self.tags \u003d tags"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        self.amount \u003d amount"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        self.description \u003d description"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        self.image \u003d image"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        self.location \u003d location"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        self.recurringId \u003d recurringId"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        super.init()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            try validate(date: date,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                         type: type,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                         frequency: frequency,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                         tags: tags,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                         amount: amount,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                         description: description,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                         image: image,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                         location: location)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        } catch let error as InvalidTransactionError {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            log.warning(\"\"\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                Transaction initialization failed (InvalidTransactionError)."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                Re-throwing as InitializationError."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            throw InitializationError(message: error.message) // Propagate error as InitializationError"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        log.info(\"Transaction initialization succeeded.\")"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Edits one or more properties of a Transaction object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Pass in as many properties as should be edited."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Note: If properties are valid, observers of this Transaction object are notified automatically."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     Otherwise, this Transaction object will not be mutated, and observers will not be notified."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: `InvalidTransactionError` if at least 1 property is invalid."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func edit(date: Date? \u003d nil,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Fabian"
        },
        "content": "              type: TransactionType? \u003d nil,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Fabian"
        },
        "content": "              frequency: TransactionFrequency? \u003d nil,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Fabian"
        },
        "content": "              tags: Set\u003cTag\u003e? \u003d nil,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Fabian"
        },
        "content": "              amount: Decimal? \u003d nil,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Fabian"
        },
        "content": "              description: String? \u003d nil,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Fabian"
        },
        "content": "              image: CodableUIImage? \u003d nil,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "              location: CodableCLLocation? \u003d nil,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "              successCallback: @escaping () -\u003e Void \u003d {},"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "              failureCallback: @escaping (String) -\u003e Void \u003d { _ in }) throws {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.info(\"Editing Transaction instance.\")"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            editSuccessCallback \u003d successCallback"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            editFailureCallback \u003d failureCallback"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            try validate(date: date,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         type: type,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         frequency: frequency,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         tags: tags,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         amount: amount,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         description: description,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         image: image,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         location: location)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        } catch let error as InvalidTransactionError {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.warning(\"Transaction editing failed (InvalidTransactionError. Rethrowing error.\")"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            throw error"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Update properties for those which are not nil"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        if let date \u003d date {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            self.date \u003d date"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        if let type \u003d type {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            self.type \u003d type"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        if let frequency \u003d frequency {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            self.frequency \u003d frequency"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        if let tags \u003d tags {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            self.tags \u003d tags"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        if let amount \u003d amount {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            self.amount \u003d amount"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        if let description \u003d description {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            self.description \u003d description"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        if let image \u003d image {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            self.image \u003d image"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        if let location \u003d location {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            self.location \u003d location"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        notifyObserversOfSelf()"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.info(\"Transaction editing succeeded.\")"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Notifies all observers of changes to self."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// This should be called after any mutation to a Transaction instance."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private func notifyObserversOfSelf() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.info(\"Notifying observers of new self.\")"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        notifyObservers(self)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// Deletes this transaction. Accepts 2 parameters with default values."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Parameters:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - successCallback: Will be called when the transaction is successfully deleted."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    ///     - failureCallback: Will be called with an error message if an error occurs"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    ///                        while attempting to delete the transaction."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func delete(successCallback: @escaping () -\u003e Void \u003d {},"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                failureCallback: @escaping (String) -\u003e Void \u003d { _ in }) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        isDeleted \u003d true"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        deleteSuccessCallback \u003d successCallback"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        deleteFailureCallback \u003d failureCallback"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        notifyObserversOfSelf()"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Fabian"
        },
        "content": "// MARK: Transaction validator"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Fabian"
        },
        "content": "struct InvalidTransactionError: Error {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let message: String"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Fabian"
        },
        "content": "extension Transaction {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Validates the properties of a Transaction object."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Pass in as many properties as should be validated."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: `InvalidTransactionError` if at least 1 property is invalid."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private func validate(date: Date? \u003d nil,"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                          type: TransactionType? \u003d nil,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                          frequency: TransactionFrequency? \u003d nil,"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                          tags: Set\u003cTag\u003e? \u003d nil,"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                          amount: Decimal? \u003d nil,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                          description: String? \u003d nil,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                          image: CodableUIImage? \u003d nil,"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                          location: CodableCLLocation? \u003d nil) throws {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.info(\"Validating transaction properties.\")"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        /* Currently, we only validate `amount`."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Fabian"
        },
        "content": "         * This method should be extended as required in the future."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Fabian"
        },
        "content": "         * For each property to be checked, we first check that it is not nil,"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Fabian"
        },
        "content": "         * since this method accepts transaction properties as optionals."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Fabian"
        },
        "content": "         */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Validation condition: amount should be \u003e 0"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // swiftlint:disable force_unwrapping"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        if amount !\u003d nil \u0026\u0026 amount! \u003c\u003d 0 {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.warning(\"Amount\u003d\\(String(describing: amount)) is invalid. Throwing InvalidTransactionError.\")"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            throw InvalidTransactionError(message: \"amount\u003d\\(amount!) must be \u003e 0\")"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // swiftlint:enable force_unwrapping"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.info(\"Transaction properties validation succeeded.\")"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "// MARK: Transaction: duplicate()"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "extension Transaction {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// Create a copy of the Transaction with the exact same values"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func duplicate() -\u003e Transaction {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        guard let transactionCopy \u003d try? Transaction(date: date,"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                     type: type,"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                     frequency: frequency,"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                     tags: tags,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                     amount: amount,"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                     description: description,"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                     image: image,"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                     location: location,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                     recurringId: recurringId) else {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            // A copy is created from a valid instance, this should never throw."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            fatalError(\"Failed to duplicate valid Transaction.\")"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return transactionCopy"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Fabian"
        },
        "content": "// MARK: Transaction: equals()"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Fabian"
        },
        "content": "extension Transaction {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Compares 2 transactions."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Returns: true if they have equal properties."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func equals(_ transaction: Transaction) -\u003e Bool {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return date \u003d\u003d transaction.date"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            \u0026\u0026 type \u003d\u003d transaction.type"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            \u0026\u0026 frequency \u003d\u003d transaction.frequency"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            \u0026\u0026 tags \u003d\u003d transaction.tags"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            \u0026\u0026 amount \u003d\u003d transaction.amount"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            \u0026\u0026 description \u003d\u003d transaction.description"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            \u0026\u0026 location \u003d\u003d transaction.location"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            \u0026\u0026 image?.image.pngData()?.base64EncodedString()"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                \u003d\u003d transaction.image?.image.pngData()?.base64EncodedString()"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            \u0026\u0026 recurringId \u003d\u003d transaction.recurringId"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 89,
      "Fabian": 254,
      "Travis Ching Jia Yea": 2
    }
  },
  {
    "path": "bacon/model/transaction/TransactionFrequency.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  TransactionFrequency.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 19/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "enum TransactionFrequencyNature: String, Codable, Equatable, Hashable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    case oneTime"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    case recurring"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": "enum TransactionFrequencyInterval: String, Codable, Equatable, Hashable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    case daily"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    case weekly"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    case monthly"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    case yearly"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": "struct TransactionFrequency: Codable, Equatable, Hashable {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let nature: TransactionFrequencyNature"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let interval: TransactionFrequencyInterval?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let repeats: Int?"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Creates a TransactionFrequency instance."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Parameters:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - nature: The nature of the transaction frequency."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - interval: The recurring interval of a recurring transaction."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     - repeats: The number of times a recurring transaction is to be repeated for"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///         (e.g. 2 repeats create 3 transactions). If `repeats` is provided, it must be \u003e\u003d 1."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Note: `interval` and `repeats` will be set to `nil` if `nature \u003d\u003d .oneTime`,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    ///     and any provided arguments are ignored."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Throws: `InitializationError` if invalid arguments are provided."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    init(nature: TransactionFrequencyNature, interval: TransactionFrequencyInterval?, repeats: Int?) throws {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            TransactionFrequency:init() using the designated initializer with the following arguments:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            nature\u003d\\(nature) interval\u003d\\(String(describing: interval)) repeats\u003d\\(String(describing: repeats))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        self.nature \u003d nature"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        switch nature {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case .oneTime:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.debug(\"nature \u003d\u003d .oneTime\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            self.interval \u003d nil"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            self.repeats \u003d nil"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        case .recurring:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            log.debug(\"nature \u003d\u003d .recurring\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard let interval \u003d interval else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                log.info(\"interval \u003d\u003d nil. Throwing InitializationError.\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                throw InitializationError(message: \"`interval` must be provided\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard let repeats \u003d repeats else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                log.info(\"repeats \u003d\u003d nil. Throwing InitializationError.\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                throw InitializationError(message: \"`repeats` must be provided\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            guard repeats \u003e\u003d 1 else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                log.info(\"repeats \u003c\u003d 0. Throwing InitializationError.\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                throw InitializationError(message: \"`repeats` must be at least 1\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            self.interval \u003d interval"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            self.repeats \u003d repeats"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Convenience initializer for one time transactions."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// This is equivalent to `init(nature: nature, interval: nil, repeats: nil`."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// Therefore, this will fail is `nature !\u003d .oneTime`."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    init(nature: TransactionFrequencyNature) throws {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        log.info(\"TransactionFrequency:init() using the convenience initializer\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try self.init(nature: nature, interval: nil, repeats: nil)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fabian": 80
    }
  },
  {
    "path": "bacon/model/transaction/TransactionManager.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  ModelManager.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Created by Travis Ching Jia Yea on 2/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "class TransactionManager: TransactionManagerInterface {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    private let storageManager: StorageManagerInterface"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    init() throws {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        storageManager \u003d try StorageManager()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            TransactionManager initialized using TransactionManager.init()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // Observer is responsible for knowing what object types it observes"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // TransactionManager currently only observes Transactions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func notify(_ value: Any) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Notified by Transaction"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        if let transaction \u003d value as? Transaction {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            // Handle transaction deletion"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            if transaction.isDeleted {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                do {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    // Try deleting it through StorageManager"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    try storageManager.deleteTransaction(transaction)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    transaction.deleteSuccessCallback()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                } catch {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                    transaction.deleteFailureCallback(error.localizedDescription)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                // Handle transaction edit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                do {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    if transaction.frequency.nature \u003d\u003d .recurring {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                        try updateRecurringTransaction(transaction)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                        try storageManager.updateTransaction(transaction)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    transaction.editSuccessCallback()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                } catch {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    log.warning(\"\"\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                        TransactionManager attempt to edit transaction failed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                        Calling editFailureCallback."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                        \"\"\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    transaction.editFailureCallback(error.localizedDescription)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            log.info(\"\"\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                TransactionManager notified by Transaction: \\(transaction)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            return"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // If program enters here"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // meaning, an error has occured, TransactionManager is notified by"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // objects it doesn\u0027t observe."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        log.warning(\"\"\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            TransactionManager notified by unidentified object: \\(value)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    private func observeTransactions(_ transactions: [Transaction]) -\u003e [Transaction] {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        transactions.forEach { transaction in transaction.registerObserver(self) }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return transactions"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func getNumberOfTransactionsInDatabase() -\u003e Double {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return storageManager.getNumberOfTransactionsInDatabase()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func clearTransactionDatabase() throws {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return try storageManager.clearTransactionDatabase()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func saveTransaction(_ transaction: Transaction) throws {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try storageManager.saveTransaction(transaction)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        if transaction.frequency.nature \u003d\u003d .recurring {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            try saveRecurringTransaction(transaction)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // Save future recurring instances of the transaction given."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    private func saveRecurringTransaction(_ transaction: Transaction) throws {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        guard transaction.frequency.nature \u003d\u003d .recurring else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            throw InvalidArgumentError(message: \"\"\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                recordRecurringTransaction() requires transaction to be recurring."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let recurringInstances \u003d try generateAllRecurringInstances(of: transaction)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        for transactions in recurringInstances {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            // Save the next recurring transaction"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            try storageManager.saveTransaction(transactions)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// Generates all subsequent future recurring instances of a transaction"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// (i.e. the first instance of a recurring transaction is not included)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    private func generateAllRecurringInstances(of transaction: Transaction) throws -\u003e [Transaction] {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        guard transaction.frequency.nature \u003d\u003d .recurring else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            throw InvalidArgumentError(message: \"\"\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                generateAllRecurringInstances() requires transaction to be recurring."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        guard let numberOfTimesToRepeat \u003d transaction.frequency.repeats else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            fatalError(\"Transaction is guarded to be recurring, repeats should not be nil.\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        guard let interval \u003d transaction.frequency.interval else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            fatalError(\"Transaction is guarded to be recurring, interval should not be nil.\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        var currentTime \u003d transaction.date"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        var dateComponents \u003d DateComponents()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        switch interval {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        case .daily:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            dateComponents.day \u003d 1"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        case .weekly:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            dateComponents.day \u003d 7"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        case .monthly:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            dateComponents.month \u003d 1"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        case .yearly:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            dateComponents.year \u003d 1"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        var recurringTransactions: [Transaction] \u003d []"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        for _ in 1..\u003cnumberOfTimesToRepeat {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            // Calculate the date of the next recurring transaction"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            guard let nextRecurringDate \u003d Calendar.current.date(byAdding: dateComponents,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                                to: currentTime) else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                fatalError(\"\"\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    Date calculation for future recurring transaction should not fail."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                    \"\"\")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            currentTime \u003d nextRecurringDate"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            // Create a copy of the transaction and update the date"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            let nextTransaction \u003d transaction.duplicate()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            try nextTransaction.edit(date: currentTime)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            recurringTransactions.append(nextTransaction)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        return recurringTransactions"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// An edited recurring transaction should have its changes"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// apply across all recurring instances."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// We disallow editing the date of a recurring transaction as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// users are able to edit a recurring transaction at an arbitrary instance of it,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// if we allow user to edit the date, we will be unable to back track and"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// find out which instance the transaction was edited at."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// - requires: date of recurring transaction not modified"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func updateRecurringTransaction(_ transaction: Transaction) throws {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        guard transaction.frequency.nature \u003d\u003d .recurring else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            throw InvalidArgumentError(message: \"\"\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                updateRecurringTransaction() requires transaction to be recurring."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                \"\"\")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Using the updated transaction information, backtrack and set the date"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // to the first instance."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let firstInstance \u003d try storageManager.loadFirstRecurringInstance(of: transaction)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let firstRecurringDate \u003d firstInstance.date"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let updatedTransaction \u003d transaction.duplicate()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try updatedTransaction.edit(date: firstRecurringDate)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // As number of repeats may have been updated, we use the approach of"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // deleting all records of the outdated recurring transaction"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // and saving the updated one instead of updating directly."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try deleteAllRecurringInstance(of: transaction)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try saveTransaction(updatedTransaction)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func deleteTagFromTransactions(_ tag: Tag) throws {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try storageManager.deleteTagFromTransactions(tag)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func deleteAllRecurringInstance(of transaction: Transaction) throws {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try storageManager.deleteAllRecurringInstances(of: transaction)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func loadTransactions(limit: Int) throws -\u003e [Transaction] {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let transactions \u003d try storageManager.loadTransactions(limit: limit)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return observeTransactions(transactions)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func loadTransactions(after date: Date, limit: Int) throws -\u003e [Transaction] {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let transactions \u003d try storageManager.loadTransactions(after: date, limit: limit)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return observeTransactions(transactions)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func loadTransactions(before date: Date, limit: Int) throws -\u003e [Transaction] {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let transactions \u003d try storageManager.loadTransactions(before: date, limit: limit)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return observeTransactions(transactions)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func loadTransactions(from fromDate: Date, to toDate: Date) throws -\u003e [Transaction] {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let transactions \u003d try storageManager.loadTransactions(from: fromDate, to: toDate)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return observeTransactions(transactions)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func loadTransactions(ofType type: TransactionType, limit: Int) throws -\u003e [Transaction] {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let transactions \u003d try storageManager.loadTransactions(ofType: type, limit: limit)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        return observeTransactions(transactions)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadTransactions(ofTag tag: Tag) throws -\u003e [Transaction] {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let transactions \u003d try storageManager.loadTransactions(ofTag: tag)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        return observeTransactions(transactions)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 130,
      "Fabian": 16,
      "Travis Ching Jia Yea": 61
    }
  },
  {
    "path": "bacon/model/transaction/TransactionManagerInterface.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  TransactionManagerInterface.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  Created by Travis Ching Jia Yea on 21/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "/// Provides an API for all transaction related functionalities."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "protocol TransactionManagerInterface: Observer {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func getNumberOfTransactionsInDatabase() -\u003e Double"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func clearTransactionDatabase() throws"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func saveTransaction(_ transaction: Transaction) throws"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// An edited recurring transaction should have its changes"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// apply across all recurring instances."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// We disallow editing the date of a recurring transaction as"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// users are able to edit a recurring transaction at an arbitrary instance of it,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// if we allow user to edit the date, we will be unable to back track and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    /// find out which instance the transaction was edited at."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    /// - Requires: The date of the recurring transaction should not be modified."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func updateRecurringTransaction(_ transaction: Transaction) throws"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func deleteTagFromTransactions(_ tag: Tag) throws"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func deleteAllRecurringInstance(of transaction: Transaction) throws"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadTransactions(limit: Int) throws -\u003e [Transaction]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadTransactions(after date: Date, limit: Int) throws -\u003e [Transaction]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadTransactions(before date: Date, limit: Int) throws -\u003e [Transaction]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadTransactions(from fromDate: Date, to toDate: Date) throws -\u003e [Transaction]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadTransactions(ofType type: TransactionType, limit: Int) throws -\u003e [Transaction]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func loadTransactions(ofTag tag: Tag) throws -\u003e [Transaction]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 33,
      "Fabian": 2
    }
  },
  {
    "path": "bacon/model/transaction/TransactionTime.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  TransactionTime.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 26/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "struct TransactionTime: Codable, Equatable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let year: Int"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let month: Int"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let day: Int"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let hour: Int"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let minute: Int"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let second: Int"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    init(_ date: Date) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let calendar \u003d Calendar.current"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        year \u003d calendar.component(.year, from: date)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        month \u003d calendar.component(.month, from: date)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        day \u003d calendar.component(.day, from: date)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        hour \u003d calendar.component(.hour, from: date)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        minute \u003d calendar.component(.minute, from: date)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        second \u003d calendar.component(.second, from: date)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fabian": 28
    }
  },
  {
    "path": "bacon/model/transaction/TransactionType.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  TransactionType.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 19/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "enum TransactionType: String, Codable, Equatable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    case income"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    case expenditure"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fabian": 13,
      "Travis Ching Jia Yea": 1
    }
  },
  {
    "path": "bacon/view/CalendarCell.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  CalendarCell.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 9/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import UIKit"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import JTAppleCalendar"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "class CalendarCell: JTAppleCell {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // swiftlint:disable private_outlet"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet weak var dateLabel: UILabel!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet weak var selectedView: UIView!"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // swiftlint:enable private_outlet"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 17
    }
  },
  {
    "path": "bacon/view/ChildTagCell.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  ChildTagCell.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 11/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import UIKit"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "class ChildTagCell: UITableViewCell {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // swiftlint:disable private_outlet"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet weak var childTagLabel: UILabel!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // swiftlint:enable private_outlet"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var canEdit \u003d false"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override func awakeFromNib() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        super.awakeFromNib()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // Initialization code"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override func setSelected(_ selected: Bool, animated: Bool) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        super.setSelected(selected, animated: animated)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if canEdit {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if selected {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            childTagLabel.textColor \u003d UIColor.green.withAlphaComponent(0.5)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            childTagLabel.textColor \u003d UIColor.black"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 36
    }
  },
  {
    "path": "bacon/view/FoldingCell.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  FoldingCell.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// Copyright (c) 21/12/15. Ramotion Inc. (http://ramotion.com)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// Permission is hereby granted, free of charge, to any person obtaining a copy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// of this software and associated documentation files (the \"Software\"), to deal"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// in the Software without restriction, including without limitation the rights"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// copies of the Software, and to permit persons to whom the Software is"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// furnished to do so, subject to the following conditions:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// The above copyright notice and this permission notice shall be included in"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// all copies or substantial portions of the Software."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// THE SOFTWARE."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// swiftlint:disable all"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import UIKit"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "/// UITableViewCell with folding animation"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "open class FoldingCell: UITableViewCell {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @objc open var isUnfolded \u003d false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    /// UIView is displayed when cell open"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet open var containerView: UIView!"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet open var containerViewTop: NSLayoutConstraint!"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    /// UIView whitch display when cell close"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet open var foregroundView: RotatedView!"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet open var foregroundViewTop: NSLayoutConstraint!"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var animationView: UIView?"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    ///  the number of folding elements. Default 2"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBInspectable open var itemCount: NSInteger \u003d 2"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    /// The color of the back cell"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBInspectable open var backViewColor: UIColor \u003d UIColor.gray"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var animationItemViews: [RotatedView]?"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "     Folding animation types"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "     "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "     - Open:  Open direction"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "     - Close: Close direction"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @objc public enum AnimationType : Int {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        case open"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        case close"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // MARK: Life Cycle"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    open override func awakeFromNib() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        super.awakeFromNib()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        commonInit()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "     Call this method in methods init(style: UITableViewCellStyle, reuseIdentifier: String?) after creating Views"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @objc open func commonInit() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        configureDefaultState()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        selectionStyle \u003d .none"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        containerView.layer.cornerRadius \u003d foregroundView.layer.cornerRadius"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        containerView.layer.masksToBounds \u003d true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // MARK: configure"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func configureDefaultState() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let foregroundViewTop \u003d self.foregroundViewTop,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let containerViewTop \u003d self.containerViewTop else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                fatalError(\"set foregroundViewTop or containerViewTop outlets in storyboard\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        containerViewTop.constant \u003d foregroundViewTop.constant"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        containerView.alpha \u003d 0"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if let height \u003d (foregroundView.constraints.filter { $0.firstAttribute \u003d\u003d .height \u0026\u0026 $0.secondItem \u003d\u003d nil }).first?.constant {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            foregroundView.layer.anchorPoint \u003d CGPoint(x: 0.5, y: 1)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            foregroundViewTop.constant +\u003d height / 2"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        foregroundView.layer.transform \u003d foregroundView.transform3d()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        createAnimationView()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        contentView.bringSubviewToFront(foregroundView)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func createAnimationItemView() -\u003e [RotatedView] {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var items \u003d [RotatedView]()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        items.append(foregroundView)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var rotatedViews \u003d [RotatedView]()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        animationView?.subviews"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            .lazy"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            .compactMap({ $0 as? RotatedView })"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            .sorted(by: { $0.tag \u003c $1.tag })"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            .forEach { itemView in"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                rotatedViews.append(itemView)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                if let backView \u003d itemView.backView {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                    rotatedViews.append(backView)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        items.append(contentsOf: rotatedViews)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return items"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func configureAnimationItems(_ animationType: AnimationType) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if animationType \u003d\u003d .open {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            animationView?.subviews"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                .lazy"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                .compactMap { $0 as? RotatedView }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                .forEach { $0.alpha \u003d 0 }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            animationView?.subviews"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                .lazy"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                .compactMap { $0 as? RotatedView }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                .forEach {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                    $0.alpha \u003d animationType \u003d\u003d .open ? 0 : 1"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                    if animationType !\u003d .open { $0.backView?.alpha \u003d 0 }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func createAnimationView() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        animationView \u003d UIView(frame: containerView.frame)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        animationView?.layer.cornerRadius \u003d foregroundView.layer.cornerRadius"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        animationView?.backgroundColor \u003d .clear"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        animationView?.translatesAutoresizingMaskIntoConstraints \u003d false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        animationView?.alpha \u003d 0"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let animationView \u003d self.animationView else { return }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.contentView.addSubview(animationView)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // copy constraints from containerView"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var newConstraints \u003d [NSLayoutConstraint]()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        for constraint in self.contentView.constraints {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            if let item \u003d constraint.firstItem as? UIView, item \u003d\u003d containerView {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                let newConstraint \u003d NSLayoutConstraint(item: animationView, attribute: constraint.firstAttribute,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                                       relatedBy: constraint.relation, toItem: constraint.secondItem, attribute: constraint.secondAttribute,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                                       multiplier: constraint.multiplier, constant: constraint.constant)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                newConstraints.append(newConstraint)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            } else if let firstItem \u003d constraint.firstItem as? UIView, let secondItem: UIView \u003d constraint.secondItem as? UIView, secondItem \u003d\u003d containerView {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                let newConstraint \u003d NSLayoutConstraint(item: firstItem, attribute: constraint.firstAttribute,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                                       relatedBy: constraint.relation, toItem: animationView, attribute: constraint.secondAttribute,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                                       multiplier: constraint.multiplier, constant: constraint.constant)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                newConstraints.append(newConstraint)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.contentView.addConstraints(newConstraints)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        for constraint in containerView.constraints { // added height constraint"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            if constraint.firstAttribute \u003d\u003d .height, let item: UIView \u003d constraint.firstItem as? UIView, item \u003d\u003d containerView {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                let newConstraint \u003d NSLayoutConstraint(item: animationView, attribute: constraint.firstAttribute,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                                       relatedBy: constraint.relation, toItem: nil, attribute: constraint.secondAttribute,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                                       multiplier: constraint.multiplier, constant: constraint.constant)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                animationView.addConstraint(newConstraint)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func addImageItemsToAnimationView() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        containerView.alpha \u003d 1"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let containerViewSize \u003d containerView.bounds.size"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let foregroundViewSize \u003d foregroundView.bounds.size"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // added first item"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var image \u003d containerView.takeSnapshot(CGRect(x: 0, y: 0, width: containerViewSize.width, height: foregroundViewSize.height))"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var imageView \u003d UIImageView(image: image)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        imageView.tag \u003d 0"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        imageView.layer.cornerRadius \u003d foregroundView.layer.cornerRadius"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        animationView?.addSubview(imageView)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // added secod item"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        image \u003d containerView.takeSnapshot(CGRect(x: 0, y: foregroundViewSize.height, width: containerViewSize.width, height: foregroundViewSize.height))"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        imageView \u003d UIImageView(image: image)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let rotatedView \u003d RotatedView(frame: imageView.frame)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        rotatedView.tag \u003d 1"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        rotatedView.layer.anchorPoint \u003d CGPoint(x: 0.5, y: 0)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        rotatedView.layer.transform \u003d rotatedView.transform3d()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        rotatedView.addSubview(imageView)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        animationView?.addSubview(rotatedView)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        rotatedView.frame \u003d CGRect(x: imageView.frame.origin.x, y: foregroundViewSize.height, width: containerViewSize.width, height: foregroundViewSize.height)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // added other views"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let itemHeight \u003d (containerViewSize.height - 2 * foregroundViewSize.height) / CGFloat(itemCount - 2)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if itemCount \u003d\u003d 2 {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            // decrease containerView height or increase itemCount"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            assert(containerViewSize.height - 2 * foregroundViewSize.height \u003d\u003d 0, \"contanerView.height too high\")"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            // decrease containerView height or increase itemCount"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            assert(containerViewSize.height - 2 * foregroundViewSize.height \u003e\u003d itemHeight, \"contanerView.height too high\")"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var yPosition \u003d 2 * foregroundViewSize.height"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var tag \u003d 2"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        for _ in 2 ..\u003c itemCount {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            image \u003d containerView.takeSnapshot(CGRect(x: 0, y: yPosition, width: containerViewSize.width, height: itemHeight))"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            imageView \u003d UIImageView(image: image)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let rotatedView \u003d RotatedView(frame: imageView.frame)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            rotatedView.addSubview(imageView)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            rotatedView.layer.anchorPoint \u003d CGPoint(x: 0.5, y: 0)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            rotatedView.layer.transform \u003d rotatedView.transform3d()"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            animationView?.addSubview(rotatedView)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            rotatedView.frame \u003d CGRect(x: 0, y: yPosition, width: rotatedView.bounds.size.width, height: itemHeight)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            rotatedView.tag \u003d tag"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            yPosition +\u003d itemHeight"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            tag +\u003d 1"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        containerView.alpha \u003d 0"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if let animationView \u003d self.animationView {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            // added back view"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            var previuosView: RotatedView?"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            for case let container as RotatedView in animationView.subviews.sorted(by: { $0.tag \u003c $1.tag })"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                where container.tag \u003e 0 \u0026\u0026 container.tag \u003c animationView.subviews.count {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                    previuosView?.addBackView(container.bounds.size.height, color: backViewColor)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                    previuosView \u003d container"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        animationItemViews \u003d createAnimationItemView()"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    fileprivate func removeImageItemsFromAnimationView() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let animationView \u003d self.animationView else {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        animationView.subviews.forEach({ $0.removeFromSuperview() })"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // MARK: public"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    /// Unfold cell."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    ///"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    /// - Parameters:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    ///   - value: unfold \u003d true; collapse \u003d false."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    ///   - animated: animate changes."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    ///   - completion: A block object to be executed when the animation sequence ends."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @objc open func unfold(_ value: Bool, animated: Bool \u003d true, completion: (() -\u003e Void)? \u003d nil) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if animated {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            value ? openAnimation(completion) : closeAnimation(completion)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            foregroundView.alpha \u003d value ? 0 : 1"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            containerView.alpha \u003d value ? 1 : 0"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @objc open func isAnimating() -\u003e Bool {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return animationView?.alpha \u003d\u003d 1 ? true : false"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // MARK: Animations"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @objc open func animationDuration(_ itemIndex: NSInteger, type: AnimationType) -\u003e TimeInterval {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return type \u003d\u003d .close ? durationsForCollapsedState[itemIndex] : durationsForExpandedState[itemIndex]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @objc open var durationsForExpandedState: [TimeInterval] \u003d []"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @objc open var durationsForCollapsedState: [TimeInterval] \u003d []"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func durationSequence(_ type: AnimationType) -\u003e [TimeInterval] {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var durations \u003d [TimeInterval]()"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        for i in 0 ..\u003c itemCount - 1 {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let duration \u003d animationDuration(i, type: type)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            durations.append(TimeInterval(duration / 2.0))"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            durations.append(TimeInterval(duration / 2.0))"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return durations"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func openAnimation(_ completion: (() -\u003e Void)?) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        isUnfolded \u003d true"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        removeImageItemsFromAnimationView()"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        addImageItemsToAnimationView()"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        animationView?.alpha \u003d 1"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        containerView.alpha \u003d 0"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let durations \u003d durationSequence(.open)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var delay: TimeInterval \u003d 0"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var timing \u003d convertFromCAMediaTimingFunctionName(CAMediaTimingFunctionName.easeIn)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var from: CGFloat \u003d 0.0"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var to: CGFloat \u003d -CGFloat.pi / 2"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var hidden \u003d true"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        configureAnimationItems(.open)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let animationItemViews \u003d self.animationItemViews else {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        for index in 0 ..\u003c animationItemViews.count {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let animatedView \u003d animationItemViews[index]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            animatedView.foldingAnimation(timing, from: from, to: to, duration: durations[index], delay: delay, hidden: hidden)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            from \u003d from \u003d\u003d 0.0 ? CGFloat.pi / 2 : 0.0"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            to \u003d to \u003d\u003d 0.0 ? -CGFloat.pi / 2 : 0.0"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            timing \u003d timing \u003d\u003d convertFromCAMediaTimingFunctionName(CAMediaTimingFunctionName.easeIn) ? convertFromCAMediaTimingFunctionName(CAMediaTimingFunctionName.easeOut) : convertFromCAMediaTimingFunctionName(CAMediaTimingFunctionName.easeIn)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            hidden \u003d !hidden"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            delay +\u003d durations[index]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let firstItemView \u003d animationView?.subviews.filter { $0.tag \u003d\u003d 0 }.first"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        firstItemView?.layer.masksToBounds \u003d true"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        DispatchQueue.main.asyncAfter(deadline: .now() + durations[0], execute: {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            firstItemView?.layer.cornerRadius \u003d 0"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        })"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        DispatchQueue.main.asyncAfter(deadline: .now() + delay) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.animationView?.alpha \u003d 0"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.containerView.alpha \u003d 1"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            completion?()"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func closeAnimation(_ completion: (() -\u003e Void)?) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        isUnfolded \u003d false"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        removeImageItemsFromAnimationView()"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        addImageItemsToAnimationView()"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let animationItemViews \u003d self.animationItemViews else {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            fatalError()"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        animationView?.alpha \u003d 1"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        containerView.alpha \u003d 0"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var durations: [TimeInterval] \u003d durationSequence(.close).reversed()"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var delay: TimeInterval \u003d 0"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var timing \u003d convertFromCAMediaTimingFunctionName(CAMediaTimingFunctionName.easeIn)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var from: CGFloat \u003d 0.0"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var to: CGFloat \u003d CGFloat.pi / 2"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var hidden \u003d true"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        configureAnimationItems(.close)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if durations.count \u003c animationItemViews.count {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            fatalError(\"wrong override func animationDuration(itemIndex:NSInteger, type:AnimationType)-\u003e NSTimeInterval\")"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        for index in 0 ..\u003c animationItemViews.count {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            let animatedView \u003d animationItemViews.reversed()[index]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            animatedView.foldingAnimation(timing, from: from, to: to, duration: durations[index], delay: delay, hidden: hidden)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            to \u003d to \u003d\u003d 0.0 ? CGFloat.pi / 2 : 0.0"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            from \u003d from \u003d\u003d 0.0 ? -CGFloat.pi / 2 : 0.0"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            timing \u003d timing \u003d\u003d convertFromCAMediaTimingFunctionName(CAMediaTimingFunctionName.easeIn) ? convertFromCAMediaTimingFunctionName(CAMediaTimingFunctionName.easeOut) : convertFromCAMediaTimingFunctionName(CAMediaTimingFunctionName.easeIn)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            hidden \u003d !hidden"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            delay +\u003d durations[index]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        DispatchQueue.main.asyncAfter(deadline: .now() + delay, execute: {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.animationView?.alpha \u003d 0"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            completion?()"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        })"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let firstItemView \u003d animationView?.subviews.filter { $0.tag \u003d\u003d 0 }.first"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        firstItemView?.layer.cornerRadius \u003d 0"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        firstItemView?.layer.masksToBounds \u003d true"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if let durationFirst \u003d durations.first {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            DispatchQueue.main.asyncAfter(deadline: .now() + delay - durationFirst * 2, execute: {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                firstItemView?.layer.cornerRadius \u003d self.foregroundView.layer.cornerRadius"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                firstItemView?.setNeedsDisplay()"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                firstItemView?.setNeedsLayout()"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            })"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// MARK: RotatedView"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "open class RotatedView: UIView {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private enum Const {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        static let rotationX \u003d \"rotation.x\""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        static let transformRotationX \u003d \"transform.rotation.x\""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var hiddenAfterAnimation \u003d false"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var backView: RotatedView?"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func addBackView(_ height: CGFloat, color: UIColor) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let view \u003d RotatedView(frame: CGRect.zero)"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        view.backgroundColor \u003d color"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        view.layer.anchorPoint \u003d CGPoint(x: 0.5, y: 1)"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        view.layer.transform \u003d view.transform3d()"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        view.translatesAutoresizingMaskIntoConstraints \u003d false"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.addSubview(view)"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        backView \u003d view"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        view.addConstraint(NSLayoutConstraint(item: view, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .height,"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                              multiplier: 1, constant: height))"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.addConstraints(["
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            NSLayoutConstraint(item: view, attribute: .top, relatedBy: .equal, toItem: self, attribute: .top, multiplier: 1,"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                               constant: self.bounds.size.height - height + height / 2),"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            NSLayoutConstraint(item: view, attribute: .leading, relatedBy: .equal, toItem: self, attribute: .leading,"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                               multiplier: 1, constant: 0),"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            NSLayoutConstraint(item: view, attribute: .trailing, relatedBy: .equal, toItem: self, attribute: .trailing,"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                               multiplier: 1, constant: 0),"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            ])"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "extension RotatedView: CAAnimationDelegate {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func rotatedX(_ angle: CGFloat) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var allTransofrom \u003d CATransform3DIdentity"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let rotateTransform \u003d CATransform3DMakeRotation(angle, 1, 0, 0)"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        allTransofrom \u003d CATransform3DConcat(allTransofrom, rotateTransform)"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        allTransofrom \u003d CATransform3DConcat(allTransofrom, transform3d())"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.layer.transform \u003d allTransofrom"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func transform3d() -\u003e CATransform3D {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var transform \u003d CATransform3DIdentity"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        transform.m34 \u003d 2.5 / -2000"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return transform"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // MARK: animations"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func foldingAnimation(_ timing: String, from: CGFloat, to: CGFloat, duration: TimeInterval, delay: TimeInterval, hidden: Bool) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let rotateAnimation \u003d CABasicAnimation(keyPath: Const.transformRotationX)"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        rotateAnimation.timingFunction \u003d CAMediaTimingFunction(name: convertToCAMediaTimingFunctionName(timing))"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        rotateAnimation.fromValue \u003d from"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        rotateAnimation.toValue \u003d to"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        rotateAnimation.duration \u003d duration"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        rotateAnimation.delegate \u003d self"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        rotateAnimation.fillMode \u003d CAMediaTimingFillMode.forwards"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        rotateAnimation.isRemovedOnCompletion \u003d false"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        rotateAnimation.beginTime \u003d CACurrentMediaTime() + delay"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.hiddenAfterAnimation \u003d hidden"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.layer.add(rotateAnimation, forKey: Const.rotationX)"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    public func animationDidStart(_: CAAnimation) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.layer.shouldRasterize \u003d true"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.alpha \u003d 1"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    public func animationDidStop(_: CAAnimation, finished _: Bool) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if hiddenAfterAnimation {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.alpha \u003d 0"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.layer.removeAllAnimations()"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.layer.shouldRasterize \u003d false"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.rotatedX(CGFloat(0))"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// MARK: UIView + extension"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "private extension UIView {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    "
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func takeSnapshot(_ frame: CGRect) -\u003e UIImage? {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let context \u003d UIGraphicsGetCurrentContext() else { return nil }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        context.translateBy(x: frame.origin.x * -1, y: frame.origin.y * -1)"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        layer.render(in: context)"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let image \u003d UIGraphicsGetImageFromCurrentImageContext()"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        UIGraphicsEndImageContext()"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return image"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// Helper function inserted by Swift 4.2 migrator."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "fileprivate func convertFromCAMediaTimingFunctionName(_ input: CAMediaTimingFunctionName) -\u003e String {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    return input.rawValue"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// Helper function inserted by Swift 4.2 migrator."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "fileprivate func convertToCAMediaTimingFunctionName(_ input: String) -\u003e CAMediaTimingFunctionName {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    return CAMediaTimingFunctionName(rawValue: input)"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "// swiftlint:enable all"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 511
    }
  },
  {
    "path": "bacon/view/ParentTagCell.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  ParentTagCell.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 11/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import UIKit"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "class ParentTagCell: UITableViewCell {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var canEdit \u003d false"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var childTags: [Tag] \u003d []"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var addChildAction: ((ParentTagCell) -\u003e Void)?"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var selectChildAction: ((Tag) -\u003e Void)?"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var unselectChildAction: ((Tag) -\u003e Void)?"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var deleteChildAction: ((IndexPath, ParentTagCell) -\u003e Void)?"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // swiftlint:disable private_outlet"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet weak var parentTagLabel: UILabel!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet weak var subTable: UITableView!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // swiftlint:enable private_outlet"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override func awakeFromNib() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        super.awakeFromNib()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        setUpTable()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override func setSelected(_ selected: Bool, animated: Bool) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        super.setSelected(selected, animated: animated)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if canEdit {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if selected {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            parentTagLabel.textColor \u003d UIColor.green.withAlphaComponent(0.5)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            parentTagLabel.textColor \u003d UIColor.black"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func setUpTable() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        subTable?.delegate \u003d self"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        subTable?.dataSource \u003d self"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBAction func addChildButtonPressed(_ sender: UIButton) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        addChildAction?(self)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "extension ParentTagCell: UITableViewDataSource, UITableViewDelegate {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return childTags.count"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let rawCell \u003d tableView.dequeueReusableCell(withIdentifier: \"ChildTagCell\", for: indexPath)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let childTagCell \u003d rawCell as? ChildTagCell else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return rawCell"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        childTagCell.childTagLabel.text \u003d childTags[indexPath.row].value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        childTagCell.canEdit \u003d canEdit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return childTagCell"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func tableView(_ tableView: UITableView,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                   commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        if editingStyle \u003d\u003d .delete {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            deleteChildAction?(indexPath, self)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            ParentTagCell.subTable.didSelectRowAt():"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            row\u003d\\(indexPath.row))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        selectTag(tag: childTags[indexPath.row])"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func tableView(_ tableView: UITableView, didDeselectRowAt indexPath: IndexPath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        log.info(\"\"\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            ParentTagCell.subTable.didDeselectRowAt():"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            row\u003d\\(indexPath.row))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            \"\"\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        unselectTag(tag: childTags[indexPath.row])"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func selectTag(tag: Tag) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        selectChildAction?(tag)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    private func unselectTag(tag: Tag) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        unselectChildAction?(tag)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 97
    }
  },
  {
    "path": "bacon/view/PreviewImageView.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  PreviewImageView.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 7/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import UIKit"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "class PreviewImageView: UIImageView {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var enlargedView: UIImageView?"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override init(frame: CGRect) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        super.init(frame: frame)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.prepare()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    required init?(coder aDecoder: NSCoder) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        super.init(coder: aDecoder)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.prepare()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func prepare() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(enlarge)))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        self.isUserInteractionEnabled \u003d true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // swiftlint:disable attributes"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @objc func enlarge() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let window \u003d UIApplication.shared.windows.first else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        enlargedView \u003d UIImageView(image: self.image)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        enlargedView?.alpha \u003d 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        enlargedView?.frame \u003d window.frame"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        enlargedView?.contentMode \u003d .scaleAspectFit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        enlargedView?.backgroundColor \u003d UIColor.black.withAlphaComponent(0.6)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        enlargedView?.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(reduce)))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        enlargedView?.isUserInteractionEnabled \u003d true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        UIView.animate(withDuration: 0.3) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.enlargedView?.alpha \u003d 1.0"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        guard let view \u003d enlargedView else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            return"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        window.addSubview(view)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @objc func reduce() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        UIView.animate(withDuration: 0.3, animations: {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.enlargedView?.alpha \u003d 0"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }, completion: { _ in"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.enlargedView?.removeFromSuperview()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "            self.enlargedView \u003d nil"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        })"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // swiftlint:enable attributes"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 59
    }
  },
  {
    "path": "bacon/view/TransactionCell.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  TransactionCell.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  bacon"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 27/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import UIKit"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "class TransactionCell: FoldingCell {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // swiftlint:disable private_outlet"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet weak var descriptionView: UILabel!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet weak var openTagView: UILabel!"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet weak var locationView: UILabel!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet weak var openTimeView: UILabel!"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet weak var openDateView: UILabel!"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet weak var iconView: UIImageView!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet weak var openAmountView: UILabel!"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet weak var closedTagView: UILabel!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet weak var closedAmountView: UILabel!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet weak var closedDateView: UILabel!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBOutlet weak var closedNumberView: UILabel!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // swiftlint:enable private_outlet"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var transaction: Transaction?"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    var editTransactionAction: ((Transaction?) -\u003e Void)?"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override func awakeFromNib() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        foregroundView.layer.cornerRadius \u003d 10"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        foregroundView.layer.masksToBounds \u003d true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        super.awakeFromNib()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    override func animationDuration(_ itemIndex: NSInteger, type: AnimationType) -\u003e TimeInterval {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // timing animation for each view"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        // durations count equal it itemCount"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let durations \u003d Constants.animatoinDuration"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        return durations[itemIndex]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    @IBAction func editButtonPressed(_ sender: UIButton) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        editTransactionAction?(transaction)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 46
    }
  },
  {
    "path": "baconTests/TestUtils.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  TestUtils.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  baconTests"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  TestUtils stores valid instances of class objects for testing."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Created by Travis Ching Jia Yea on 27/3/19."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import CoreLocation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "import UIKit"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "@testable import bacon"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "// swiftlint:disable type_body_length"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "class TestUtils {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // swiftlint:disable force_try"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // swiftlint:disable force_unwrapping"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // Tags"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    static let tagManager \u003d TagManager.create(testMode: true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    static let tagBills \u003d Tag(\"1\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    static let tagEducation \u003d Tag(\"2\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    static let tagEntertainment \u003d Tag(\"3\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    static let tagFood \u003d Tag(\"4\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    static let tagInvestment \u003d Tag(\"5\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    static let tagTransport \u003d Tag(\"6\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // Sample CLLocation instances naming conventions:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    //      - \u0027sampleCLLocation\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    //      - Number indicates a unique set of CLLocation properties"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    //      - Alphabet indicates multiple CLLocation instances with identical properties (optional)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // --------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    static let locationTimestamp \u003d Date(timeIntervalSince1970: 1_000)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    static let sampleCLLocation1A \u003d CLLocation(coordinate: CLLocationCoordinate2DMake(1, 2),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                               altitude: 3,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                               horizontalAccuracy: 4,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                               verticalAccuracy: 5,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                               course: 6,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                               speed: 7,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                               timestamp: locationTimestamp)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    static let sampleCLLocation1B \u003d CLLocation(coordinate: CLLocationCoordinate2DMake(1, 2),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                               altitude: 3,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                               horizontalAccuracy: 4,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                               verticalAccuracy: 5,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                               course: 6,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                               speed: 7,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                               timestamp: locationTimestamp)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    static let sampleCLLocation2 \u003d CLLocation(coordinate: CLLocationCoordinate2DMake(2, 3),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                              altitude: 4,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                              horizontalAccuracy: 5,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                              verticalAccuracy: 6,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                              course: 7,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                              speed: 8,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                              timestamp: locationTimestamp)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // Sample UIImages for testing:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // --------------------------------------------------"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let redHeartJpg \u003d UIImage(named: \"red-heart-jpg\")!"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let redHeartPng \u003d UIImage(named: \"red-heart-png\")!"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // Valid Transactions for testing naming convention:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    //     - \u0027valid / invalid\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    //     - \u0027Transaction\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    //     - The field that is constant (with the exception of date)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    //     - The number indicates the ordering of the date in the transaction"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    //       (Chronological order)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    //     * Note that excluding the constant field, the rest of the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    //       transaction properties should differ from each other."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // --------------------------------------------------"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // An array containing ALL valid transactions defined in TestUtils."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // Remember to update this if you are creating new valid transactions."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    static let validTransactions \u003d [validTransactionExpenditure01,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                       validTransactionExpenditure02,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                       validTransactionExpenditure03,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                       validTransactionExpenditure04,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                       validTransactionIncome01,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                       validTransactionIncome02,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                       validTransactionIncome03,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                       validTransactionFood01,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                       validTransactionFood02,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                       validTransactionFood03,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                       validTransactionTransportBill01,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                       validTransactionTransportBill02,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                       validTransactionTransportBill03,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                       validTransactionDate01,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                       validTransactionDate01point2,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                       validTransactionDate02,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                       validTransactionDate02point2,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                       validTransactionDate03,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                       validTransactionDate06point2,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                       validTransactionDate07point2,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                       validTransactionDate08point2]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // TRANSACTION - FREQUENCY - RECURRING"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    static let validTransactionRecurringDaily3Times \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try! Transaction(date: january1st2019time0800,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                         type: .expenditure,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                         frequency: try! TransactionFrequency(nature: .recurring,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                              interval: .daily,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                              repeats: 3),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                         tags: [tagEducation],"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                         amount: 12.69,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                         image: CodableUIImage(redHeartPng),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                         location: CodableCLLocation(sampleCLLocation1A))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    static let validTransactionRecurringMonthly5Times \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try! Transaction(date: january31st2019time1500,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                         type: .expenditure,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                         frequency: try! TransactionFrequency(nature: .recurring,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                              interval: .monthly,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                              repeats: 5),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                         tags: [tagEducation, tagFood],"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                         amount: 25.00,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                         image: CodableUIImage(redHeartPng),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                         location: CodableCLLocation(sampleCLLocation1A))"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // TRANSACTION - TYPE - EXPENDITURE"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let validTransactionExpenditure01 \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! Transaction(date: Date(timeIntervalSince1970: TimeInterval(0)),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         type: .expenditure,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         frequency: try! TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         tags: [tagEducation],"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         amount: 10.0,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         image: CodableUIImage(redHeartJpg),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         location: CodableCLLocation(sampleCLLocation1A))"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let validTransactionExpenditure02 \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! Transaction(date: Date(timeIntervalSince1970: TimeInterval(1_000)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         type: .expenditure,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         frequency: try! TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         tags: [tagEntertainment],"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         amount: 5.0,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         image: CodableUIImage(redHeartPng),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         location: CodableCLLocation(sampleCLLocation2))"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let validTransactionExpenditure03 \u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! Transaction(date: Date(timeIntervalSince1970: TimeInterval(2_000)),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         type: .expenditure,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         frequency: try! TransactionFrequency(nature: .recurring,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                              interval: .weekly,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                              repeats: 2),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         tags: [tagEntertainment],"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         amount: 5.0)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let validTransactionExpenditure04 \u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! Transaction(date: Date(timeIntervalSince1970: TimeInterval(3_000)),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         type: .expenditure,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         frequency: try! TransactionFrequency(nature: .recurring,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                              interval: .weekly,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                              repeats: 1),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         tags: [tagInvestment],"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         amount: 100.0)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // TRANSACTION - TYPE - INCOME"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let validTransactionIncome01 \u003d"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! Transaction(date: Date(timeIntervalSince1970: TimeInterval(0)),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         type: .income,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         frequency: try! TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         tags: [tagFood],"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         amount: 25.50)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let validTransactionIncome02 \u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! Transaction(date: Date(timeIntervalSince1970: TimeInterval(1_000)),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         type: .income,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         frequency: try! TransactionFrequency(nature: .recurring,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                              interval: .monthly,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                              repeats: 3),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         tags: [tagFood],"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         amount: 12.80,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         image: CodableUIImage(redHeartPng))"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let validTransactionIncome03 \u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! Transaction(date: Date(timeIntervalSince1970: TimeInterval(2_000)),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         type: .income,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         frequency: try! TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         tags: [tagBills],"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         amount: 1,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         location: CodableCLLocation(sampleCLLocation1B))"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // TRANSACTION - TAG - FOOD"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let validTransactionFood01 \u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! Transaction(date: Date(timeIntervalSince1970: TimeInterval(0)),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         type: .expenditure,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         frequency: try! TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         tags: [tagFood],"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         amount: 69.60)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let validTransactionFood02 \u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! Transaction(date: Date(timeIntervalSince1970: TimeInterval(1_000)),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         type: .expenditure,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         frequency: try! TransactionFrequency(nature: .recurring,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                              interval: .monthly,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                              repeats: 1),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         tags: [tagFood],"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         amount: 5.00,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         location: CodableCLLocation(sampleCLLocation1A))"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let validTransactionFood03 \u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! Transaction(date: Date(timeIntervalSince1970: TimeInterval(2_000)),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         type: .income,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         frequency: try! TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         tags: [tagFood],"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         amount: 1.50,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         image: CodableUIImage(redHeartJpg))"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // TRANSACTION - TAG - TRANSPORT"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let validTransactionTransportBill01 \u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! Transaction(date: Date(timeIntervalSince1970: TimeInterval(3_000)),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         type: .expenditure,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         frequency: try! TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         tags: [tagTransport, tagBills],"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         amount: 8.99,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         location: CodableCLLocation(sampleCLLocation2))"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let validTransactionTransportBill02 \u003d"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! Transaction(date: Date(timeIntervalSince1970: TimeInterval(4_000)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         type: .income,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         frequency: try! TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         tags: [tagBills, tagTransport],"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         amount: 5.0)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let validTransactionTransportBill03 \u003d"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! Transaction(date: Date(timeIntervalSince1970: TimeInterval(5_000)),"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         type: .expenditure,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         frequency: try! TransactionFrequency(nature: .recurring,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                              interval: .weekly,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                              repeats: 5),"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         tags: [tagTransport, tagBills],"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         amount: 25.0)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // TRANSACTION - TIME"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // An array containing ALL test dates defined in TestUtils."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // Remember to update this if you are creating a new valid date object."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    static let testDates \u003d [january1st2019time0800,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                            january1st2019time1000,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                            january2nd2019time1320,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                            january2nd2019time1500,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                            january5th2019time1230,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                            january5th2019time1208,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                            march26th2019time1108,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                            march26th2019time2345,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                            may20th2019time0125]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let january1st2019time0800 \u003d Constants.getDateFormatter().date(from: \"2019-01-01 08:00:00\")!"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let january1st2019time1000 \u003d Constants.getDateFormatter().date(from: \"2019-01-01 10:00:00\")!"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let january2nd2019time1320 \u003d Constants.getDateFormatter().date(from: \"2019-01-02 13:20:00\")!"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let january2nd2019time1500 \u003d Constants.getDateFormatter().date(from: \"2019-01-02 15:00:00\")!"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let january5th2019time1230 \u003d Constants.getDateFormatter().date(from: \"2019-01-05 12:30:00\")!"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let january5th2019time1208 \u003d Constants.getDateFormatter().date(from: \"2019-01-05 12:08:00\")!"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    static let january31st2019time1500 \u003d Constants.getDateFormatter().date(from: \"2019-01-31 15:00:00\")!"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    static let febuary21st2019time1700 \u003d Constants.getDateFormatter().date(from: \"2019-02-21 17:00:00\")!"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let march26th2019time1108 \u003d Constants.getDateFormatter().date(from: \"2019-03-26 11:08:00\")!"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let march26th2019time2025 \u003d Constants.getDateFormatter().date(from: \"2019-03-26 20:25:00\")!"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let march26th2019time2345 \u003d Constants.getDateFormatter().date(from: \"2019-03-26 23:45:00\")!"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let may20th2019time0125 \u003d Constants.getDateFormatter().date(from: \"2019-05-20 01:01:00\")!"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let validTransactionDate01 \u003d"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! Transaction(date: january1st2019time0800,"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         type: .expenditure,"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         frequency: try! TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         tags: [tagTransport],"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         amount: 12.60)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let validTransactionDate01point2 \u003d"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! Transaction(date: january1st2019time1000,"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         type: .income,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         frequency: try! TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         tags: [tagFood],"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         amount: 1.20,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         location: CodableCLLocation(sampleCLLocation1B))"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let validTransactionDate02 \u003d"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! Transaction(date: january2nd2019time1320,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         type: .expenditure,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         frequency: try! TransactionFrequency(nature: .recurring,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                              interval: .monthly,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                              repeats: 3),"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         tags: [tagBills],"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         amount: 150.00,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         image: CodableUIImage(redHeartPng))"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let validTransactionDate02point2 \u003d"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! Transaction(date: january2nd2019time1500,"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         type: .income,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         frequency: try! TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         tags: [tagFood],"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         amount: 13.70,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         location: CodableCLLocation(sampleCLLocation1A))"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let validTransactionDate03 \u003d"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! Transaction(date: january5th2019time1230,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         type: .expenditure,"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         frequency: try! TransactionFrequency(nature: .recurring,"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                              interval: .weekly,"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                              repeats: 5),"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                         tags: [tagTransport],"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                         amount: 40.0)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let validTransactionDate06point2 \u003d"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        try! Transaction(date: january5th2019time1208,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                         type: .expenditure,"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                         frequency: try! TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                         tags: [tagFood, tagTransport, tagEntertainment, tagBills, tagInvestment],"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                         amount: 5.80,"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                         location: CodableCLLocation(sampleCLLocation1A))"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let validTransactionDate07point2 \u003d"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        try! Transaction(date: march26th2019time1108,"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                         type: .expenditure,"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                         frequency: try! TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                         tags: [tagFood, tagTransport, tagBills],"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                         amount: 5.80,"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                         location: CodableCLLocation(sampleCLLocation1A))"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    static let validTransactionDate08point2 \u003d"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        try! Transaction(date: march26th2019time2345,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                         type: .expenditure,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                         frequency: try! TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                         tags: [tagFood, tagTransport],"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                         amount: 12.34,"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                         location: CodableCLLocation(sampleCLLocation1A))"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // VALID BUDGET INSTANCES"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let validBudget01 \u003d"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! Budget(from: january1st2019time0800, to: january2nd2019time1320, amount: 15)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    static let validBudget02 \u003d"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! Budget(from: january2nd2019time1500, to: january5th2019time1230, amount: 23)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // VALID PREDICTION INSTANCES"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    static let validPrediction01 \u003d try! Prediction(time: january1st2019time0800,"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                   location: CodableCLLocation(sampleCLLocation2),"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                   amount: 2.80,"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                   tags: [tagBills, tagFood])"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    static let validPrediction02 \u003d try! Prediction(time: january2nd2019time1320,"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                   location: CodableCLLocation(sampleCLLocation1A),"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                   amount: 13.50,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                   tags: [tagEducation, tagInvestment])"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    static let validPrediction03 \u003d try! Prediction(time: january5th2019time1230,"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                   location: CodableCLLocation(sampleCLLocation1B),"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                   amount: 26.30,"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                   tags: [tagEntertainment])"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // swiftlint:enable force_try"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // swiftlint:enable force_unwrapping"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "// swiftlint:enable type_body_length"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 45,
      "kumuwu": 36,
      "Fabian": 82,
      "Travis Ching Jia Yea": 174
    }
  },
  {
    "path": "baconTests/baconTests.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  baconTests.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  baconTests"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 19/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import XCTest"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": "@testable import bacon"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "class baconTests: XCTestCase {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    override func setUp() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Put setup code here. This method is called before the invocation of each test method in the class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    override func tearDown() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Put teardown code here. This method is called after the invocation of each test method in the class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func testExample() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // This is an example of a functional test case."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Use XCTAssert and related functions to verify your tests produce the correct results."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func testPerformanceExample() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // This is an example of a performance test case."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        self.measure {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            // Put the code you want to measure the time of here."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fabian": 34
    }
  },
  {
    "path": "baconTests/commons/CodableCLLocationTests.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  CodableCLLocationTests.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  baconTests"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 29/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import CoreLocation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import XCTest"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "@testable import bacon"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": "class CodableCLLocationTests: XCTestCase {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // swiftlint:disable force_try"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_equality() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // We test for \u003d\u003d, !\u003d, and isEqual()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(TestUtils.sampleCLLocation1A \u003d\u003d TestUtils.sampleCLLocation1B)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(TestUtils.sampleCLLocation1A !\u003d TestUtils.sampleCLLocation1B)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(TestUtils.sampleCLLocation1A, TestUtils.sampleCLLocation1B)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_inequality() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // We test for \u003d\u003d, !\u003d, and isEqual()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(TestUtils.sampleCLLocation1A \u003d\u003d TestUtils.sampleCLLocation2)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(TestUtils.sampleCLLocation1A !\u003d TestUtils.sampleCLLocation2)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertNotEqual(TestUtils.sampleCLLocation1A, TestUtils.sampleCLLocation2)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_encode_decode() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let testCodableLocation \u003d CodableCLLocation(TestUtils.sampleCLLocation1A)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let encoder \u003d JSONEncoder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let data \u003d try! encoder.encode(testCodableLocation)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let decoder \u003d JSONDecoder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let decodedLocation \u003d try! decoder.decode(CodableCLLocation.self, from: data)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(testCodableLocation, decodedLocation)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // swiftlint:enable force_try"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fabian": 42
    }
  },
  {
    "path": "baconTests/commons/CodableUIImageTests.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  CodableUIImageTests.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  baconTests"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 2/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import XCTest"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": "@testable import bacon"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "class CodableUIImageTests: XCTestCase {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // swiftlint:disable force_try"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_encode_decode_jpg() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let testImage \u003d TestUtils.redHeartJpg"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let encoder \u003d JSONEncoder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let encodedImageData \u003d try! encoder.encode(CodableUIImage(testImage))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let decoder \u003d JSONDecoder()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let decodedImage \u003d try! decoder.decode(CodableUIImage.self, from: encodedImageData)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let reconstructedImage \u003d decodedImage.image"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // testImage.isEqual(reconstructedImage) does not work (returns false)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // We can\u0027t use \u003d\u003d either (see: https://developer.apple.com/documentation/uikit/uiimage)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(testImage.pngData()?.base64EncodedString(), reconstructedImage.pngData()?.base64EncodedString())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_encode_decode_png() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let testImage \u003d TestUtils.redHeartPng"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let encoder \u003d JSONEncoder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let encodedImageData \u003d try! encoder.encode(CodableUIImage(testImage))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let decoder \u003d JSONDecoder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let decodedImage \u003d try! decoder.decode(CodableUIImage.self, from: encodedImageData)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let reconstructedImage \u003d decodedImage.image"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // testImage.isEqual(reconstructedImage) does not work (returns false)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // We can\u0027t use \u003d\u003d either (see: https://developer.apple.com/documentation/uikit/uiimage)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(testImage.pngData()?.base64EncodedString(), reconstructedImage.pngData()?.base64EncodedString())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // swiftlint:enable force_try"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fabian": 44,
      "Travis Ching Jia Yea": 2
    }
  },
  {
    "path": "baconTests/commons/ObserverTests.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  ObserverTests.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  baconTests"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 27/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import Foundation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import XCTest"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "@testable import bacon"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "class DummyObserver: Observer {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    var notifiedCount \u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func notify(_ value: Any) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        notifiedCount +\u003d 1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": "class DummyObservable: Observable {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    var observers: [Observer] \u003d []"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": "class ObserverTests: XCTestCase {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // Each test case includes logic for the following methods in Observable:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // - registerObserver"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // - notifyObservers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // - unregisterObserver"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_oneObservable_oneObserver() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let observer \u003d DummyObserver()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let observable \u003d DummyObservable()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        observable.registerObserver(observer)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(observer.notifiedCount, 0)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        observable.notifyObservers(\"\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(observer.notifiedCount, 1)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        observable.unregisterObserver(observer)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        observable.notifyObservers(\"\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(observer.notifiedCount, 1)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_oneObservable_multipleObservers() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let observer1 \u003d DummyObserver()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let observer2 \u003d DummyObserver()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let observable \u003d DummyObservable()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        observable.registerObserver(observer1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        observable.registerObserver(observer2)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(observer1.notifiedCount, 0)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(observer2.notifiedCount, 0)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        observable.notifyObservers(\"\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(observer1.notifiedCount, 1)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(observer2.notifiedCount, 1)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        observable.unregisterObserver(observer1)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        observable.notifyObservers(\"\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(observer1.notifiedCount, 1)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(observer2.notifiedCount, 2)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fabian": 64
    }
  },
  {
    "path": "baconTests/controller/CoreLogicTests.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  CoreLogicTests.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  baconTests"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Created by Travis Ching Jia Yea on 2/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "import XCTest"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "@testable import bacon"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "class CoreLogicTests: XCTestCase {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // swiftlint:disable force_try"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_init_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        XCTAssertNoThrow(try CoreLogic(tagManager: TagManager.create(testMode: true)))"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_getTotalTransactionsRecorded() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let coreLogic \u003d try! CoreLogic(tagManager: TagManager.create(testMode: true))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try coreLogic.clearAllTransactions())"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // getTotalTransactionsRecorded() should return 0 after clearing all transactions"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(coreLogic.getTotalTransactionsRecorded(), 0)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Record a transactions"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try coreLogic.recordTransaction(date: TestUtils.january1st2019time0800,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                         type: .expenditure,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                         frequency: TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                                         tags: [TestUtils.tagFood],"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                         amount: 16.50,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                         description: \"\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                         image: CodableUIImage(TestUtils.redHeartPng),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                         location: CodableCLLocation(TestUtils.sampleCLLocation2)))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(coreLogic.getTotalTransactionsRecorded(), 1)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_clearAllTransactions() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let coreLogic \u003d try! CoreLogic(tagManager: TagManager.create(testMode: true))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // If there are no transactions recorded, save a transaction"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        if coreLogic.getTotalTransactionsRecorded() \u003d\u003d 0 {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            XCTAssertNoThrow(try coreLogic.recordTransaction(date: TestUtils.january2nd2019time1320,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                             type: .expenditure,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                             frequency: TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                                             tags: [TestUtils.tagBills],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                             amount: 120.65,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                             description: \"Electric bill\"))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertTrue(coreLogic.getTotalTransactionsRecorded() \u003e 0)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try coreLogic.clearAllTransactions())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertTrue(coreLogic.getTotalTransactionsRecorded() \u003d\u003d 0)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_recordTransaction() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let coreLogic \u003d try! CoreLogic(tagManager: TagManager.create(testMode: true))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try coreLogic.clearAllTransactions())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(coreLogic.getTotalTransactionsRecorded(), 0)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let transaction \u003d try! Transaction(date: TestUtils.january5th2019time1230,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                           type: .income,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                           frequency: TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                           tags: [TestUtils.tagBills],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                           amount: 1_200,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                           description: \"Thailand 5 days 4 night.\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                           image: CodableUIImage(TestUtils.redHeartJpg),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                           location: CodableCLLocation(TestUtils.sampleCLLocation1A))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try coreLogic.recordTransaction(date: TestUtils.january5th2019time1230,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                         type: .income,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                         frequency: TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                                         tags: [TestUtils.tagBills],"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                         amount: 1_200,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                         description: \"Thailand 5 days 4 night.\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                         image: CodableUIImage(TestUtils.redHeartJpg),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                         location: CodableCLLocation(TestUtils.sampleCLLocation1A)))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Load the transaction out of database and check if its the one that was saved"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let loadedTransaction \u003d try! coreLogic.loadTransactions(month: 1, year: 2_019)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(transaction.equals(loadedTransaction[0]))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // swiftlint:disable function_body_length"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func test_getBreakdownByTag() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let coreLogic \u003d try! CoreLogic(tagManager: TagManager.create(testMode: true))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Clear database"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try coreLogic.clearAllTransactions())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(coreLogic.getTotalTransactionsRecorded(), 0)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Save some transactions"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try coreLogic.recordTransaction(date: TestUtils.january5th2019time1230,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         type: .expenditure,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         frequency: TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         tags: [TestUtils.tagBills],"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         amount: 1_200,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         description: \"Thailand 5 days 4 night.\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         image: CodableUIImage(TestUtils.redHeartJpg),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         location: CodableCLLocation(TestUtils.sampleCLLocation1A)))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try coreLogic.recordTransaction(date: TestUtils.febuary21st2019time1700,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         type: .expenditure,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         frequency: TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         tags: [TestUtils.tagFood],"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         amount: 1_200,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         description: \"Thailand 5 days 4 night.\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         image: CodableUIImage(TestUtils.redHeartJpg),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         location: CodableCLLocation(TestUtils.sampleCLLocation1A)))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try coreLogic.recordTransaction(date: TestUtils.march26th2019time1108,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         type: .expenditure,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         frequency: TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         tags: [TestUtils.tagBills,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                                TestUtils.tagEducation],"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         amount: 1_200,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         description: \"Thailand 5 days 4 night.\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         image: CodableUIImage(TestUtils.redHeartJpg),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         location: CodableCLLocation(TestUtils.sampleCLLocation1A)))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try coreLogic.recordTransaction(date: TestUtils.march26th2019time2025,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         type: .expenditure,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         frequency: TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         tags: [TestUtils.tagFood],"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         amount: 1_200,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         description: \"Thailand 5 days 4 night.\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         image: CodableUIImage(TestUtils.redHeartJpg),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         location: CodableCLLocation(TestUtils.sampleCLLocation1A)))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Check breakdown code"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let breakdown \u003d try! coreLogic.getBreakdownByTag(from: TestUtils.january5th2019time1208,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         to: TestUtils.march26th2019time2345,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         for: [TestUtils.tagFood,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                               TestUtils.tagBills,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                               TestUtils.tagEducation])"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let expectedBreakdown: [Tag: Double] \u003d [TestUtils.tagBills: 2_400,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                TestUtils.tagFood: 2_400,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                TestUtils.tagEducation: 1_200]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        var index \u003d 0"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        for tags in breakdown.0 {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            XCTAssertEqual(expectedBreakdown[tags], breakdown.1[index])"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            index +\u003d 1"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func test_getBreakdownByTime() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let coreLogic \u003d try! CoreLogic(tagManager: TagManager.create(testMode: true))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Clear database"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try coreLogic.clearAllTransactions())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(coreLogic.getTotalTransactionsRecorded(), 0)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Save some transactions"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try coreLogic.recordTransaction(date: TestUtils.january5th2019time1230,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         type: .income,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         frequency: TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         tags: [TestUtils.tagBills],"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         amount: 1_200,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         description: \"Thailand 5 days 4 night.\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         image: CodableUIImage(TestUtils.redHeartJpg),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         location: CodableCLLocation(TestUtils.sampleCLLocation1A)))"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try coreLogic.recordTransaction(date: TestUtils.febuary21st2019time1700,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         type: .income,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         frequency: TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         tags: [TestUtils.tagBills],"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         amount: 1_200,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         description: \"Thailand 5 days 4 night.\","
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         image: CodableUIImage(TestUtils.redHeartJpg),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         location: CodableCLLocation(TestUtils.sampleCLLocation1A)))"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try coreLogic.recordTransaction(date: TestUtils.march26th2019time1108,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         type: .income,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         frequency: TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         tags: [TestUtils.tagBills],"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         amount: 1_200,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         description: \"Thailand 5 days 4 night.\","
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         image: CodableUIImage(TestUtils.redHeartJpg),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         location: CodableCLLocation(TestUtils.sampleCLLocation1A)))"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try coreLogic.recordTransaction(date: TestUtils.march26th2019time2025,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         type: .income,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         frequency: TransactionFrequency(nature: .oneTime),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         tags: [TestUtils.tagBills],"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         amount: 1_200,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         description: \"Thailand 5 days 4 night.\","
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         image: CodableUIImage(TestUtils.redHeartJpg),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                         location: CodableCLLocation(TestUtils.sampleCLLocation1A)))"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Check breakdown by time"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let breakdown \u003d try! coreLogic.getBreakdownByTime(from: TestUtils.january5th2019time1208,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                                          to: TestUtils.march26th2019time2345)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let monthYearArray: [(Int, Int)] \u003d [(1, 2_019), (2, 2_019), (3, 2_019)]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let amountArray: [Double] \u003d [1_200, 1_200, 2_400]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        var index \u003d 0"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let array \u003d breakdown.0"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        for (month, year) in array {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            XCTAssertEqual(month, monthYearArray[index].0)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            XCTAssertEqual(year, monthYearArray[index].1)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            index +\u003d 1"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(breakdown.1, amountArray)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // swiftlint:enable function_body_length"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 110,
      "kumuwu": 4,
      "Fabian": 5,
      "Travis Ching Jia Yea": 67
    }
  },
  {
    "path": "baconTests/controller/LocationPromptTests.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  LocationPromptTests.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  baconTests"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 18/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import CoreLocation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import XCTest"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "@testable import bacon"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": "class LocationPromptTests: XCTestCase {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // This test case is meaningless."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    // It\u0027s a driver program for manually checking that the function works as intended."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_driver() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let expectation \u003d XCTestExpectation(description: \"It should work\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let testLocation \u003d CLLocation(latitude: 1.318_905_181_740_772_6,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                      longitude: 103.816_852_756_314_74) // Bukit Timah Campus"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        LocationPrompt.shouldPromptUser(currentLocation: testLocation) { _ in"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            XCTAssertTrue(true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            expectation.fulfill()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        wait(for: [expectation], timeout: 10)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 1,
      "Fabian": 27
    }
  },
  {
    "path": "baconTests/model/budget/BudgetTests.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  BudgetTests.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  baconTests"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Created by Travis Ching Jia Yea on 8/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "import XCTest"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "@testable import bacon"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "class BudgetTests: XCTestCase {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // swiftlint:disable force_try"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_init_validInput_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let budget \u003d try! Budget(from: TestUtils.january1st2019time0800,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                 to: TestUtils.january2nd2019time1320,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                 amount: 10)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(budget.fromDate, TestUtils.january1st2019time0800)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(budget.toDate, TestUtils.january2nd2019time1320)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(budget.amount, 10)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_init_invalidNegativeAmount() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertThrowsError(try Budget(from: TestUtils.january1st2019time1000,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                        to: TestUtils.january5th2019time1230,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                        amount: -1)) { err in"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                            XCTAssertTrue(type(of: err) \u003d\u003d InitializationError.self)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_init_invalidPeriod() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // \u0027from\u0027 occurs later than \u0027to\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertThrowsError(try Budget(from: TestUtils.january5th2019time1230,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                        to: TestUtils.january1st2019time1000,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                        amount: 0)) { err in"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                            XCTAssertTrue(type(of: err) \u003d\u003d InitializationError.self)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // \u0027from\u0027 and \u0027to\u0027 are exactly the same"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Budget is supposed to take in a time period not a single point in time"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertThrowsError(try Budget(from: TestUtils.january2nd2019time1320,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                        to: TestUtils.january2nd2019time1320,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                        amount: 12)) { err in"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                            XCTAssertTrue(type(of: err) \u003d\u003d InitializationError.self)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // swiftlint:enable force_try"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Travis Ching Jia Yea": 47
    }
  },
  {
    "path": "baconTests/model/prediction/PredictionGeneratorTests.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  PredictionGeneratorTests.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  baconTests"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 15/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import XCTest"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "@testable import bacon"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "class PredictionGeneratorTests: XCTestCase {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // swiftlint:disable force_try"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func test_predict() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let generator \u003d PredictionGenerator()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let pastTransactions \u003d [TestUtils.validTransactionDate01,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                TestUtils.validTransactionDate01point2,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                TestUtils.validTransactionDate02,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                TestUtils.validTransactionDate03,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                TestUtils.validTransactionDate06point2,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                TestUtils.validTransactionDate07point2]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let referenceTime \u003d TestUtils.january5th2019time1230"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let referenceLocation \u003d CodableCLLocation(TestUtils.sampleCLLocation1A)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var expectedTags \u003d Set\u003cTag\u003e()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        expectedTags.insert(TestUtils.tagFood)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        expectedTags.insert(TestUtils.tagTransport)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        expectedTags.insert(TestUtils.tagBills)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let expectedPrediction \u003d try! Prediction(time: referenceTime, location: referenceLocation,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                                 amount: 5.80, tags: expectedTags)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        XCTAssertEqual(generator.predict(referenceTime, referenceLocation, pastTransactions), expectedPrediction)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func test_predict_with_no_similar_transactions() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let generator \u003d PredictionGenerator()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let pastTransactions \u003d [TestUtils.validTransactionDate01,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                TestUtils.validTransactionDate01point2,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                TestUtils.validTransactionDate02,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                TestUtils.validTransactionDate03,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                TestUtils.validTransactionDate06point2,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                TestUtils.validTransactionDate07point2]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let referenceTime \u003d TestUtils.march26th2019time2025"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let referenceLocation \u003d CodableCLLocation(TestUtils.sampleCLLocation1A)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let expectedTags \u003d Set\u003cTag\u003e()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let expectedPrediction \u003d try! Prediction(time: referenceTime, location: referenceLocation,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                                 amount: 0.00, tags: expectedTags)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        XCTAssertEqual(generator.predict(referenceTime, referenceLocation, pastTransactions), expectedPrediction)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func test_predict_with_wrap_around_at_midnight() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let generator \u003d PredictionGenerator()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let pastTransactions \u003d [TestUtils.validTransactionDate01,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                TestUtils.validTransactionDate01point2,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                TestUtils.validTransactionDate02,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                TestUtils.validTransactionDate03,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                TestUtils.validTransactionDate06point2,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                TestUtils.validTransactionDate07point2,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                TestUtils.validTransactionDate08point2]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let referenceTime \u003d TestUtils.march26th2019time2345"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let referenceLocation \u003d CodableCLLocation(TestUtils.sampleCLLocation1A)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        var expectedTags \u003d Set\u003cTag\u003e()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        expectedTags.insert(TestUtils.tagFood)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        expectedTags.insert(TestUtils.tagTransport)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let expectedPrediction \u003d try! Prediction(time: referenceTime, location: referenceLocation,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                                 amount: 12.34, tags: expectedTags)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        XCTAssertEqual(generator.predict(referenceTime, referenceLocation, pastTransactions), expectedPrediction)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // swiftlint:enable force_try"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 68
    }
  },
  {
    "path": "baconTests/model/prediction/PredictionTests.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  PredictionTests.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  baconTests"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Created by Lizhi Zhang on 15/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "import XCTest"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "@testable import bacon"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "class PredictionTests: XCTestCase {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // swiftlint:disable force_try"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func test_init_validInput_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        let prediction \u003d try! Prediction(time: TestUtils.january1st2019time0800,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                         location: CodableCLLocation(TestUtils.sampleCLLocation2),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                         amount: 15.5,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                         tags: Set\u003cTag\u003e())"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        XCTAssertEqual(prediction.time, TestUtils.january1st2019time0800)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        XCTAssertEqual(prediction.location.location, TestUtils.sampleCLLocation2)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        XCTAssertEqual(prediction.amountPredicted, 15.5)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        XCTAssertEqual(prediction.tagsPredicted, Set\u003cTag\u003e())"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kumuwu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    func test_init_invalidNegativeAmount() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        XCTAssertThrowsError(try Prediction(time: TestUtils.january1st2019time0800,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                            location: CodableCLLocation(TestUtils.sampleCLLocation2),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                            amount: -1.0,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                            tags: Set\u003cTag\u003e())) { err in"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "                                            XCTAssertTrue(type(of: err) \u003d\u003d InitializationError.self)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "    // swiftlint:enable force_try"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kumuwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kumuwu": 34
    }
  },
  {
    "path": "baconTests/model/storage/StorageManagerTests.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  StorageManagerTests.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  baconTests"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Created by Travis Ching Jia Yea on 23/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "import XCTest"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "@testable import bacon"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "// swiftlint:disable file_length"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "// swiftlint:disable type_body_length"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "class StorageManagerTests: XCTestCase {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // swiftlint:disable force_try"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // swiftlint:disable force_unwrapping"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_init_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try StorageManager())"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // -----Transaction Related Tests-----"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_getNumberOfTransactionsInDatabase() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.clearTransactionDatabase())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Empty database should return 0 for getNumberOfTransactionsInDatabase()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(database.getNumberOfTransactionsInDatabase(), 0)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Add some transactions into database"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(TestUtils.validTransactionExpenditure01))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(TestUtils.validTransactionExpenditure02))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(database.getNumberOfTransactionsInDatabase(), 2)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_clearTransactionDatabase() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // If database is empty, save a transaction"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        if database.getNumberOfTransactionsInDatabase() \u003d\u003d 0 {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            XCTAssertNoThrow(try database.saveTransaction(TestUtils.validTransactionExpenditure01))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertTrue(database.getNumberOfTransactionsInDatabase() \u003e 0)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.clearTransactionDatabase())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertTrue(database.getNumberOfTransactionsInDatabase() \u003d\u003d 0)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_saveTransaction() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.clearTransactionDatabase())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(database.getNumberOfTransactionsInDatabase(), 0)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(TestUtils.validTransactionExpenditure01))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Load the transaction out of database and check if its the one that was saved"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let loadedTransaction \u003d try! database.loadTransactions(ofType: .expenditure, limit: 1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(TestUtils.validTransactionExpenditure01.equals(loadedTransaction[0]))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_deleteTransaction() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Clear database"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.clearTransactionDatabase())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(database.getNumberOfTransactionsInDatabase(), 0)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Test deleting empty database"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertThrowsError(try database.deleteTransaction(TestUtils.validTransactionDate01))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Save some transactions"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let transactions \u003d [TestUtils.validTransactionDate03,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                            TestUtils.validTransactionDate02,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                            TestUtils.validTransactionDate01]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(transactions[1]))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(transactions[2]))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(transactions[0]))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Check transactions are saved in the database"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        var loadedTransactions \u003d try! database.loadTransactions(limit: 3)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(transactions.count, loadedTransactions.count)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        for (index, transaction) in transactions.enumerated() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            XCTAssertTrue(transaction.equals(loadedTransactions[index]))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Remove 2 transactions"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.deleteTransaction(loadedTransactions[2]))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.deleteTransaction(loadedTransactions[1]))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Check if the 2 transactions are really deleted"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        loadedTransactions \u003d try! database.loadTransactions(limit: 3)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(loadedTransactions.count, 1)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(transactions[0].equals(loadedTransactions[0]))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func test_deleteTagFromTransactions() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Clear database"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try database.clearTransactionDatabase())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(database.getNumberOfTransactionsInDatabase(), 0)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Test deleting empty database"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try database.deleteTagFromTransactions(TestUtils.tagFood))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Save some transactions"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let transportBillTransaction \u003d TestUtils.validTransactionTransportBill02.duplicate()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let foodTransactions02 \u003d TestUtils.validTransactionFood03.duplicate()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let foodTransactions01 \u003d TestUtils.validTransactionFood01.duplicate()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let transactions \u003d [transportBillTransaction,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                            foodTransactions02,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                            foodTransactions01]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(transactions[1]))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(transactions[2]))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(transactions[0]))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Check transactions are saved in the database"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        var loadedTransactions \u003d try! database.loadTransactions(limit: 3)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(transactions.count, loadedTransactions.count)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        for (index, transaction) in transactions.enumerated() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            XCTAssertTrue(transaction.equals(loadedTransactions[index]))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Remove food tag"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(try database.loadTransactions(ofTag: TestUtils.tagFood).count, 2)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try database.deleteTagFromTransactions(TestUtils.tagFood))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(try database.loadTransactions(ofTag: TestUtils.tagFood).count, 0)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Remove bills tag"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(try database.loadTransactions(ofTag: TestUtils.tagBills).count, 1)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try database.deleteTagFromTransactions(TestUtils.tagBills))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(try database.loadTransactions(ofTag: TestUtils.tagBills).count, 0)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Check transactions are updated"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        var transaction01Tags \u003d transactions[0].tags"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        var transaction02Tags \u003d transactions[1].tags"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        var transaction03Tags \u003d transactions[2].tags"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        transaction01Tags.remove(TestUtils.tagBills)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        transaction02Tags.remove(TestUtils.tagFood)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        transaction03Tags.remove(TestUtils.tagFood)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try! transactions[0].edit(tags: transaction01Tags)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try! transactions[1].edit(tags: transaction02Tags)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try! transactions[2].edit(tags: transaction03Tags)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        loadedTransactions \u003d try! database.loadTransactions(limit: 3)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(loadedTransactions.count, 3)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        for (index, transaction) in transactions.enumerated() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            XCTAssertTrue(transaction.equals(loadedTransactions[index]))"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_updateTransaction() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Clear database"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.clearTransactionDatabase())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(database.getNumberOfTransactionsInDatabase(), 0)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Test updating empty database"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertThrowsError(try database.updateTransaction(TestUtils.validTransactionDate01))"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Save some transactions"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        var transactions \u003d [TestUtils.validTransactionIncome03,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                            TestUtils.validTransactionIncome02,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                            TestUtils.validTransactionIncome01]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(transactions[0]))"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(transactions[2]))"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(transactions[1]))"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Check transactions are saved in the database"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        var loadedTransactions \u003d try! database.loadTransactions(limit: 5)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(transactions.count, loadedTransactions.count)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        for (index, transaction) in transactions.enumerated() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            XCTAssertTrue(transaction.equals(loadedTransactions[index]))"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Update one of the loaded transaction"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let updatedTransaction \u003d loadedTransactions[0]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Original amount is 1"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! updatedTransaction.edit(amount: 500.11)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Update in database"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.updateTransaction(updatedTransaction))"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Check transaction is indeed updated in the database"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let updatedLoadedTransactions \u003d try! database.loadTransactions(limit: 5)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(updatedLoadedTransactions.count, 3)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        transactions[0] \u003d updatedTransaction"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        for (index, transaction) in updatedLoadedTransactions.enumerated() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            XCTAssertTrue(transaction.equals(loadedTransactions[index]))"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_loadAllTransactions() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Clear database"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! database.clearTransactionDatabase()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(database.getNumberOfTransactionsInDatabase(), 0)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Test loading empty database"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertTrue(try database.loadAllTransactions().isEmpty)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Save multiple transactions"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let transactions \u003d [TestUtils.validTransactionDate03,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                            TestUtils.validTransactionDate02,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                            TestUtils.validTransactionDate01]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        for transaction in transactions {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            XCTAssertNoThrow(try database.saveTransaction(transaction))"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let loadedTransactions \u003d try! database.loadAllTransactions()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(transactions.count, loadedTransactions.count)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Check that the transactions loaded out are equal and in reverse chronological order"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        for (index, transaction) in transactions.enumerated() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            XCTAssertTrue(transaction.equals(loadedTransactions[index]))"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_loadTransactions_limit() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Clear database"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! database.clearTransactionDatabase()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(database.getNumberOfTransactionsInDatabase(), 0)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Test loading empty database"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertTrue(try database.loadTransactions(limit: 10).isEmpty)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertTrue(try database.loadTransactions(limit: 0).isEmpty)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Save transactions of different type"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let transactions \u003d [TestUtils.validTransactionExpenditure04,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                            TestUtils.validTransactionExpenditure03,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                            TestUtils.validTransactionIncome02,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                            TestUtils.validTransactionExpenditure01]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(transactions[1]))"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(transactions[2]))"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(transactions[0]))"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(transactions[3]))"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let loadedTransactions \u003d try! database.loadTransactions(limit: 4)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(loadedTransactions.count, 4)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Check that the transactions loaded out are equal and in reverse chronological order"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        for (index, transaction) in transactions.enumerated() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            XCTAssertTrue(transaction.equals(loadedTransactions[index]))"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_invalid_loadTransactions_limit() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertThrowsError(try database.loadTransactions(limit: -1))"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_loadTransactions_after() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Clear database"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! database.clearTransactionDatabase()"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(database.getNumberOfTransactionsInDatabase(), 0)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Test loading empty database"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertTrue(try database.loadTransactions(after: TestUtils.january1st2019time0800, limit: 10).isEmpty)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertTrue(try database.loadTransactions(after: TestUtils.january1st2019time0800, limit: 0).isEmpty)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Save transactions"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let transactions \u003d [TestUtils.validTransactionDate03,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                            TestUtils.validTransactionDate01point2]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(TestUtils.validTransactionDate01))"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(TestUtils.validTransactionDate01point2))"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(TestUtils.validTransactionDate03))"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let loadedTransactions \u003d try! database.loadTransactions(after: TestUtils.january1st2019time0800, limit: 5)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(loadedTransactions.count, 2)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Check that the transactions loaded out are equal and in reverse chronological order"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        for (index, transaction) in transactions.enumerated() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            XCTAssertTrue(transaction.equals(loadedTransactions[index]))"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Test limit"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let limitedTransactions \u003d try! database.loadTransactions(after: TestUtils.january1st2019time0800, limit: 1)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(limitedTransactions.count, 1)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_invalid_loadTransactions_after() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertThrowsError(try database.loadTransactions(after: TestUtils.january5th2019time1230, limit: -1))"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_loadTransactions_before() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Clear database"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! database.clearTransactionDatabase()"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(database.getNumberOfTransactionsInDatabase(), 0)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Test loading empty database"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertTrue(try database.loadTransactions(before: TestUtils.january1st2019time0800, limit: 10).isEmpty)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertTrue(try database.loadTransactions(before: TestUtils.january1st2019time0800, limit: 0).isEmpty)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Save transactions"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let transactions \u003d [TestUtils.validTransactionDate01point2,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                            TestUtils.validTransactionDate01]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(TestUtils.validTransactionDate01))"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(TestUtils.validTransactionDate01point2))"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(TestUtils.validTransactionDate03))"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let loadedTransactions \u003d try! database.loadTransactions(before: TestUtils.january5th2019time1230, limit: 5)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(loadedTransactions.count, 2)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Check that the transactions loaded out are equal and in reverse chronological order"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        for (index, transaction) in transactions.enumerated() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            XCTAssertTrue(transaction.equals(loadedTransactions[index]))"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Test limit"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let limitedTransactions \u003d try! database.loadTransactions(before: TestUtils.january5th2019time1230, limit: 1)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(limitedTransactions.count, 1)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_invalid_loadTransactions_before() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertThrowsError(try database.loadTransactions(before: TestUtils.january5th2019time1230, limit: -3))"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_loadTransactions_from_to() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Clear database"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! database.clearTransactionDatabase()"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(database.getNumberOfTransactionsInDatabase(), 0)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Test loading empty database"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertTrue(try database.loadTransactions(from: TestUtils.january1st2019time0800,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                    to: TestUtils.january5th2019time1230).isEmpty)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Save transactions"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let transactions \u003d [TestUtils.validTransactionDate02point2,"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                            TestUtils.validTransactionDate02,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                            TestUtils.validTransactionDate01point2]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(TestUtils.validTransactionDate01))"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(TestUtils.validTransactionDate01point2))"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(TestUtils.validTransactionDate02))"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(TestUtils.validTransactionDate02point2))"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(TestUtils.validTransactionDate03))"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let loadedTransactions \u003d try! database.loadTransactions(from: TestUtils.january1st2019time1000,"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                                                to: TestUtils.january2nd2019time1500)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(loadedTransactions.count, 3)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Check that the transactions loaded out are equal and in reverse chronological order"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        for (index, transaction) in transactions.enumerated() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            XCTAssertTrue(transaction.equals(loadedTransactions[index]))"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_loadTransactions_OfType() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Clear database"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! database.clearTransactionDatabase()"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(database.getNumberOfTransactionsInDatabase(), 0)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Test loading empty database"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertTrue(try database.loadTransactions(ofType: .income, limit: 10).isEmpty)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertTrue(try database.loadTransactions(ofType: .expenditure, limit: 0).isEmpty)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Save 3 transactions of type expenditure"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let expenditureTransactions \u003d [TestUtils.validTransactionExpenditure03,"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                       TestUtils.validTransactionExpenditure02,"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                       TestUtils.validTransactionExpenditure01]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(expenditureTransactions[2]))"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(expenditureTransactions[1]))"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(expenditureTransactions[0]))"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let loadedExpenditureTransactions \u003d try! database.loadTransactions(ofType: .expenditure, limit: 5)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(loadedExpenditureTransactions.count, 3)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Check that the transactions loaded out are equal and in reverse chronological order"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        for (index, transaction) in expenditureTransactions.enumerated() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            XCTAssertTrue(transaction.equals(loadedExpenditureTransactions[index]))"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Save 3 transactions of type income"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let incomeTransactions \u003d [TestUtils.validTransactionIncome03,"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                  TestUtils.validTransactionIncome02,"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                  TestUtils.validTransactionIncome01]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(incomeTransactions[2]))"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(incomeTransactions[1]))"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertNoThrow(try database.saveTransaction(incomeTransactions[0]))"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let loadedIncomeTransactions \u003d try! database.loadTransactions(ofType: .income, limit: 5)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(loadedIncomeTransactions.count, 3)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Check that the transactions loaded out are equal and in reverse chronological order"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        for (index, transaction) in incomeTransactions.enumerated() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            XCTAssertTrue(transaction.equals(loadedIncomeTransactions[index]))"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Test limit"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let loadedTransactions \u003d try! database.loadTransactions(ofType: .income, limit: 1)"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(loadedTransactions.count, 1)"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_invalid_loadTransactions_OfType() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertThrowsError(try database.loadTransactions(ofType: .expenditure, limit: -1))"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     func test_loadTransactions_OfCategory() {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     // Clear database"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     try! database.clearTransactionDatabase()"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     XCTAssertEqual(database.getNumberOfTransactionsInDatabase(), 0)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     // Test loading empty database"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     XCTAssertTrue(try database.loadTransactions(ofCategory: .bills, limit: 10).isEmpty)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     XCTAssertTrue(try database.loadTransactions(ofCategory: .bills, limit: 0).isEmpty)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     // Save 3 transactions of category .food"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     let foodTransactions \u003d [TestUtils.validTransactionFood03,"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     TestUtils.validTransactionFood02,"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     TestUtils.validTransactionFood01]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     XCTAssertNoThrow(try database.saveTransaction(foodTransactions[2]))"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     XCTAssertNoThrow(try database.saveTransaction(foodTransactions[1]))"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     XCTAssertNoThrow(try database.saveTransaction(foodTransactions[0]))"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     let loadedFoodTransactions \u003d try! database.loadTransactions(ofCategory: .food, limit: 5)"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     XCTAssertEqual(loadedFoodTransactions.count, 3)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     // Check that the transactions loaded out are equal and in reverse chronological order"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Fabian"
        },
        "content": "     for (index, transaction) in foodTransactions.enumerated() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Fabian"
        },
        "content": "     XCTAssertTrue(transaction.equals(loadedFoodTransactions[index]))"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Fabian"
        },
        "content": "     }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Fabian"
        },
        "content": "     "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     // Save 3 transactinos of category .transport"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     let transportTransactions \u003d [TestUtils.validTransactionTransport03,"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     TestUtils.validTransactionTransport02,"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     TestUtils.validTransactionTransport01]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     XCTAssertNoThrow(try database.saveTransaction(transportTransactions[1]))"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     XCTAssertNoThrow(try database.saveTransaction(transportTransactions[2]))"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     XCTAssertNoThrow(try database.saveTransaction(transportTransactions[0]))"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     let loadedTransportTransactions \u003d try! database.loadTransactions(ofCategory: .transport, limit: 3)"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     XCTAssertEqual(loadedTransportTransactions.count, 3)"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     // Check that the transactions loaded out are equal and in reverse chronological order"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Fabian"
        },
        "content": "     for (index, transaction) in transportTransactions.enumerated() {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Fabian"
        },
        "content": "     XCTAssertTrue(transaction.equals(loadedTransportTransactions[index]))"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Fabian"
        },
        "content": "     }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     // Test limit"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     let loadedTransactions \u003d try! database.loadTransactions(ofCategory: .food, limit: 1)"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     XCTAssertEqual(loadedTransactions.count, 1)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     func test_invalid_loadTransactions_OfCategory() {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     XCTAssertThrowsError(try database.loadTransactions(ofCategory: .travel, limit: -1))"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_loadTransactions_OfTags() {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Clear database"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        try! database.clearTransactionDatabase()"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(database.getNumberOfTransactionsInDatabase(), 0)"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Test loading empty database"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertTrue(try database.loadTransactions(ofTag: TestUtils.tagFood).isEmpty)"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Save 6 transactions of tags \"food\" \"transport\" \"bill\""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let foodTransactions \u003d [TestUtils.validTransactionFood03,"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                TestUtils.validTransactionFood02,"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                TestUtils.validTransactionFood01]"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        let transportBillTransactions \u003d [TestUtils.validTransactionTransportBill03,"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                         TestUtils.validTransactionTransportBill02,"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                         TestUtils.validTransactionTransportBill01]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        for transaction in foodTransactions {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            XCTAssertNoThrow(try database.saveTransaction(transaction))"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        for transaction in transportBillTransactions {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            XCTAssertNoThrow(try database.saveTransaction(transaction))"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Test loading"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let loadedFoodTransactions \u003d try! database.loadTransactions(ofTag: TestUtils.tagFood)"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(loadedFoodTransactions.count, foodTransactions.count)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Check that the transactions with the tag \"food\" loaded out are equal and in reverse chronological order"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        for (index, transaction) in foodTransactions.enumerated() {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            XCTAssertTrue(transaction.equals(loadedFoodTransactions[index]))"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let loadedBillTransactions \u003d try! database.loadTransactions(ofTag: TestUtils.tagBills)"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        XCTAssertEqual(loadedBillTransactions.count, transportBillTransactions.count)"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Check that the transactions with the tag \"bill\" loaded out are equal and in reverse chronological order"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        for (index, transaction) in transportBillTransactions.enumerated() {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "            XCTAssertTrue(transaction.equals(loadedBillTransactions[index]))"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let loadedTransportTransactions \u003d try! database.loadTransactions(ofTag: TestUtils.tagTransport)"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(loadedTransportTransactions.count, transportBillTransactions.count)"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // Check that the transactions with the tag \"transport\" or \"food\""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        // loaded out are equal and in reverse chronological order"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        for (index, transaction) in transportBillTransactions.enumerated() {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            XCTAssertTrue(transaction.equals(loadedTransportTransactions[index]))"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // -----Budget Related Tests-----"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func test_getNumberOfBudgetsInDatabase() {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try database.clearBudgetDatabase())"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Empty database should return 0 for getNumberOfBudgetsInDatabase()"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(database.getNumberOfBudgetsInDatabase(), 0)"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Add budget into database"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try database.saveBudget(TestUtils.validBudget01))"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(database.getNumberOfBudgetsInDatabase(), 1)"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func test_clearBudgetDatabase() {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // If database is empty, save a budget"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        if database.getNumberOfBudgetsInDatabase() \u003d\u003d 0 {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            XCTAssertNoThrow(try database.saveBudget(TestUtils.validBudget02))"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertTrue(database.getNumberOfBudgetsInDatabase() \u003e 0)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try database.clearBudgetDatabase())"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertTrue(database.getNumberOfBudgetsInDatabase() \u003d\u003d 0)"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func test_saveBudget() {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try database.clearBudgetDatabase())"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(database.getNumberOfBudgetsInDatabase(), 0)"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try database.saveBudget(TestUtils.validBudget01))"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Load the budget out of database and check if its the one that was saved"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let budget \u003d try! database.loadBudget()"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(budget, TestUtils.validBudget01)"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Test that calling saveBudget again will overwrite existing data and not add on to it"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try database.saveBudget(TestUtils.validBudget02))"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let updatedBudget \u003d try! database.loadBudget()"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(updatedBudget, TestUtils.validBudget02)"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(database.getNumberOfBudgetsInDatabase(), 1)"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // -----Prediction Related Tests-----"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func test_getNumberOfPredictionsInDatabase() {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try database.clearPredictionDatabase())"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Empty database should return 0 for getNumberOfPredictionsInDatabase()"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(database.getNumberOfPredictionsInDatabase(), 0)"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Add predictions into database"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try database.savePrediction(TestUtils.validPrediction01))"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try database.savePrediction(TestUtils.validPrediction02))"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(database.getNumberOfPredictionsInDatabase(), 2)"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func test_clearPredictionDatabase() {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // If database is empty, save a prediction"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        if database.getNumberOfPredictionsInDatabase() \u003d\u003d 0 {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            XCTAssertNoThrow(try database.savePrediction(TestUtils.validPrediction01))"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertTrue(database.getNumberOfPredictionsInDatabase() \u003e 0)"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try database.clearPredictionDatabase())"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertTrue(database.getNumberOfPredictionsInDatabase() \u003d\u003d 0)"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func test_savePrediction() {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try database.clearPredictionDatabase())"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(database.getNumberOfPredictionsInDatabase(), 0)"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Save a prediction into the database"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try database.savePrediction(TestUtils.validPrediction01))"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Load the prediction out of database and check if its the one that was saved"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let loadedPrediction \u003d try! database.loadAllPredictions()"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertTrue(loadedPrediction.first!.equals(TestUtils.validPrediction01))"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func test_loadAllPredictions() {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Clear database"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try! database.clearPredictionDatabase()"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(database.getNumberOfPredictionsInDatabase(), 0)"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Test loading empty database"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertTrue(try database.loadAllPredictions().isEmpty)"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Save multiple predictions"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let predictions \u003d [TestUtils.validPrediction03,"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                           TestUtils.validPrediction02,"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                           TestUtils.validPrediction01]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        for prediction in predictions {"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            XCTAssertNoThrow(try database.savePrediction(prediction))"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let loadedPredictions \u003d try! database.loadAllPredictions()"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(predictions.count, loadedPredictions.count)"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Check that the predictions loaded out are equal and in reverse chronological order"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        for (index, prediction) in predictions.enumerated() {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            XCTAssertTrue(prediction.equals(loadedPredictions[index]))"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func test_loadPredictions() {"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let database \u003d try! StorageManager()"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Clear database"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try! database.clearPredictionDatabase()"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(database.getNumberOfPredictionsInDatabase(), 0)"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Test loading empty database"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertTrue(try database.loadAllPredictions().isEmpty)"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Save multiple predictions"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let predictions \u003d [TestUtils.validPrediction03,"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                           TestUtils.validPrediction02,"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                           TestUtils.validPrediction01]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        for prediction in predictions {"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            XCTAssertNoThrow(try database.savePrediction(prediction))"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(database.getNumberOfPredictionsInDatabase(), 3)"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let loadedPredictions \u003d try! database.loadPredictions(limit: 1)"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(loadedPredictions.count, 1)"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Check that the prediction loaded out is the latest prediction"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertTrue(predictions[0].equals(loadedPredictions[0]))"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    // swiftlint:enable force_try"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // swiftlint:enable force_unwrapping"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "}"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "// swiftlint:enable type_body_length"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "// swiftlint:enable file_length"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 185,
      "Fabian": 34,
      "Travis Ching Jia Yea": 359
    }
  },
  {
    "path": "baconTests/model/tag/TagManagerTests.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  TagManagerTests.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  baconTests"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 11/4/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "// swiftlint:disable force_try"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "// swiftlint:disable type_body_length"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import XCTest"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": "@testable import bacon"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": "class TagManagerTests: XCTestCase {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    var tagManager \u003d TagManager.create(testMode: true)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let parent1 \u003d \"parent1\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let parent2 \u003d \"parent2\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let child1 \u003d \"child1\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let child2 \u003d \"child2\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    override func setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        tagManager.clearTags()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_persistent_singleton() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let tagManager1 \u003d TagManager.create(testMode: true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let tagManager2 \u003d TagManager.create(testMode: true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager1 \u003d\u003d\u003d tagManager2)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_addChildTag_parentTagExists() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(tagManager.isChildTag(child1, of: parent1))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child1, to: parent1)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isChildTag(child1, of: parent1))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_addChildTag_parentTagDoesNotExist() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(tagManager.isParentTag(parent1))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(tagManager.isChildTag(child1, of: parent1))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertThrowsError(try tagManager.addChildTag(child1, to: parent1)) { err in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            XCTAssertTrue(err is InvalidTagError)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_addChildTag_duplicateTags() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child1, to: parent1)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertThrowsError(try _ \u003d tagManager.addChildTag(child1, to: parent1)) { err in"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            XCTAssertTrue(err is DuplicateTagError)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_addChildTag_multipleParents() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent2)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(try! tagManager.getChildrenTags(of: parent1).count, 0)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(try! tagManager.getChildrenTags(of: parent2).count, 0)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child1, to: parent1)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(try! tagManager.getChildrenTags(of: parent1).count, 1)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(try! tagManager.getChildrenTags(of: parent2).count, 0)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child2, to: parent1)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(try! tagManager.getChildrenTags(of: parent1).count, 2)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(try! tagManager.getChildrenTags(of: parent2).count, 0)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child1, to: parent2)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(try! tagManager.getChildrenTags(of: parent1).count, 2)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(try! tagManager.getChildrenTags(of: parent2).count, 1)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child2, to: parent2)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(try! tagManager.getChildrenTags(of: parent1).count, 2)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(try! tagManager.getChildrenTags(of: parent2).count, 2)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_addParentTag_noDuplicateTags() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(tagManager.isParentTag(parent1))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isParentTag(parent1))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_addParentTag_duplicateTags() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertThrowsError(try _ \u003d tagManager.addParentTag(parent1)) { err in"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            XCTAssertTrue(err is DuplicateTagError)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_addParentTag_multipleTags() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(tagManager.isParentTag(parent1))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(tagManager.isParentTag(parent2))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent2)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isParentTag(parent1))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isParentTag(parent2))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_removeChildTag_parentTagExists() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(tagManager.isChildTag(child1, of: parent1))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child1, to: parent1)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isChildTag(child1, of: parent1))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! tagManager.removeChildTag(child1, from: parent1)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(tagManager.isChildTag(child1, of: parent1))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_removeChildTag_parentTagDoesNotExist() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent2)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child1, to: parent1)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertThrowsError(try tagManager.removeChildTag(child1, from: parent2)) { err in"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            XCTAssertTrue(err is InvalidTagError)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_removeChildTag_childTagDoesNotExist() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child1, to: parent1)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertThrowsError(try tagManager.removeChildTag(child2, from: parent1)) { err in"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            XCTAssertTrue(err is InvalidTagError)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_removeChildTag_multipleParentTags() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent2)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child1, to: parent1)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child1, to: parent2)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isChildTag(child1, of: parent1))"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isChildTag(child1, of: parent2))"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! tagManager.removeChildTag(child1, from: parent1)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(tagManager.isChildTag(child1, of: parent1))"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isChildTag(child1, of: parent2))"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_removeParentTag_exists() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isParentTag(parent1))"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! tagManager.removeParentTag(parent1)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(tagManager.isParentTag(parent1))"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_removeParentTag_doesNotExist() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertThrowsError(try tagManager.removeParentTag(parent2)) { err in"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            XCTAssertTrue(err is InvalidTagError)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_removeParentTag_hasChildrenTags() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child1, to: parent1)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child2, to: parent1)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isChildTag(child1, of: parent1))"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isChildTag(child2, of: parent1))"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! tagManager.removeParentTag(parent1)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(tagManager.isParentTag(parent1))"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(tagManager.isChildTag(child1, of: parent1))"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(tagManager.isChildTag(child2, of: parent1))"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_removeParentTag_multipleParentTags() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent2)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isParentTag(parent1))"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isParentTag(parent2))"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! tagManager.removeParentTag(parent1)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(tagManager.isParentTag(parent1))"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isParentTag(parent2))"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_getChildrenTagsOf_noChildrenTags() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(try! tagManager.getChildrenTags(of: parent1), [])"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_getChildrenTagsOf_multipleChildrenTags() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child2, to: parent1)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child1, to: parent1)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let childrenTags \u003d try! tagManager.getChildrenTags(of: parent1)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childrenTags.count, 2)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childrenTags[0].value, child1)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childrenTags[0].parentValue, parent1)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childrenTags[1].value, child2)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childrenTags[1].parentValue, parent1)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_getChildrenTagsOf_parentTagDoesNotExist() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child1, to: parent1)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child2, to: parent1)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertThrowsError(try tagManager.getChildrenTags(of: parent2)) { err in"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            XCTAssertTrue(err is InvalidTagError)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_parentTags_noParentTags() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(tagManager.parentTags, [])"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_parentTags_oneParentTags() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(tagManager.parentTags.count, 1)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(tagManager.parentTags[0].value, parent1)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_parentTags_twoParentTags() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent2)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(tagManager.parentTags.count, 2)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(tagManager.parentTags[0].value, parent1)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(tagManager.parentTags[1].value, parent2)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_isChildTag_parentTagExists() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child1, to: parent1)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isChildTag(child1, of: parent1))"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_isChildTag_parentTagDoesNotExist() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child1, to: parent1)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(tagManager.isChildTag(child1, of: parent2))"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_isParentTag_parentTagExists() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isParentTag(parent1))"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_isParentTag_parentTagDoesNotExist() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(tagManager.isParentTag(parent2))"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_tagDisplayValue_parentTags() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent2)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let parentTags \u003d tagManager.parentTags"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(parentTags.count, 2)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(parentTags[0].value, parent1)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(parentTags[1].value, parent2)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_tagDisplayValue_childrenTags() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent2)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child1, to: parent1)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child2, to: parent1)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child1, to: parent2)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child2, to: parent2)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let childrenTags1 \u003d try! tagManager.getChildrenTags(of: parent1)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childrenTags1.count, 2)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childrenTags1[0].value, child1)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childrenTags1[1].value, child2)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let childrenTags2 \u003d try! tagManager.getChildrenTags(of: parent2)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childrenTags2.count, 2)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childrenTags2[0].value, child1)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childrenTags2[1].value, child2)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_tagParentDisplayValue_parentTags() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent2)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let parentTags \u003d tagManager.parentTags"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(parentTags.count, 2)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(parentTags[0].parentValue, nil)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(parentTags[1].parentValue, nil)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_tagParentDisplayValue_childrenTags() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addParentTag(parent2)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child1, to: parent1)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child2, to: parent1)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child1, to: parent2)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.addChildTag(child2, to: parent2)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let childrenTags1 \u003d try! tagManager.getChildrenTags(of: parent1)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childrenTags1.count, 2)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childrenTags1[0].parentValue, parent1)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childrenTags1[1].parentValue, parent1)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let childrenTags2 \u003d try! tagManager.getChildrenTags(of: parent2)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childrenTags2.count, 2)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childrenTags2[0].parentValue, parent2)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childrenTags2[1].parentValue, parent2)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_renameTag_parentTags() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let tag1 \u003d try! tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let tag2 \u003d try! tagManager.addParentTag(parent2)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isParentTag(parent1))"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isParentTag(parent2))"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(tag1.value, parent1)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(tag2.value, parent2)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.renameTag(parent1, to: \"parent3\")"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.renameTag(parent2, to: \"parent4\")"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(tagManager.isParentTag(parent1))"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(tagManager.isParentTag(parent2))"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isParentTag(\"parent3\"))"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isParentTag(\"parent4\"))"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(tag1.value, \"parent3\")"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(tag2.value, \"parent4\")"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_renameTag_childrenTags() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        _ \u003d try! tagManager.addParentTag(parent1)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        _ \u003d try! tagManager.addParentTag(parent2)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let childTag11 \u003d try! tagManager.addChildTag(child1, to: parent1)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let childTag12 \u003d try! tagManager.addChildTag(child2, to: parent1)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let childTag21 \u003d try! tagManager.addChildTag(child1, to: parent2)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let childTag22 \u003d try! tagManager.addChildTag(child2, to: parent2)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isChildTag(child1, of: parent1))"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isChildTag(child2, of: parent1))"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isChildTag(child1, of: parent2))"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isChildTag(child2, of: parent2))"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childTag11.value, child1)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childTag12.value, child2)"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childTag21.value, child1)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childTag22.value, child2)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.renameTag(child1, to: \"child3\", of: parent1)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.renameTag(child2, to: \"child4\", of: parent1)"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.renameTag(child1, to: \"child3\", of: parent2)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! _ \u003d tagManager.renameTag(child2, to: \"child4\", of: parent2)"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(tagManager.isChildTag(child1, of: parent1))"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(tagManager.isChildTag(child2, of: parent1))"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(tagManager.isChildTag(child1, of: parent2))"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertFalse(tagManager.isChildTag(child2, of: parent2))"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isChildTag(\"child3\", of: parent1))"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isChildTag(\"child4\", of: parent1))"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isChildTag(\"child3\", of: parent2))"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(tagManager.isChildTag(\"child4\", of: parent2))"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childTag11.value, \"child3\")"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childTag12.value, \"child4\")"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childTag21.value, \"child3\")"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(childTag22.value, \"child4\")"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Fabian"
        },
        "content": "// swiftlint:enbable force_try"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "// swiftlint:enable type_body_length"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 2,
      "Fabian": 358
    }
  },
  {
    "path": "baconTests/model/transaction/TransactionFrequencyTests.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  TransactionFrequencyTests.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  baconTests"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 19/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import XCTest"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": "@testable import bacon"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "class TransactionFrequencyTests: XCTestCase {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_init_oneTime_validInput() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // swiftlint:disable force_try"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let transactionFrequency \u003d try! TransactionFrequency(nature: .oneTime)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // swiftlint:enable force_try"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(transactionFrequency.nature, .oneTime)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertNil(transactionFrequency.interval)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertNil(transactionFrequency.repeats)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_init_oneTime_extraInput() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // swiftlint:disable force_try"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let transactionFrequency \u003d try! TransactionFrequency(nature: .oneTime, interval: .daily, repeats: 10)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // swiftlint:enable force_try"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Initializer should ignore `interval` and `repeats` arguments when instantiating a oneTime transaction"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(transactionFrequency.nature, .oneTime)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertNil(transactionFrequency.interval)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertNil(transactionFrequency.repeats)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_init_recurring_validInput() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // swiftlint:disable force_try"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let transactionFrequency \u003d try! TransactionFrequency(nature: .recurring, interval: .daily, repeats: 10)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // swiftlint:enable force_try"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(transactionFrequency.nature, .recurring)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(transactionFrequency.interval, .daily)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(transactionFrequency.repeats, 10)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_init_recurring_missingInterval() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertThrowsError(try TransactionFrequency(nature: .recurring, interval: nil, repeats: 10)) { err in"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            XCTAssertTrue(type(of: err) \u003d\u003d InitializationError.self)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_init_recurring_missingRepeats() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertThrowsError(try TransactionFrequency(nature: .recurring, interval: .daily, repeats: nil)) { err in"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            XCTAssertTrue(type(of: err) \u003d\u003d InitializationError.self)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_init_recurring_invalidNegativeRepeats() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertThrowsError(try TransactionFrequency(nature: .recurring, interval: .daily, repeats: -5)) { err in"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            XCTAssertTrue(type(of: err) \u003d\u003d InitializationError.self)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_init_recurring_invalidZeroRepeats() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertThrowsError(try TransactionFrequency(nature: .recurring, interval: .daily, repeats: 0)) { err in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            XCTAssertTrue(type(of: err) \u003d\u003d InitializationError.self)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fabian": 66
    }
  },
  {
    "path": "baconTests/model/transaction/TransactionManagerTests.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  TransactionManagerTests.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  baconTests"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  Most methods in TransactionManager just delegates"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  the call to StorageManager() hence we omit most unit test cases and"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  focus more on the logic of saving / updating / deletion of recurring transactions."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  Created by Travis Ching Jia Yea on 19/4/19."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "import XCTest"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "@testable import bacon"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "class TransactionManagerTests: XCTestCase {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // swiftlint:disable force_try"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // swiftlint:disable force_unwrapping"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func test_init_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try TransactionManager())"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func test_saveTransaction_recurring() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let transactionManager \u003d try! TransactionManager()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Clear database"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try transactionManager.clearTransactionDatabase())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(transactionManager.getNumberOfTransactionsInDatabase(), 0)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Save recurring transaction"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try transactionManager"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            .saveTransaction(TestUtils.validTransactionRecurringDaily3Times))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Load the transaction out of database and check if its the one that was saved"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let loadedTransactions \u003d try! transactionManager.loadTransactions(limit: 5)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(loadedTransactions.count, 3)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // The recurring instances that should have been saved"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let transactionOne \u003d TestUtils.validTransactionRecurringDaily3Times"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let dateTwo \u003d Constants.getDateFormatter().date(from: \"2019-01-02 08:00:00\")!"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let transactionTwo \u003d transactionOne.duplicate()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try! transactionTwo.edit(date: dateTwo)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let dateThree \u003d Constants.getDateFormatter().date(from: \"2019-01-03 08:00:00\")!"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let transactionThree \u003d transactionOne.duplicate()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try! transactionThree.edit(date: dateThree)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let transactions \u003d [transactionThree, transactionTwo, transactionOne]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        for (index, transaction) in transactions.enumerated() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            XCTAssertTrue(transaction.equals(loadedTransactions[index]))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // swiftlint:disable function_body_length"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func test_updateRecurringTransaction() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let transactionManager \u003d try! TransactionManager()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Clear database"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try transactionManager.clearTransactionDatabase())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(transactionManager.getNumberOfTransactionsInDatabase(), 0)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Save recurring transaction"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try transactionManager"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            .saveTransaction(TestUtils.validTransactionRecurringMonthly5Times))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(transactionManager.getNumberOfTransactionsInDatabase(), 5)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let loadedTransaction \u003d try! transactionManager.loadTransactions(limit: 10)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(loadedTransaction.count, 5)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Edit any of the transaction, changing repeats from 5 to 7"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try loadedTransaction[4].edit(frequency: try!"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            TransactionFrequency(nature: .recurring,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                 interval: .monthly,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                                 repeats: 7)))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Check that database is updated"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(transactionManager.getNumberOfTransactionsInDatabase(), 7)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let reloadedTransactions \u003d try! transactionManager.loadTransactions(limit: 10)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(reloadedTransactions.count, 7)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // The recurring instances that should have been saved"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let transactionOne \u003d loadedTransaction[4].duplicate()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let dateTwo \u003d Constants.getDateFormatter().date(from: \"2019-02-28 15:00:00\")!"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let transactionTwo \u003d transactionOne.duplicate()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try! transactionTwo.edit(date: dateTwo)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let dateThree \u003d Constants.getDateFormatter().date(from: \"2019-03-28 15:00:00\")!"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let transactionThree \u003d transactionOne.duplicate()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try! transactionThree.edit(date: dateThree)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let dateFour \u003d Constants.getDateFormatter().date(from: \"2019-04-28 15:00:00\")!"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let transactionFour \u003d transactionOne.duplicate()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try! transactionFour.edit(date: dateFour)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let dateFive \u003d Constants.getDateFormatter().date(from: \"2019-05-28 15:00:00\")!"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let transactionFive \u003d transactionOne.duplicate()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try! transactionFive.edit(date: dateFive)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let dateSix \u003d Constants.getDateFormatter().date(from: \"2019-06-28 15:00:00\")!"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let transactionSix \u003d transactionOne.duplicate()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try! transactionSix.edit(date: dateSix)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let dateSeven \u003d Constants.getDateFormatter().date(from: \"2019-07-28 15:00:00\")!"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let transactionSeven \u003d transactionOne.duplicate()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        try! transactionSeven.edit(date: dateSeven)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let transactions \u003d [transactionSeven,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                            transactionSix,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                            transactionFive,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                            transactionFour,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                            transactionThree,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                            transactionTwo,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "                            transactionOne]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        for (index, transaction) in transactions.enumerated() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            XCTAssertTrue(transaction.equals(reloadedTransactions[index]))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // swiftlint:enable function_body_length"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    func test_deleteAllRecurringInstances() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        let transactionManager \u003d try! TransactionManager()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Clear database"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try transactionManager.clearTransactionDatabase())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(transactionManager.getNumberOfTransactionsInDatabase(), 0)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Save recurring transaction"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try transactionManager"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            .saveTransaction(TestUtils.validTransactionRecurringMonthly5Times))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(transactionManager.getNumberOfTransactionsInDatabase(), 5)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        // Delete all instances of the specified recurring transaction"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertNoThrow(try transactionManager"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "            .deleteAllRecurringInstance(of: TestUtils.validTransactionRecurringMonthly5Times))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "        XCTAssertEqual(transactionManager.getNumberOfTransactionsInDatabase(), 0)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // swiftlint:enable force_unwrapping"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "    // swiftlint:enable force_try"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhang Lizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhang Lizhi": 124
    }
  },
  {
    "path": "baconTests/model/transaction/TransactionTests.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  TransactionTests.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  baconTests"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 19/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "// swiftlint:disable force_try"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import XCTest"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "@testable import bacon"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "class TransactionTests: XCTestCase {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    let testFrequency \u003d try! TransactionFrequency(nature: .oneTime)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_init_validInput_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let transaction \u003d try! Transaction(date: TestUtils.january1st2019time0800,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                           type: .expenditure,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                           frequency: testFrequency,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                           tags: [TestUtils.tagBills],"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                           amount: 1)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(transaction.date, TestUtils.january1st2019time0800)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(transaction.type, .expenditure)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(transaction.frequency, testFrequency)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(transaction.tags, [TestUtils.tagBills])"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(transaction.amount, 1)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(transaction.description, \"\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_init_invalidNegativeAmount() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertThrowsError(try Transaction(date: TestUtils.january1st2019time0800,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                             type: .expenditure,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                             frequency: testFrequency,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                             tags: [TestUtils.tagBills],"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                             amount: -1)) { err in"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                                XCTAssertTrue(type(of: err) \u003d\u003d InitializationError.self)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_init_invalidZeroAmount() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertThrowsError(try Transaction(date: TestUtils.january1st2019time0800,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                             type: .expenditure,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                             frequency: testFrequency,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                             tags: [TestUtils.tagBills],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                             amount: 0)) { err in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                                XCTAssertTrue(type(of: err) \u003d\u003d InitializationError.self)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_editTransaction_validProperties() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Stress test with all valid transactions"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Test with editing multiple properties (3 and 2), and single property"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! TestUtils.validTransactions.forEach { transaction in"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            XCTAssertNoThrow(try transaction.edit(date: TestUtils.january1st2019time0800,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                                  type: .expenditure,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                                  frequency: testFrequency))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            XCTAssertNoThrow(try transaction.edit(tags: [TestUtils.tagTransport],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                                  amount: 100))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            XCTAssertNoThrow(try transaction.edit(description: \"foo\"))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_editTransaction_invalidProperties() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Stress test with all valid transactions"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! TestUtils.validTransactions.forEach { transaction in"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            XCTAssertThrowsError(try transaction.edit(amount: -1)) { err in"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                XCTAssertTrue(err is InvalidTransactionError)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fabian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    func test_transaction_equal() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let transaction \u003d try! Transaction(date: TestUtils.january1st2019time1000,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                           type: .expenditure,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                           frequency: testFrequency,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                           tags: [TestUtils.tagBills],"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                           amount: 1)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let transaction2 \u003d try! Transaction(date: TestUtils.january1st2019time1000,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                            type: .expenditure,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                            frequency: testFrequency,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                            tags: [TestUtils.tagBills],"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "                                            amount: 1)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let transaction3 \u003d try! Transaction(date: TestUtils.january1st2019time1000,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                            type: .income,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                            frequency: testFrequency,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                            tags: [TestUtils.tagFood],"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                            amount: 3)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(transaction.equals(transaction2))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertNotEqual(transaction, transaction3)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Travis Ching Jia Yea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_transactionObservable() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let transaction \u003d try! Transaction(date: TestUtils.january1st2019time1000,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                           type: .expenditure,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                           frequency: testFrequency,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                           tags: [TestUtils.tagBills],"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                           amount: 1)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let observer \u003d DummyObserver()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        transaction.registerObserver(observer)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(observer.notifiedCount, 0)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! transaction.edit(amount: 2) // Set amount to new value"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(observer.notifiedCount, 1)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        try! transaction.edit(amount: 2) // Set amount to same value"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(observer.notifiedCount, 2)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_transactionHashable() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let transaction1 \u003d try! Transaction(date: TestUtils.january2nd2019time1500,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                            type: .expenditure,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                            frequency: testFrequency,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                            tags: [TestUtils.tagBills],"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                            amount: 1)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let transaction2 \u003d try! Transaction(date: TestUtils.january2nd2019time1500,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                            type: .expenditure,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                            frequency: testFrequency,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                            tags: [TestUtils.tagBills],"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fabian"
        },
        "content": "                                            amount: 1)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertTrue(transaction1.equals(transaction2))"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // We override \u003d\u003d to check for \u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertNotEqual(transaction1, transaction2)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Hash values should be derived from object identifiers"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertNotEqual(transaction1.hashValue, transaction2.hashValue)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        var dict: [Transaction: Int] \u003d [:]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        var set: Set\u003cTransaction\u003e \u003d []"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        dict[transaction1] \u003d 1"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        dict[transaction2] \u003d 2"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        set.insert(transaction1)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(dict[transaction1], 1)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(dict[transaction2], 2)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(set.count, 1)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        set.insert(transaction2)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(set.count, 2)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Fabian"
        },
        "content": "// swiftlint:enable force_try"
      }
    ],
    "authorContributionMap": {
      "Fabian": 138,
      "Travis Ching Jia Yea": 8
    }
  },
  {
    "path": "baconTests/model/transaction/TransactionTimeTests.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  TransactionTimeTests.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  baconTests"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 26/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import XCTest"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": "@testable import bacon"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": "class TransactionTimeTests: XCTestCase {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func test_currentDate() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let date \u003d Date()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let transactionTime \u003d TransactionTime(date)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        let calendar \u003d Calendar.current"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(transactionTime.year, calendar.component(.year, from: date))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(transactionTime.month, calendar.component(.month, from: date))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(transactionTime.day, calendar.component(.day, from: date))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(transactionTime.hour, calendar.component(.hour, from: date))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(transactionTime.minute, calendar.component(.minute, from: date))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCTAssertEqual(transactionTime.second, calendar.component(.second, from: date))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fabian": 27
    }
  },
  {
    "path": "baconUITests/baconUITests.swift",
    "fileType": "swift",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  baconUITests.swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  baconUITests"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Created by Fabian Terh on 19/3/19."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//  Copyright © 2019 nus.CS3217. All rights reserved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fabian"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fabian"
        },
        "content": "import XCTest"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fabian"
        },
        "content": "class baconUITests: XCTestCase {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    override func setUp() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Put setup code here. This method is called before the invocation of each test method in the class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // In UI tests it is usually best to stop immediately when a failure occurs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        continueAfterFailure \u003d false"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // UI tests must launch the application that they test. Doing this in setup will make sure it"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // happens for each test method."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        XCUIApplication().launch()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // In UI tests it’s important to set the initial state - such as interface orientation -"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // required for your tests before they run. The setUp method is a good place to do this."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    override func tearDown() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Put teardown code here. This method is called after the invocation of each test method in the class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    func testExample() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Use recording to get started writing UI tests."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fabian"
        },
        "content": "        // Use XCTAssert and related functions to verify your tests produce the correct results."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fabian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fabian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fabian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fabian": 36
    }
  }
]
